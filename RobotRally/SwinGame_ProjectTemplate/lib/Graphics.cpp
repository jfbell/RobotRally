/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Graphics
*
* Wrapping sgGraphics.pas
*/

#include "SGSDK.h"
#include "Graphics.h"

#include "Types.h"

unsigned char blue_of(color c)
{
    return sg_Graphics_BlueOf(c);
}

float brightness_of(color c)
{
    return sg_Graphics_BrightnessOf(c);
}

void change_screen_size(int32_t width, int32_t height)
{
    sg_Graphics_ChangeScreenSize(width, height);
}

void clear_screen()
{
    sg_Graphics_ClearScreen();
}

#ifdef __cplusplus

void clear_screen(color toColor)
{
    sg_Graphics_ClearScreenTo(toColor);
}

#endif

void clear_screen_to(color toColor)
{
    sg_Graphics_ClearScreenTo(toColor);
}

#ifdef __cplusplus

void color_components(color c, unsigned char &r, unsigned char &g, unsigned char &b, unsigned char &a)
{
    sg_Graphics_ColorComponents(c, &r, &g, &b, &a);
}

#endif

void color_components(color c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a)
{
    sg_Graphics_ColorComponents(c, r, g, b, a);
}

#ifdef __cplusplus

color color_from(bitmap bmp, color apiColor)
{
    return sg_Graphics_ColorFromBitmap(bmp, apiColor);
}

#endif

color color_from_bitmap(bitmap bmp, color apiColor)
{
    return sg_Graphics_ColorFromBitmap(bmp, apiColor);
}

void color_to_string(color c, char *result)
{
    sg_Graphics_ColorToString(c, result);
}

#ifdef __cplusplus

rectangle current_clip()
{
    return sg_Graphics_CurrentScreenClip();
}

#endif

rectangle current_screen_clip()
{
    return sg_Graphics_CurrentScreenClip();
}

#ifdef __cplusplus

rectangle current_clip(bitmap bmp)
{
    return sg_Graphics_CurrentBmpClip(bmp);
}

#endif

rectangle current_bmp_clip(bitmap bmp)
{
    return sg_Graphics_CurrentBmpClip(bmp);
}

void draw_circle(color clr, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircle(clr, false != 0, xc, yc, radius);
}

#ifdef __cplusplus

void draw_circle(color clr, const point2d &position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, false != 0, &position, radius);
}

#endif

void draw_circle_at_point(color clr, const point2d *position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, false != 0, position, radius);
}

void draw_circle_at_point_byval(color clr, const point2d position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, false != 0, &position, radius);
}

#ifdef __cplusplus

void draw_circle(color clr, bool filled, const point2d &position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, filled != 0, &position, radius);
}

#endif

void draw_or_fill_circle_at_point(color clr, bool filled, const point2d *position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, filled != 0, position, radius);
}

void draw_or_fill_circle_at_point_byval(color clr, bool filled, const point2d position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, filled != 0, &position, radius);
}

#ifdef __cplusplus

void draw_circle(color clr, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, false != 0, &c);
}

#endif

void draw_circle_struct(color clr, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, false != 0, c);
}

void draw_circle_struct_byval(color clr, const circle c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, false != 0, &c);
}

#ifdef __cplusplus

void draw_circle(bitmap dest, color clr, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, false != 0, &c);
}

#endif

void draw_circle_struct_onto(bitmap dest, color clr, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, false != 0, c);
}

void draw_circle_struct_onto_byval(bitmap dest, color clr, const circle c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, false != 0, &c);
}

#ifdef __cplusplus

void draw_circle(color clr, bool filled, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, filled != 0, &c);
}

#endif

void draw_or_fill_circle_struct(color clr, bool filled, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, filled != 0, c);
}

void draw_or_fill_circle_struct_byval(color clr, bool filled, const circle c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, filled != 0, &c);
}

#ifdef __cplusplus

void draw_circle(bitmap dest, color clr, bool filled, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, filled != 0, &c);
}

#endif

void draw_or_fill_circle_struct_onto(bitmap dest, color clr, bool filled, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, filled != 0, c);
}

void draw_or_fill_circle_struct_onto_byval(bitmap dest, color clr, bool filled, const circle c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, filled != 0, &c);
}

#ifdef __cplusplus

void draw_circle(bitmap dest, color clr, const point2d &point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, false != 0, &point, radius);
}

#endif

void draw_circle_at_point_onto(bitmap dest, color clr, const point2d *point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, false != 0, point, radius);
}

void draw_circle_at_point_onto_byval(bitmap dest, color clr, const point2d point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, false != 0, &point, radius);
}

#ifdef __cplusplus

void draw_circle(bitmap dest, color clr, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnto(dest, clr, false != 0, xc, yc, radius);
}

#endif

void draw_circle_onto(bitmap dest, color clr, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnto(dest, clr, false != 0, xc, yc, radius);
}

#ifdef __cplusplus

void draw_circle(bitmap dest, color clr, bool filled, const point2d &point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, filled != 0, &point, radius);
}

#endif

void draw_or_fill_circle_at_point_onto(bitmap dest, color clr, bool filled, const point2d *point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, filled != 0, point, radius);
}

void draw_or_fill_circle_at_point_onto_byval(bitmap dest, color clr, bool filled, const point2d point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, filled != 0, &point, radius);
}

#ifdef __cplusplus

void draw_circle(color clr, bool filled, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircle(clr, filled != 0, xc, yc, radius);
}

#endif

void draw_or_fill_circle(color clr, bool filled, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircle(clr, filled != 0, xc, yc, radius);
}

#ifdef __cplusplus

void draw_circle(bitmap dest, color clr, bool filled, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnto(dest, clr, filled != 0, xc, yc, radius);
}

#endif

void draw_or_fill_circle_onto(bitmap dest, color clr, bool filled, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnto(dest, clr, filled != 0, xc, yc, radius);
}

#ifdef __cplusplus

void draw_circle_on_screen(color clr, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, false != 0, &c);
}

#endif

void draw_circle_struct_on_screen(color clr, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, false != 0, c);
}

void draw_circle_struct_on_screen_byval(color clr, const circle c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, false != 0, &c);
}

#ifdef __cplusplus

void draw_circle_on_screen(color clr, bool filled, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, filled != 0, &c);
}

#endif

void draw_or_fill_circle_struct_on_screen(color clr, bool filled, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, filled != 0, c);
}

void draw_or_fill_circle_struct_on_screen_byval(color clr, bool filled, const circle c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, filled != 0, &c);
}

#ifdef __cplusplus

void draw_circle_on_screen(color clr, const point2d &position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, false != 0, &position, radius);
}

#endif

void draw_circle_at_point_on_screen(color clr, const point2d *position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, false != 0, position, radius);
}

void draw_circle_at_point_on_screen_byval(color clr, const point2d position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, false != 0, &position, radius);
}

void draw_circle_on_screen(color clr, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnScreen(clr, false != 0, xc, yc, radius);
}

#ifdef __cplusplus

void draw_circle_on_screen(color clr, bool filled, const point2d &position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, filled != 0, &position, radius);
}

#endif

void draw_or_fill_circle_at_point_on_screen(color clr, bool filled, const point2d *position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, filled != 0, position, radius);
}

void draw_or_fill_circle_at_point_on_screen_byval(color clr, bool filled, const point2d position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, filled != 0, &position, radius);
}

#ifdef __cplusplus

void draw_circle_on_screen(color clr, bool filled, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnScreen(clr, filled != 0, xc, yc, radius);
}

#endif

void draw_or_fill_circle_on_screen(color clr, bool filled, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnScreen(clr, filled != 0, xc, yc, radius);
}

#ifdef __cplusplus

void draw_ellipse(color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, false != 0, &source);
}

#endif

void draw_ellipse_in_rect(color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, false != 0, source);
}

void draw_ellipse_in_rect_byval(color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, false != 0, &source);
}

#ifdef __cplusplus

void draw_ellipse(color clr, bool filled, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, filled != 0, &source);
}

#endif

void draw_or_fill_ellipse_in_rect(color clr, bool filled, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, filled != 0, source);
}

void draw_or_fill_ellipse_in_rect_byval(color clr, bool filled, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, filled != 0, &source);
}

#ifdef __cplusplus

void draw_ellipse(bitmap dest, color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, false != 0, &source);
}

#endif

void draw_ellipse_in_rect_onto(bitmap dest, color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, false != 0, source);
}

void draw_ellipse_in_rect_onto_byval(bitmap dest, color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, false != 0, &source);
}

#ifdef __cplusplus

void draw_ellipse(bitmap dest, color clr, bool filled, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, filled != 0, &source);
}

#endif

void draw_or_fill_ellipse_in_rect_onto(bitmap dest, color clr, bool filled, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, filled != 0, source);
}

void draw_or_fill_ellipse_in_rect_onto_byval(bitmap dest, color clr, bool filled, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, filled != 0, &source);
}

void draw_ellipse(color clr, float xPos, float yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipse(clr, false != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_ellipse(bitmap dest, color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnto(dest, clr, false != 0, xPos, yPos, width, height);
}

#endif

void draw_ellipse_onto(bitmap dest, color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnto(dest, clr, false != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_ellipse(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipse(clr, filled != 0, xPos, yPos, width, height);
}

#endif

void draw_or_fill_ellipse(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipse(clr, filled != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_ellipse(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnto(dest, clr, filled != 0, xPos, yPos, width, height);
}

#endif

void draw_or_fill_ellipse_onto(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnto(dest, clr, filled != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_ellipse_on_screen(color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, false != 0, &source);
}

#endif

void draw_ellipse_in_rect_on_screen(color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, false != 0, source);
}

void draw_ellipse_in_rect_on_screen_byval(color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, false != 0, &source);
}

#ifdef __cplusplus

void draw_ellipse_on_screen(color clr, bool filled, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, filled != 0, &source);
}

#endif

void draw_or_fill_ellipse_in_rect_on_screen(color clr, bool filled, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, filled != 0, source);
}

void draw_or_fill_ellipse_in_rect_on_screen_byval(color clr, bool filled, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, filled != 0, &source);
}

void draw_ellipse_on_screen(color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnScreen(clr, false != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_ellipse_on_screen(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnScreen(clr, filled != 0, xPos, yPos, width, height);
}

#endif

void draw_or_fill_ellipse_on_screen(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnScreen(clr, filled != 0, xPos, yPos, width, height);
}

void draw_horizontal_line(color clr, float y, float x1, float x2)
{
    sg_Graphics_DrawHorizontalLine(clr, y, x1, x2);
}

#ifdef __cplusplus

void draw_horizontal_line(bitmap dest, color clr, int32_t y, int32_t x1, int32_t x2)
{
    sg_Graphics_DrawHorizontalLineOnto(dest, clr, y, x1, x2);
}

#endif

void draw_horizontal_line_onto(bitmap dest, color clr, int32_t y, int32_t x1, int32_t x2)
{
    sg_Graphics_DrawHorizontalLineOnto(dest, clr, y, x1, x2);
}

void draw_horizontal_line_on_screen(color clr, int32_t y, int32_t x1, int32_t x2)
{
    sg_Graphics_DrawHorizontalLineOnScreen(clr, y, x1, x2);
}

#ifdef __cplusplus

void draw_line(color clr, const line_segment &line)
{
    sg_Graphics_DrawLineSegment(clr, &line);
}

#endif

void draw_line_segment(color clr, const line_segment *line)
{
    sg_Graphics_DrawLineSegment(clr, line);
}

void draw_line_segment_byval(color clr, const line_segment line)
{
    sg_Graphics_DrawLineSegment(clr, &line);
}

#ifdef __cplusplus

void draw_line(color clr, const point2d &startPt, const point2d &endPt)
{
    sg_Graphics_DrawLinePts(clr, &startPt, &endPt);
}

#endif

void draw_line_pts(color clr, const point2d *startPt, const point2d *endPt)
{
    sg_Graphics_DrawLinePts(clr, startPt, endPt);
}

void draw_line_pts_byval(color clr, const point2d startPt, const point2d endPt)
{
    sg_Graphics_DrawLinePts(clr, &startPt, &endPt);
}

#ifdef __cplusplus

void draw_line(bitmap dest, color clr, const line_segment &line)
{
    sg_Graphics_DrawLineSegmentOnto(dest, clr, &line);
}

#endif

void draw_line_segment_onto(bitmap dest, color clr, const line_segment *line)
{
    sg_Graphics_DrawLineSegmentOnto(dest, clr, line);
}

void draw_line_segment_onto_byval(bitmap dest, color clr, const line_segment line)
{
    sg_Graphics_DrawLineSegmentOnto(dest, clr, &line);
}

#ifdef __cplusplus

void draw_line(bitmap dest, color clr, const point2d &startPt, const point2d &endPt)
{
    sg_Graphics_DrawLinePtsOnto(dest, clr, &startPt, &endPt);
}

#endif

void draw_line_pts_onto(bitmap dest, color clr, const point2d *startPt, const point2d *endPt)
{
    sg_Graphics_DrawLinePtsOnto(dest, clr, startPt, endPt);
}

void draw_line_pts_onto_byval(bitmap dest, color clr, const point2d startPt, const point2d endPt)
{
    sg_Graphics_DrawLinePtsOnto(dest, clr, &startPt, &endPt);
}

void draw_line(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd)
{
    sg_Graphics_DrawLine(clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
}

#ifdef __cplusplus

void draw_line(bitmap dest, color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd)
{
    sg_Graphics_DrawLineOnto(dest, clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
}

#endif

void draw_line_onto(bitmap dest, color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd)
{
    sg_Graphics_DrawLineOnto(dest, clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
}

#ifdef __cplusplus

void draw_line_on_screen(color clr, const line_segment &line)
{
    sg_Graphics_DrawLineSegmentOnScreen(clr, &line);
}

#endif

void draw_line_segment_on_screen(color clr, const line_segment *line)
{
    sg_Graphics_DrawLineSegmentOnScreen(clr, line);
}

void draw_line_segment_on_screen_byval(color clr, const line_segment line)
{
    sg_Graphics_DrawLineSegmentOnScreen(clr, &line);
}

#ifdef __cplusplus

void draw_line_on_screen(color clr, const point2d &startPt, const point2d &endPt)
{
    sg_Graphics_DrawLinePtsOnScreen(clr, &startPt, &endPt);
}

#endif

void draw_line_pts_on_screen(color clr, const point2d *startPt, const point2d *endPt)
{
    sg_Graphics_DrawLinePtsOnScreen(clr, startPt, endPt);
}

void draw_line_pts_on_screen_byval(color clr, const point2d startPt, const point2d endPt)
{
    sg_Graphics_DrawLinePtsOnScreen(clr, &startPt, &endPt);
}

void draw_line_on_screen(color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd)
{
    sg_Graphics_DrawLineOnScreen(clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
}

#ifdef __cplusplus

void draw_lines(color clr, const lines_array lines, int32_t lines_len)
{
    sg_Graphics_DrawLineSegments(clr, lines, lines_len);
}

#endif

void draw_line_segments(color clr, const lines_array lines, int32_t lines_len)
{
    sg_Graphics_DrawLineSegments(clr, lines, lines_len);
}

#ifdef __cplusplus

void draw_pixel(color clr, const point2d &position)
{
    sg_Graphics_DrawPixelAtPoint(clr, &position);
}

#endif

void draw_pixel_at_point(color clr, const point2d *position)
{
    sg_Graphics_DrawPixelAtPoint(clr, position);
}

void draw_pixel_at_point_byval(color clr, const point2d position)
{
    sg_Graphics_DrawPixelAtPoint(clr, &position);
}

void draw_pixel(color clr, float x, float y)
{
    sg_Graphics_DrawPixel(clr, x, y);
}

#ifdef __cplusplus

void draw_pixel(bitmap dest, color clr, const point2d &position)
{
    sg_Graphics_DrawPixelAtPointOnto(dest, clr, &position);
}

#endif

void draw_pixel_at_point_onto(bitmap dest, color clr, const point2d *position)
{
    sg_Graphics_DrawPixelAtPointOnto(dest, clr, position);
}

void draw_pixel_at_point_onto_byval(bitmap dest, color clr, const point2d position)
{
    sg_Graphics_DrawPixelAtPointOnto(dest, clr, &position);
}

#ifdef __cplusplus

void draw_pixel(bitmap dest, color clr, int32_t x, int32_t y)
{
    sg_Graphics_DrawPixelOnto(dest, clr, x, y);
}

#endif

void draw_pixel_onto(bitmap dest, color clr, int32_t x, int32_t y)
{
    sg_Graphics_DrawPixelOnto(dest, clr, x, y);
}

#ifdef __cplusplus

void draw_pixel_on_screen(color clr, const point2d &position)
{
    sg_Graphics_DrawPixelAtPointOnScreen(clr, &position);
}

#endif

void draw_pixel_at_point_on_screen(color clr, const point2d *position)
{
    sg_Graphics_DrawPixelAtPointOnScreen(clr, position);
}

void draw_pixel_at_point_on_screen_byval(color clr, const point2d position)
{
    sg_Graphics_DrawPixelAtPointOnScreen(clr, &position);
}

void draw_pixel_on_screen(color clr, int32_t x, int32_t y)
{
    sg_Graphics_DrawPixelOnScreen(clr, x, y);
}

void draw_rectangle(color clr, float xPos, float yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangle(clr, false != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_rectangle(color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, false != 0, &source);
}

#endif

void draw_rectangle_struct(color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, false != 0, source);
}

void draw_rectangle_struct_byval(color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, false != 0, &source);
}

#ifdef __cplusplus

void draw_rectangle(color clr, bool filled, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, filled != 0, &source);
}

#endif

void draw_or_fill_rectangle_struct(color clr, bool filled, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, filled != 0, source);
}

void draw_or_fill_rectangle_struct_byval(color clr, bool filled, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, filled != 0, &source);
}

#ifdef __cplusplus

void draw_rectangle(bitmap dest, color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, false != 0, &source);
}

#endif

void draw_rectangle_struct_onto(bitmap dest, color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, false != 0, source);
}

void draw_rectangle_struct_onto_byval(bitmap dest, color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, false != 0, &source);
}

#ifdef __cplusplus

void draw_rectangle(bitmap dest, color clr, bool filled, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, filled != 0, &source);
}

#endif

void draw_or_fill_rectangle_struct_onto(bitmap dest, color clr, bool filled, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, filled != 0, source);
}

void draw_or_fill_rectangle_struct_onto_byval(bitmap dest, color clr, bool filled, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, filled != 0, &source);
}

#ifdef __cplusplus

void draw_rectangle(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangle(clr, filled != 0, xPos, yPos, width, height);
}

#endif

void draw_or_fill_rectangle(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangle(clr, filled != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_rectangle(bitmap dest, color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnto(dest, clr, false != 0, xPos, yPos, width, height);
}

#endif

void draw_rectangle_onto(bitmap dest, color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnto(dest, clr, false != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_rectangle(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnto(dest, clr, filled != 0, xPos, yPos, width, height);
}

#endif

void draw_or_fill_rectangle_onto(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnto(dest, clr, filled != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_rectangle_on_screen(color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, false != 0, &source);
}

#endif

void draw_rectangle_struct_on_screen(color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, false != 0, source);
}

void draw_rectangle_struct_on_screen_byval(color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, false != 0, &source);
}

#ifdef __cplusplus

void draw_rectangle_on_screen(color clr, bool filled, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, filled != 0, &source);
}

#endif

void draw_or_fill_rectangle_struct_on_screen(color clr, bool filled, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, filled != 0, source);
}

void draw_or_fill_rectangle_struct_on_screen_byval(color clr, bool filled, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, filled != 0, &source);
}

void draw_rectangle_on_screen(color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnScreen(clr, false != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void draw_rectangle_on_screen(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnScreen(clr, filled != 0, xPos, yPos, width, height);
}

#endif

void draw_or_fill_rectangle_on_screen(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnScreen(clr, filled != 0, xPos, yPos, width, height);
}

void draw_triangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
    sg_Graphics_DrawTriangle(clr, x1, y1, x2, y2, x3, y3);
}

#ifdef __cplusplus

void draw_triangle(color clr, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, false != 0, &tri);
}

#endif

void draw_triangle_struct(color clr, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, false != 0, tri);
}

void draw_triangle_struct_byval(color clr, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, false != 0, &tri);
}

#ifdef __cplusplus

void draw_triangle(color clr, bool filled, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, filled != 0, &tri);
}

#endif

void draw_or_fill_triangle_struct(color clr, bool filled, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, filled != 0, tri);
}

void draw_or_fill_triangle_struct_byval(color clr, bool filled, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, filled != 0, &tri);
}

#ifdef __cplusplus

void draw_triangle(bitmap dest, color clr, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, false != 0, &tri);
}

#endif

void draw_triangle_struct_onto(bitmap dest, color clr, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, false != 0, tri);
}

void draw_triangle_struct_onto_byval(bitmap dest, color clr, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, false != 0, &tri);
}

#ifdef __cplusplus

void draw_triangle(bitmap dest, color clr, bool filled, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, filled != 0, &tri);
}

#endif

void draw_or_fill_triangle_struct_onto(bitmap dest, color clr, bool filled, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, filled != 0, tri);
}

void draw_or_fill_triangle_struct_onto_byval(bitmap dest, color clr, bool filled, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, filled != 0, &tri);
}

#ifdef __cplusplus

void draw_triangle(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
    sg_Graphics_DrawTriangleOnto(dest, clr, x1, y1, x2, y2, x3, y3);
}

#endif

void draw_triangle_onto(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
    sg_Graphics_DrawTriangleOnto(dest, clr, x1, y1, x2, y2, x3, y3);
}

#ifdef __cplusplus

void draw_triangle_on_screen(color clr, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, false != 0, &tri);
}

#endif

void draw_triangle_struct_on_screen(color clr, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, false != 0, tri);
}

void draw_triangle_struct_on_screen_byval(color clr, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, false != 0, &tri);
}

#ifdef __cplusplus

void draw_triangle_on_screen(color clr, bool filled, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, filled != 0, &tri);
}

#endif

void draw_or_fill_triangle_struct_on_screen(color clr, bool filled, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, filled != 0, tri);
}

void draw_or_fill_triangle_struct_on_screen_byval(color clr, bool filled, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, filled != 0, &tri);
}

void draw_triangle_on_screen(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
    sg_Graphics_DrawTriangleOnScreen(clr, x1, y1, x2, y2, x3, y3);
}

void draw_vertical_line(color clr, float x, float y1, float y2)
{
    sg_Graphics_DrawVerticalLine(clr, x, y1, y2);
}

#ifdef __cplusplus

void draw_vertical_line(bitmap dest, color clr, int32_t x, int32_t y1, int32_t y2)
{
    sg_Graphics_DrawVerticalLineOnto(dest, clr, x, y1, y2);
}

#endif

void draw_vertical_line_onto(bitmap dest, color clr, int32_t x, int32_t y1, int32_t y2)
{
    sg_Graphics_DrawVerticalLineOnto(dest, clr, x, y1, y2);
}

void draw_vertical_line_on_screen(color clr, int32_t x, int32_t y1, int32_t y2)
{
    sg_Graphics_DrawVerticalLineOnScreen(clr, x, y1, y2);
}

void fill_circle(color clr, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircle(clr, true != 0, xc, yc, radius);
}

#ifdef __cplusplus

void fill_circle(color clr, const point2d &position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, true != 0, &position, radius);
}

#endif

void fill_circle_at_point(color clr, const point2d *position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, true != 0, position, radius);
}

void fill_circle_at_point_byval(color clr, const point2d position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPoint(clr, true != 0, &position, radius);
}

#ifdef __cplusplus

void fill_circle(color clr, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, true != 0, &c);
}

#endif

void fill_circle_struct(color clr, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, true != 0, c);
}

void fill_circle_struct_byval(color clr, const circle c)
{
    sg_Graphics_DrawOrFillCircleStruct(clr, true != 0, &c);
}

#ifdef __cplusplus

void fill_circle(bitmap dest, color clr, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, true != 0, &c);
}

#endif

void fill_circle_struct_onto(bitmap dest, color clr, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, true != 0, c);
}

void fill_circle_struct_onto_byval(bitmap dest, color clr, const circle c)
{
    sg_Graphics_DrawOrFillCircleStructOnto(dest, clr, true != 0, &c);
}

#ifdef __cplusplus

void fill_circle(bitmap dest, color clr, const point2d &point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, true != 0, &point, radius);
}

#endif

void fill_circle_at_point_onto(bitmap dest, color clr, const point2d *point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, true != 0, point, radius);
}

void fill_circle_at_point_onto_byval(bitmap dest, color clr, const point2d point, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnto(dest, clr, true != 0, &point, radius);
}

#ifdef __cplusplus

void fill_circle(bitmap dest, color clr, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnto(dest, clr, true != 0, xc, yc, radius);
}

#endif

void fill_circle_onto(bitmap dest, color clr, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnto(dest, clr, true != 0, xc, yc, radius);
}

#ifdef __cplusplus

void fill_circle_on_screen(color clr, const circle &c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, true != 0, &c);
}

#endif

void fill_circle_struct_on_screen(color clr, const circle *c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, true != 0, c);
}

void fill_circle_struct_on_screen_byval(color clr, const circle c)
{
    sg_Graphics_DrawOrFillCircleStructOnScreen(clr, true != 0, &c);
}

#ifdef __cplusplus

void fill_circle_on_screen(color clr, const point2d &position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, true != 0, &position, radius);
}

#endif

void fill_circle_at_point_on_screen(color clr, const point2d *position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, true != 0, position, radius);
}

void fill_circle_at_point_on_screen_byval(color clr, const point2d position, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr, true != 0, &position, radius);
}

void fill_circle_on_screen(color clr, float xc, float yc, int32_t radius)
{
    sg_Graphics_DrawOrFillCircleOnScreen(clr, true != 0, xc, yc, radius);
}

#ifdef __cplusplus

void fill_ellipse(color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, true != 0, &source);
}

#endif

void fill_ellipse_in_rect(color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, true != 0, source);
}

void fill_ellipse_in_rect_byval(color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRect(clr, true != 0, &source);
}

#ifdef __cplusplus

void fill_ellipse(bitmap dest, color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, true != 0, &source);
}

#endif

void fill_ellipse_in_rect_onto(bitmap dest, color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, true != 0, source);
}

void fill_ellipse_in_rect_onto_byval(bitmap dest, color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnto(dest, clr, true != 0, &source);
}

void fill_ellipse(color clr, float xPos, float yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipse(clr, true != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void fill_ellipse(bitmap dest, color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnto(dest, clr, true != 0, xPos, yPos, width, height);
}

#endif

void fill_ellipse_onto(bitmap dest, color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnto(dest, clr, true != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void fill_ellipse_on_screen(color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, true != 0, &source);
}

#endif

void fill_ellipse_in_rect_on_screen(color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, true != 0, source);
}

void fill_ellipse_in_rect_on_screen_byval(color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr, true != 0, &source);
}

void fill_ellipse_on_screen(color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillEllipseOnScreen(clr, true != 0, xPos, yPos, width, height);
}

void fill_rectangle(color clr, float xPos, float yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangle(clr, true != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void fill_rectangle(color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, true != 0, &source);
}

#endif

void fill_rectangle_struct(color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, true != 0, source);
}

void fill_rectangle_struct_byval(color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStruct(clr, true != 0, &source);
}

#ifdef __cplusplus

void fill_rectangle(bitmap dest, color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, true != 0, &source);
}

#endif

void fill_rectangle_struct_onto(bitmap dest, color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, true != 0, source);
}

void fill_rectangle_struct_onto_byval(bitmap dest, color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStructOnto(dest, clr, true != 0, &source);
}

#ifdef __cplusplus

void fill_rectangle(bitmap dest, color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnto(dest, clr, true != 0, xPos, yPos, width, height);
}

#endif

void fill_rectangle_onto(bitmap dest, color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnto(dest, clr, true != 0, xPos, yPos, width, height);
}

#ifdef __cplusplus

void fill_rectangle_on_screen(color clr, const rectangle &source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, true != 0, &source);
}

#endif

void fill_rectangle_struct_on_screen(color clr, const rectangle *source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, true != 0, source);
}

void fill_rectangle_struct_on_screen_byval(color clr, const rectangle source)
{
    sg_Graphics_DrawOrFillRectangleStructOnScreen(clr, true != 0, &source);
}

void fill_rectangle_on_screen(color clr, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
    sg_Graphics_DrawOrFillRectangleOnScreen(clr, true != 0, xPos, yPos, width, height);
}

void fill_triangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
    sg_Graphics_FillTriangle(clr, x1, y1, x2, y2, x3, y3);
}

#ifdef __cplusplus

void fill_triangle(color clr, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, true != 0, &tri);
}

#endif

void fill_triangle_struct(color clr, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, true != 0, tri);
}

void fill_triangle_struct_byval(color clr, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStruct(clr, true != 0, &tri);
}

#ifdef __cplusplus

void fill_triangle(bitmap dest, color clr, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, true != 0, &tri);
}

#endif

void fill_triangle_struct_onto(bitmap dest, color clr, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, true != 0, tri);
}

void fill_triangle_struct_onto_byval(bitmap dest, color clr, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnto(dest, clr, true != 0, &tri);
}

#ifdef __cplusplus

void fill_triangle(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
    sg_Graphics_FillTriangleOnto(dest, clr, x1, y1, x2, y2, x3, y3);
}

#endif

void fill_triangle_onto(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
    sg_Graphics_FillTriangleOnto(dest, clr, x1, y1, x2, y2, x3, y3);
}

#ifdef __cplusplus

void fill_triangle_on_screen(color clr, const triangle  &tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, true != 0, &tri);
}

#endif

void fill_triangle_struct_on_screen(color clr, const triangle  *tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, true != 0, tri);
}

void fill_triangle_struct_on_screen_byval(color clr, const triangle  tri)
{
    sg_Graphics_DrawOrFillTriangleStructOnScreen(clr, true != 0, &tri);
}

void fill_triangle_on_screen(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
    sg_Graphics_FillTriangleOnScreen(clr, x1, y1, x2, y2, x3, y3);
}

color get_pixel(bitmap bmp, int32_t x, int32_t y)
{
    return sg_Graphics_GetPixel(bmp, x, y);
}

color get_pixel_from_screen(int32_t x, int32_t y)
{
    return sg_Graphics_GetPixelFromScreen(x, y);
}

unsigned char green_of(color c)
{
    return sg_Graphics_GreenOf(c);
}

color hsbcolor(float hue, float saturation, float brightness)
{
    return sg_Graphics_HSBColor(hue, saturation, brightness);
}

#ifdef __cplusplus

void hsbvalues_of(color c, float &h, float &s, float &b)
{
    sg_Graphics_HSBValuesOf(c, &h, &s, &b);
}

#endif

void hsbvalues_of(color c, float *h, float *s, float *b)
{
    sg_Graphics_HSBValuesOf(c, h, s, b);
}

float hue_of(color c)
{
    return sg_Graphics_HueOf(c);
}

#ifdef __cplusplus

void open_graphics_window(const char *caption)
{
    sg_Graphics_OpenGraphicsWindow(caption, 800, 600);
}

#endif

void open_graphics_window800x600(const char *caption)
{
    sg_Graphics_OpenGraphicsWindow(caption, 800, 600);
}

void open_graphics_window(const char *caption, int32_t width, int32_t height)
{
    sg_Graphics_OpenGraphicsWindow(caption, width, height);
}

#ifdef __cplusplus

void pop_clip()
{
    sg_Graphics_PopClipScreen();
}

#endif

void pop_clip_screen()
{
    sg_Graphics_PopClipScreen();
}

#ifdef __cplusplus

void pop_clip(bitmap bmp)
{
    sg_Graphics_PopClipBmp(bmp);
}

#endif

void pop_clip_bmp(bitmap bmp)
{
    sg_Graphics_PopClipBmp(bmp);
}

#ifdef __cplusplus

void push_clip(const rectangle &r)
{
    sg_Graphics_PushClipRect(&r);
}

#endif

void push_clip_rect(const rectangle *r)
{
    sg_Graphics_PushClipRect(r);
}

void push_clip_rect_byval(const rectangle r)
{
    sg_Graphics_PushClipRect(&r);
}

#ifdef __cplusplus

void push_clip(bitmap bmp, const rectangle &r)
{
    sg_Graphics_PushClipRectForBitmap(bmp, &r);
}

#endif

void push_clip_rect_for_bitmap(bitmap bmp, const rectangle *r)
{
    sg_Graphics_PushClipRectForBitmap(bmp, r);
}

void push_clip_rect_for_bitmap_byval(bitmap bmp, const rectangle r)
{
    sg_Graphics_PushClipRectForBitmap(bmp, &r);
}

#ifdef __cplusplus

void push_clip(int32_t x, int32_t y, int32_t w, int32_t h)
{
    sg_Graphics_PushClipXY(x, y, w, h);
}

#endif

void push_clip_xy(int32_t x, int32_t y, int32_t w, int32_t h)
{
    sg_Graphics_PushClipXY(x, y, w, h);
}

void put_pixel(bitmap bmp, color value, int32_t x, int32_t y)
{
    sg_Graphics_PutPixel(bmp, value, x, y);
}

color rgbacolor(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)
{
    return sg_Graphics_RGBAColor(red, green, blue, alpha);
}

color rgbafloat_color(float r, float g, float b, float a)
{
    return sg_Graphics_RGBAFloatColor(r, g, b, a);
}

color rgbcolor(unsigned char red, unsigned char green, unsigned char blue)
{
    return sg_Graphics_RGBAColor(red, green, blue, 255);
}

color rgbfloat_color(float r, float g, float b)
{
    return sg_Graphics_RGBFloatColor(r, g, b);
}

color random_color()
{
    return sg_Graphics_RandomColor();
}

color random_rgbcolor(unsigned char alpha)
{
    return sg_Graphics_RandomRGBColor(alpha);
}

unsigned char red_of(color c)
{
    return sg_Graphics_RedOf(c);
}

void refresh_screen()
{
    sg_Graphics_RefreshScreen();
}

#ifdef __cplusplus

void refresh_screen(uint32_t TargetFPS)
{
    sg_Graphics_RefreshScreenRestrictFPS(TargetFPS);
}

#endif

void refresh_screen_restrict_fps(uint32_t TargetFPS)
{
    sg_Graphics_RefreshScreenRestrictFPS(TargetFPS);
}

void reset_clip()
{
    sg_Graphics_ResetClip();
}

#ifdef __cplusplus

void reset_clip(bitmap bmp)
{
    sg_Graphics_ResetClipForBitmap(bmp);
}

#endif

void reset_clip_for_bitmap(bitmap bmp)
{
    sg_Graphics_ResetClipForBitmap(bmp);
}

float saturation_of(color c)
{
    return sg_Graphics_SaturationOf(c);
}

int32_t screen_height()
{
    return sg_Graphics_ScreenHeight();
}

int32_t screen_width()
{
    return sg_Graphics_ScreenWidth();
}

#ifdef __cplusplus

void set_clip(const rectangle &r)
{
    sg_Graphics_SetClip(&r);
}

#endif

void set_clip(const rectangle *r)
{
    sg_Graphics_SetClip(r);
}

void set_clip_byval(const rectangle r)
{
    sg_Graphics_SetClip(&r);
}

#ifdef __cplusplus

void set_clip(bitmap bmp, const rectangle &r)
{
    sg_Graphics_SetBmpClip(bmp, &r);
}

#endif

void set_bmp_clip(bitmap bmp, const rectangle *r)
{
    sg_Graphics_SetBmpClip(bmp, r);
}

void set_bmp_clip_byval(bitmap bmp, const rectangle r)
{
    sg_Graphics_SetBmpClip(bmp, &r);
}

#ifdef __cplusplus

void set_clip(int32_t x, int32_t y, int32_t w, int32_t h)
{
    sg_Graphics_SetClipXY(x, y, w, h);
}

#endif

void set_clip_xy(int32_t x, int32_t y, int32_t w, int32_t h)
{
    sg_Graphics_SetClipXY(x, y, w, h);
}

#ifdef __cplusplus

void set_clip(bitmap bmp, int32_t x, int32_t y, int32_t w, int32_t h)
{
    sg_Graphics_SetBmpClipXY(bmp, x, y, w, h);
}

#endif

void set_bmp_clip_xy(bitmap bmp, int32_t x, int32_t y, int32_t w, int32_t h)
{
    sg_Graphics_SetBmpClipXY(bmp, x, y, w, h);
}

void set_icon(const char *filename)
{
    sg_Graphics_SetIcon(filename);
}

void show_swin_game_splash_screen()
{
    sg_Graphics_ShowSwinGameSplashScreen();
}

void take_screenshot(const char *basename)
{
    sg_Graphics_TakeScreenshot(basename);
}

void toggle_full_screen()
{
    sg_Graphics_ToggleFullScreen();
}

void toggle_window_border()
{
    sg_Graphics_ToggleWindowBorder();
}

unsigned char transparency_of(color c)
{
    return sg_Graphics_TransparencyOf(c);
}

