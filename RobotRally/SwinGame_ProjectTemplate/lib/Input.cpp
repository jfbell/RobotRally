/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Input
*
* Wrapping sgInput.pas
*/

#include "SGSDK.h"
#include "Input.h"

#include "Types.h"

#ifdef __cplusplus

float accelerometer_threshold()
{
    return sg_Input_GetAccelerometerThreshold();
}

#endif

float get_accelerometer_threshold()
{
    return sg_Input_GetAccelerometerThreshold();
}

#ifdef __cplusplus

void accelerometer_threshold(float value)
{
    sg_Input_SetAccelerometerThreshold(value);
}

#endif

void set_accelerometer_threshold(float value)
{
    sg_Input_SetAccelerometerThreshold(value);
}

bool any_key_pressed()
{
    return sg_Input_AnyKeyPressed() != 0;
}

float device_moved_in_xaxis()
{
    return sg_Input_DeviceMovedInXAxis();
}

float device_moved_in_yaxis()
{
    return sg_Input_DeviceMovedInYAxis();
}

float device_moved_in_zaxis()
{
    return sg_Input_DeviceMovedInZAxis();
}

void end_reading_text(char *result)
{
    sg_Input_EndReadingText(result);
}

void fingers_on_screen(finger_array result, int32_t result_len)
{
    sg_Input_FingersOnScreen(result, result_len);
}

void hide_keyboard()
{
    sg_Input_HideKeyboard();
}

void hide_mouse()
{
    sg_Input_HideMouse();
}

bool key_down(key_code key)
{
    return sg_Input_KeyDown(key) != 0;
}

void key_name(key_code key, char *result)
{
    sg_Input_KeyName(key, result);
}

bool key_released(key_code key)
{
    return sg_Input_KeyReleased(key) != 0;
}

bool key_typed(key_code key)
{
    return sg_Input_KeyTyped(key) != 0;
}

bool key_up(key_code key)
{
    return sg_Input_KeyUp(key) != 0;
}

bool keyboard_shown()
{
    return sg_Input_KeyboardShown() != 0;
}

bool mouse_clicked(mouse_button button)
{
    return sg_Input_MouseClicked(button) != 0;
}

bool mouse_down(mouse_button button)
{
    return sg_Input_MouseDown(button) != 0;
}

vector mouse_movement()
{
    return sg_Input_MouseMovement();
}

point2d mouse_position()
{
    return sg_Input_MousePosition();
}

vector mouse_position_as_vector()
{
    return sg_Input_MousePositionAsVector();
}

bool mouse_shown()
{
    return sg_Input_MouseShown() != 0;
}

bool mouse_up(mouse_button button)
{
    return sg_Input_MouseUp(button) != 0;
}

float mouse_x()
{
    return sg_Input_MouseX();
}

float mouse_y()
{
    return sg_Input_MouseY();
}

#ifdef __cplusplus

void move_mouse(const point2d &point)
{
    sg_Input_MoveMouseToPoint(&point);
}

#endif

void move_mouse_to_point(const point2d *point)
{
    sg_Input_MoveMouseToPoint(point);
}

void move_mouse_to_point_byval(const point2d point)
{
    sg_Input_MoveMouseToPoint(&point);
}

void move_mouse(unsigned char x, unsigned char y)
{
    sg_Input_MoveMouse(x, y);
}

int32_t number_of_fingers_on_screen()
{
    return sg_Input_NumberOfFingersOnScreen();
}

void process_events()
{
    sg_Input_ProcessEvents();
}

bool reading_text()
{
    return sg_Input_ReadingText() != 0;
}

bool screen_touched()
{
    return sg_Input_ScreenTouched() != 0;
}

void show_keyboard()
{
    sg_Input_ShowKeyboard();
}

void show_mouse()
{
    sg_Input_ShowMouse();
}

#ifdef __cplusplus

void show_mouse(bool show)
{
    sg_Input_SetMouseVisible(show != 0);
}

#endif

void set_mouse_visible(bool show)
{
    sg_Input_SetMouseVisible(show != 0);
}

#ifdef __cplusplus

void start_reading_text(color textColor, int32_t maxLength, font theFont, const rectangle &area)
{
    sg_Input_StartReadingTextWithinArea(textColor, maxLength, theFont, &area);
}

#endif

void start_reading_text_within_area(color textColor, int32_t maxLength, font theFont, const rectangle *area)
{
    sg_Input_StartReadingTextWithinArea(textColor, maxLength, theFont, area);
}

void start_reading_text_within_area_byval(color textColor, int32_t maxLength, font theFont, const rectangle area)
{
    sg_Input_StartReadingTextWithinArea(textColor, maxLength, theFont, &area);
}

void start_reading_text(color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)
{
    sg_Input_StartReadingText(textColor, maxLength, theFont, x, y);
}

#ifdef __cplusplus

void start_reading_text_with_text(const char *text, color textColor, int32_t maxLength, font theFont, const point2d &pt)
{
    sg_Input_StartReadingTextWithTextAtPt(text, textColor, maxLength, theFont, &pt);
}

#endif

void start_reading_text_with_text_at_pt(const char *text, color textColor, int32_t maxLength, font theFont, const point2d *pt)
{
    sg_Input_StartReadingTextWithTextAtPt(text, textColor, maxLength, theFont, pt);
}

void start_reading_text_with_text_at_pt_byval(const char *text, color textColor, int32_t maxLength, font theFont, const point2d pt)
{
    sg_Input_StartReadingTextWithTextAtPt(text, textColor, maxLength, theFont, &pt);
}

#ifdef __cplusplus

void start_reading_text_with_text(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle &area)
{
    sg_Input_StartReadingTextWithTextInArea(text, textColor, maxLength, theFont, &area);
}

#endif

void start_reading_text_with_text_in_area(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle *area)
{
    sg_Input_StartReadingTextWithTextInArea(text, textColor, maxLength, theFont, area);
}

void start_reading_text_with_text_in_area_byval(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle area)
{
    sg_Input_StartReadingTextWithTextInArea(text, textColor, maxLength, theFont, &area);
}

#ifdef __cplusplus

void start_reading_text_with_text(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle &area)
{
    sg_Input_StartReadingTextWithTextAndColorInArea(text, textColor, backGroundColor, maxLength, theFont, &area);
}

#endif

void start_reading_text_with_text_and_color_in_area(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle *area)
{
    sg_Input_StartReadingTextWithTextAndColorInArea(text, textColor, backGroundColor, maxLength, theFont, area);
}

void start_reading_text_with_text_and_color_in_area_byval(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle area)
{
    sg_Input_StartReadingTextWithTextAndColorInArea(text, textColor, backGroundColor, maxLength, theFont, &area);
}

void start_reading_text_with_text(const char *text, color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)
{
    sg_Input_StartReadingTextWithText(text, textColor, maxLength, theFont, x, y);
}

bool text_entry_cancelled()
{
    return sg_Input_TextEntryCancelled() != 0;
}

void text_read_as_ascii(char *result)
{
    sg_Input_TextReadAsASCII(result);
}

void toggle_keyboard()
{
    sg_Input_ToggleKeyboard();
}

bool window_close_requested()
{
    return sg_Input_WindowCloseRequested() != 0;
}

