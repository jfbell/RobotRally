/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - SGSDK
*
* Wrapping SGSDK.pas
*/

#include "SGSDK.h"
#include "SGSDK.h"

#include "Timers.h"
#include "Physics.h"
#include "Characters.h"
#include "Audio.h"
#include "Images.h"
#include "Animations.h"
#include "Sprites.h"
#include "Utils.h"
#include "Input.h"
#include "Types.h"
#include "Graphics.h"
#include "Geometry.h"
#include "Text.h"
#include "UserInterface.h"
#include "Resources.h"
#include "Camera.h"
#include "Networking.h"
#include "Arduino.h"

#ifdef __cplusplus
#ifdef _MSC_VER
#define WIN32_LEAN_AND_MEAN
#include <Windows.h>

int32_t (*var_sg_Animations_AnimationCurrentCell)(animation anim);
int32_t sg_Animations_AnimationCurrentCell(animation anim)
{
	return var_sg_Animations_AnimationCurrentCell(anim);
}
vector (*var_sg_Animations_AnimationCurrentVector)(animation anim);
vector sg_Animations_AnimationCurrentVector(animation anim)
{
	return var_sg_Animations_AnimationCurrentVector(anim);
}
bool (*var_sg_Animations_AnimationEnded)(animation anim);
bool sg_Animations_AnimationEnded(animation anim)
{
	return var_sg_Animations_AnimationEnded(anim);
}
bool (*var_sg_Animations_AnimationEnteredFrame)(animation anim);
bool sg_Animations_AnimationEnteredFrame(animation anim)
{
	return var_sg_Animations_AnimationEnteredFrame(anim);
}
float (*var_sg_Animations_AnimationFrameTime)(animation anim);
float sg_Animations_AnimationFrameTime(animation anim)
{
	return var_sg_Animations_AnimationFrameTime(anim);
}
int32_t (*var_sg_Animations_AnimationIndex)(animation_script temp, const char *name);
int32_t sg_Animations_AnimationIndex(animation_script temp, const char *name)
{
	return var_sg_Animations_AnimationIndex(temp,name);
}
void (*var_sg_Animations_AnimationName)(animation_script temp, int32_t idx, char *result);
void sg_Animations_AnimationName(animation_script temp, int32_t idx, char *result)
{
	var_sg_Animations_AnimationName(temp,idx,result);
}
void (*var_sg_Animations_AnimationScriptName)(animation_script script, char *result);
void sg_Animations_AnimationScriptName(animation_script script, char *result)
{
	var_sg_Animations_AnimationScriptName(script,result);
}
animation_script (*var_sg_Animations_AnimationScriptNamed)(const char *name);
animation_script sg_Animations_AnimationScriptNamed(const char *name)
{
	return var_sg_Animations_AnimationScriptNamed(name);
}
void (*var_sg_Animations_AssignAnimation)(animation anim, int32_t idx, animation_script script);
void sg_Animations_AssignAnimation(animation anim, int32_t idx, animation_script script)
{
	var_sg_Animations_AssignAnimation(anim,idx,script);
}
void (*var_sg_Animations_AssignAnimationNamed)(animation anim, const char *name, animation_script script);
void sg_Animations_AssignAnimationNamed(animation anim, const char *name, animation_script script)
{
	var_sg_Animations_AssignAnimationNamed(anim,name,script);
}
void (*var_sg_Animations_AssignAnimationNamedWithSound)(animation anim, const char *name, animation_script script, bool withSound);
void sg_Animations_AssignAnimationNamedWithSound(animation anim, const char *name, animation_script script, bool withSound)
{
	var_sg_Animations_AssignAnimationNamedWithSound(anim,name,script,withSound != 0);
}
void (*var_sg_Animations_AssignAnimationWithSound)(animation anim, int32_t idx, animation_script script, bool withSound);
void sg_Animations_AssignAnimationWithSound(animation anim, int32_t idx, animation_script script, bool withSound)
{
	var_sg_Animations_AssignAnimationWithSound(anim,idx,script,withSound != 0);
}
animation (*var_sg_Animations_CreateAnimation)(int32_t identifier, animation_script script, bool withSound);
animation sg_Animations_CreateAnimation(int32_t identifier, animation_script script, bool withSound)
{
	return var_sg_Animations_CreateAnimation(identifier,script,withSound != 0);
}
animation (*var_sg_Animations_CreateAnimationNamed)(const char *identifier, animation_script script);
animation sg_Animations_CreateAnimationNamed(const char *identifier, animation_script script)
{
	return var_sg_Animations_CreateAnimationNamed(identifier,script);
}
animation (*var_sg_Animations_CreateAnimationNamedWithSound)(const char *identifier, animation_script script, bool withSound);
animation sg_Animations_CreateAnimationNamedWithSound(const char *identifier, animation_script script, bool withSound)
{
	return var_sg_Animations_CreateAnimationNamedWithSound(identifier,script,withSound != 0);
}
animation (*var_sg_Animations_CreateAnimationWithSound)(int32_t identifier, animation_script script);
animation sg_Animations_CreateAnimationWithSound(int32_t identifier, animation_script script)
{
	return var_sg_Animations_CreateAnimationWithSound(identifier,script);
}
void (*var_sg_Animations_DrawAnimation)(animation ani, bitmap bmp, int32_t x, int32_t y);
void sg_Animations_DrawAnimation(animation ani, bitmap bmp, int32_t x, int32_t y)
{
	var_sg_Animations_DrawAnimation(ani,bmp,x,y);
}
void (*var_sg_Animations_DrawAnimationAtPoint)(animation ani, bitmap bmp, const point2d *pt);
void sg_Animations_DrawAnimationAtPoint(animation ani, bitmap bmp, const point2d *pt)
{
	var_sg_Animations_DrawAnimationAtPoint(ani,bmp,pt);
}
void (*var_sg_Animations_DrawAnimationOnScreen)(animation ani, bitmap bmp, int32_t x, int32_t y);
void sg_Animations_DrawAnimationOnScreen(animation ani, bitmap bmp, int32_t x, int32_t y)
{
	var_sg_Animations_DrawAnimationOnScreen(ani,bmp,x,y);
}
void (*var_sg_Animations_DrawAnimationOnScreenAtPt)(animation ani, bitmap bmp, const point2d *pt);
void sg_Animations_DrawAnimationOnScreenAtPt(animation ani, bitmap bmp, const point2d *pt)
{
	var_sg_Animations_DrawAnimationOnScreenAtPt(ani,bmp,pt);
}
void (*var_sg_Animations_DrawAnimationOntoDest)(bitmap dest, animation ani, bitmap bmp, int32_t x, int32_t y);
void sg_Animations_DrawAnimationOntoDest(bitmap dest, animation ani, bitmap bmp, int32_t x, int32_t y)
{
	var_sg_Animations_DrawAnimationOntoDest(dest,ani,bmp,x,y);
}
void (*var_sg_Animations_DrawAnimationOntoDestAtPt)(bitmap dest, animation ani, bitmap bmp, const point2d *pt);
void sg_Animations_DrawAnimationOntoDestAtPt(bitmap dest, animation ani, bitmap bmp, const point2d *pt)
{
	var_sg_Animations_DrawAnimationOntoDestAtPt(dest,ani,bmp,pt);
}
void (*var_sg_Animations_FreeAnimation)(animation *ani);
void sg_Animations_FreeAnimation(animation *ani)
{
	var_sg_Animations_FreeAnimation(ani);
}
void (*var_sg_Animations_FreeAnimationScript)(animation_script *scriptToFree);
void sg_Animations_FreeAnimationScript(animation_script *scriptToFree)
{
	var_sg_Animations_FreeAnimationScript(scriptToFree);
}
bool (*var_sg_Animations_HasAnimationScript)(const char *name);
bool sg_Animations_HasAnimationScript(const char *name)
{
	return var_sg_Animations_HasAnimationScript(name);
}
animation_script (*var_sg_Animations_LoadAnimationScript)(const char *filename);
animation_script sg_Animations_LoadAnimationScript(const char *filename)
{
	return var_sg_Animations_LoadAnimationScript(filename);
}
animation_script (*var_sg_Animations_LoadAnimationScriptNamed)(const char *name, const char *filename);
animation_script sg_Animations_LoadAnimationScriptNamed(const char *name, const char *filename)
{
	return var_sg_Animations_LoadAnimationScriptNamed(name,filename);
}
void (*var_sg_Animations_ReleaseAllAnimationScripts)();
void sg_Animations_ReleaseAllAnimationScripts()
{
	var_sg_Animations_ReleaseAllAnimationScripts();
}
void (*var_sg_Animations_ReleaseAnimationScript)(const char *name);
void sg_Animations_ReleaseAnimationScript(const char *name)
{
	var_sg_Animations_ReleaseAnimationScript(name);
}
void (*var_sg_Animations_ResetAnimationWithSound)(animation anim, bool withSound);
void sg_Animations_ResetAnimationWithSound(animation anim, bool withSound)
{
	var_sg_Animations_ResetAnimationWithSound(anim,withSound != 0);
}
void (*var_sg_Animations_RestartAnimation)(animation anim);
void sg_Animations_RestartAnimation(animation anim)
{
	var_sg_Animations_RestartAnimation(anim);
}
void (*var_sg_Animations_UpdateAnimation)(animation anim);
void sg_Animations_UpdateAnimation(animation anim)
{
	var_sg_Animations_UpdateAnimation(anim);
}
void (*var_sg_Animations_UpdateAnimationPct)(animation anim, float pct);
void sg_Animations_UpdateAnimationPct(animation anim, float pct)
{
	var_sg_Animations_UpdateAnimationPct(anim,pct);
}
void (*var_sg_Animations_UpdateAnimationPctAndSound)(animation anim, float pct, bool withSound);
void sg_Animations_UpdateAnimationPctAndSound(animation anim, float pct, bool withSound)
{
	var_sg_Animations_UpdateAnimationPctAndSound(anim,pct,withSound != 0);
}
arduino_device (*var_sg_Arduino_ArduinoDeviceNamed)(const char *name);
arduino_device sg_Arduino_ArduinoDeviceNamed(const char *name)
{
	return var_sg_Arduino_ArduinoDeviceNamed(name);
}
bool (*var_sg_Arduino_ArduinoHasData)(arduino_device dev);
bool sg_Arduino_ArduinoHasData(arduino_device dev)
{
	return var_sg_Arduino_ArduinoHasData(dev);
}
unsigned char (*var_sg_Arduino_ArduinoReadByte)(arduino_device dev);
unsigned char sg_Arduino_ArduinoReadByte(arduino_device dev)
{
	return var_sg_Arduino_ArduinoReadByte(dev);
}
unsigned char (*var_sg_Arduino_ArduinoReadByteTimeout)(arduino_device dev, int32_t timeout);
unsigned char sg_Arduino_ArduinoReadByteTimeout(arduino_device dev, int32_t timeout)
{
	return var_sg_Arduino_ArduinoReadByteTimeout(dev,timeout);
}
void (*var_sg_Arduino_ArduinoReadLine)(arduino_device dev, char *result);
void sg_Arduino_ArduinoReadLine(arduino_device dev, char *result)
{
	var_sg_Arduino_ArduinoReadLine(dev,result);
}
void (*var_sg_Arduino_ArduinoReadLineTimeout)(arduino_device dev, int32_t timeout, char *result);
void sg_Arduino_ArduinoReadLineTimeout(arduino_device dev, int32_t timeout, char *result)
{
	var_sg_Arduino_ArduinoReadLineTimeout(dev,timeout,result);
}
void (*var_sg_Arduino_ArduinoSendByte)(arduino_device dev, unsigned char value);
void sg_Arduino_ArduinoSendByte(arduino_device dev, unsigned char value)
{
	var_sg_Arduino_ArduinoSendByte(dev,value);
}
void (*var_sg_Arduino_ArduinoSendString)(arduino_device dev, const char *value);
void sg_Arduino_ArduinoSendString(arduino_device dev, const char *value)
{
	var_sg_Arduino_ArduinoSendString(dev,value);
}
void (*var_sg_Arduino_ArduinoSendStringLine)(arduino_device dev, const char *value);
void sg_Arduino_ArduinoSendStringLine(arduino_device dev, const char *value)
{
	var_sg_Arduino_ArduinoSendStringLine(dev,value);
}
arduino_device (*var_sg_Arduino_CreateArduinoDevice)(const char *port, int32_t baud);
arduino_device sg_Arduino_CreateArduinoDevice(const char *port, int32_t baud)
{
	return var_sg_Arduino_CreateArduinoDevice(port,baud);
}
arduino_device (*var_sg_Arduino_CreateArduinoNamed)(const char *name, const char *port, int32_t baud);
arduino_device sg_Arduino_CreateArduinoNamed(const char *name, const char *port, int32_t baud)
{
	return var_sg_Arduino_CreateArduinoNamed(name,port,baud);
}
void (*var_sg_Arduino_FreeArduinoDevice)(arduino_device *dev);
void sg_Arduino_FreeArduinoDevice(arduino_device *dev)
{
	var_sg_Arduino_FreeArduinoDevice(dev);
}
bool (*var_sg_Arduino_HasArduinoDevice)(const char *name);
bool sg_Arduino_HasArduinoDevice(const char *name)
{
	return var_sg_Arduino_HasArduinoDevice(name);
}
void (*var_sg_Arduino_ReleaseAllArduinoDevices)();
void sg_Arduino_ReleaseAllArduinoDevices()
{
	var_sg_Arduino_ReleaseAllArduinoDevices();
}
void (*var_sg_Arduino_ReleaseArduinoDevice)(const char *name);
void sg_Arduino_ReleaseArduinoDevice(const char *name)
{
	var_sg_Arduino_ReleaseArduinoDevice(name);
}
bool (*var_sg_Audio_AudioReady)();
bool sg_Audio_AudioReady()
{
	return var_sg_Audio_AudioReady();
}
void (*var_sg_Audio_CloseAudio)();
void sg_Audio_CloseAudio()
{
	var_sg_Audio_CloseAudio();
}
void (*var_sg_Audio_FadeMusicIn)(music mus, int32_t ms);
void sg_Audio_FadeMusicIn(music mus, int32_t ms)
{
	var_sg_Audio_FadeMusicIn(mus,ms);
}
void (*var_sg_Audio_FadeMusicInWithLoops)(music mus, int32_t loops, int32_t ms);
void sg_Audio_FadeMusicInWithLoops(music mus, int32_t loops, int32_t ms)
{
	var_sg_Audio_FadeMusicInWithLoops(mus,loops,ms);
}
void (*var_sg_Audio_FadeMusicNamedIn)(const char *name, int32_t ms);
void sg_Audio_FadeMusicNamedIn(const char *name, int32_t ms)
{
	var_sg_Audio_FadeMusicNamedIn(name,ms);
}
void (*var_sg_Audio_FadeMusicNamedInWithLoops)(const char *name, int32_t loops, int32_t ms);
void sg_Audio_FadeMusicNamedInWithLoops(const char *name, int32_t loops, int32_t ms)
{
	var_sg_Audio_FadeMusicNamedInWithLoops(name,loops,ms);
}
void (*var_sg_Audio_FadeMusicOut)(int32_t ms);
void sg_Audio_FadeMusicOut(int32_t ms)
{
	var_sg_Audio_FadeMusicOut(ms);
}
void (*var_sg_Audio_FreeMusic)(music *mus);
void sg_Audio_FreeMusic(music *mus)
{
	var_sg_Audio_FreeMusic(mus);
}
void (*var_sg_Audio_FreeSoundEffect)(sound_effect *effect);
void sg_Audio_FreeSoundEffect(sound_effect *effect)
{
	var_sg_Audio_FreeSoundEffect(effect);
}
bool (*var_sg_Audio_HasMusic)(const char *name);
bool sg_Audio_HasMusic(const char *name)
{
	return var_sg_Audio_HasMusic(name);
}
bool (*var_sg_Audio_HasSoundEffect)(const char *name);
bool sg_Audio_HasSoundEffect(const char *name)
{
	return var_sg_Audio_HasSoundEffect(name);
}
music (*var_sg_Audio_LoadMusic)(const char *filename);
music sg_Audio_LoadMusic(const char *filename)
{
	return var_sg_Audio_LoadMusic(filename);
}
music (*var_sg_Audio_LoadMusicNamed)(const char *name, const char *filename);
music sg_Audio_LoadMusicNamed(const char *name, const char *filename)
{
	return var_sg_Audio_LoadMusicNamed(name,filename);
}
sound_effect (*var_sg_Audio_LoadSoundEffect)(const char *filename);
sound_effect sg_Audio_LoadSoundEffect(const char *filename)
{
	return var_sg_Audio_LoadSoundEffect(filename);
}
sound_effect (*var_sg_Audio_LoadSoundEffectNamed)(const char *name, const char *filename);
sound_effect sg_Audio_LoadSoundEffectNamed(const char *name, const char *filename)
{
	return var_sg_Audio_LoadSoundEffectNamed(name,filename);
}
void (*var_sg_Audio_MusicFilename)(music mus, char *result);
void sg_Audio_MusicFilename(music mus, char *result)
{
	var_sg_Audio_MusicFilename(mus,result);
}
void (*var_sg_Audio_MusicName)(music mus, char *result);
void sg_Audio_MusicName(music mus, char *result)
{
	var_sg_Audio_MusicName(mus,result);
}
music (*var_sg_Audio_MusicNamed)(const char *name);
music sg_Audio_MusicNamed(const char *name)
{
	return var_sg_Audio_MusicNamed(name);
}
bool (*var_sg_Audio_MusicPlaying)();
bool sg_Audio_MusicPlaying()
{
	return var_sg_Audio_MusicPlaying();
}
float (*var_sg_Audio_MusicVolume)();
float sg_Audio_MusicVolume()
{
	return var_sg_Audio_MusicVolume();
}
void (*var_sg_Audio_OpenAudio)();
void sg_Audio_OpenAudio()
{
	var_sg_Audio_OpenAudio();
}
void (*var_sg_Audio_PauseMusic)();
void sg_Audio_PauseMusic()
{
	var_sg_Audio_PauseMusic();
}
void (*var_sg_Audio_PlayMusicNamedWithLoops)(const char *name, int32_t loops);
void sg_Audio_PlayMusicNamedWithLoops(const char *name, int32_t loops)
{
	var_sg_Audio_PlayMusicNamedWithLoops(name,loops);
}
void (*var_sg_Audio_PlayMusicWithLoops)(music mus, int32_t loops);
void sg_Audio_PlayMusicWithLoops(music mus, int32_t loops)
{
	var_sg_Audio_PlayMusicWithLoops(mus,loops);
}
void (*var_sg_Audio_PlaySoundEffectNamedWithLoopAndVolume)(const char *name, int32_t loops, float vol);
void sg_Audio_PlaySoundEffectNamedWithLoopAndVolume(const char *name, int32_t loops, float vol)
{
	var_sg_Audio_PlaySoundEffectNamedWithLoopAndVolume(name,loops,vol);
}
void (*var_sg_Audio_PlaySoundEffectWithLoopAndVolume)(sound_effect effect, int32_t loops, float vol);
void sg_Audio_PlaySoundEffectWithLoopAndVolume(sound_effect effect, int32_t loops, float vol)
{
	var_sg_Audio_PlaySoundEffectWithLoopAndVolume(effect,loops,vol);
}
void (*var_sg_Audio_ReleaseAllMusic)();
void sg_Audio_ReleaseAllMusic()
{
	var_sg_Audio_ReleaseAllMusic();
}
void (*var_sg_Audio_ReleaseAllSoundEffects)();
void sg_Audio_ReleaseAllSoundEffects()
{
	var_sg_Audio_ReleaseAllSoundEffects();
}
void (*var_sg_Audio_ReleaseMusic)(const char *name);
void sg_Audio_ReleaseMusic(const char *name)
{
	var_sg_Audio_ReleaseMusic(name);
}
void (*var_sg_Audio_ReleaseSoundEffect)(const char *name);
void sg_Audio_ReleaseSoundEffect(const char *name)
{
	var_sg_Audio_ReleaseSoundEffect(name);
}
void (*var_sg_Audio_ResumeMusic)();
void sg_Audio_ResumeMusic()
{
	var_sg_Audio_ResumeMusic();
}
void (*var_sg_Audio_SetMusicVolume)(float value);
void sg_Audio_SetMusicVolume(float value)
{
	var_sg_Audio_SetMusicVolume(value);
}
void (*var_sg_Audio_SoundEffectFilename)(sound_effect effect, char *result);
void sg_Audio_SoundEffectFilename(sound_effect effect, char *result)
{
	var_sg_Audio_SoundEffectFilename(effect,result);
}
void (*var_sg_Audio_SoundEffectName)(sound_effect effect, char *result);
void sg_Audio_SoundEffectName(sound_effect effect, char *result)
{
	var_sg_Audio_SoundEffectName(effect,result);
}
sound_effect (*var_sg_Audio_SoundEffectNamed)(const char *name);
sound_effect sg_Audio_SoundEffectNamed(const char *name)
{
	return var_sg_Audio_SoundEffectNamed(name);
}
bool (*var_sg_Audio_SoundEffectNamedPlaying)(const char *name);
bool sg_Audio_SoundEffectNamedPlaying(const char *name)
{
	return var_sg_Audio_SoundEffectNamedPlaying(name);
}
bool (*var_sg_Audio_SoundEffectPlaying)(sound_effect effect);
bool sg_Audio_SoundEffectPlaying(sound_effect effect)
{
	return var_sg_Audio_SoundEffectPlaying(effect);
}
void (*var_sg_Audio_StopMusic)();
void sg_Audio_StopMusic()
{
	var_sg_Audio_StopMusic();
}
void (*var_sg_Audio_StopSoundEffect)(sound_effect effect);
void sg_Audio_StopSoundEffect(sound_effect effect)
{
	var_sg_Audio_StopSoundEffect(effect);
}
void (*var_sg_Audio_StopSoundEffectNamed)(const char *name);
void sg_Audio_StopSoundEffectNamed(const char *name)
{
	var_sg_Audio_StopSoundEffectNamed(name);
}
bool (*var_sg_Audio_TryOpenAudio)();
bool sg_Audio_TryOpenAudio()
{
	return var_sg_Audio_TryOpenAudio();
}
point2d (*var_sg_Camera_CameraPos)();
point2d sg_Camera_CameraPos()
{
	return var_sg_Camera_CameraPos();
}
rectangle (*var_sg_Camera_CameraScreenRect)();
rectangle sg_Camera_CameraScreenRect()
{
	return var_sg_Camera_CameraScreenRect();
}
float (*var_sg_Camera_CameraX)();
float sg_Camera_CameraX()
{
	return var_sg_Camera_CameraX();
}
float (*var_sg_Camera_CameraY)();
float sg_Camera_CameraY()
{
	return var_sg_Camera_CameraY();
}
void (*var_sg_Camera_CenterCameraOn)(sprite s, const vector *offset);
void sg_Camera_CenterCameraOn(sprite s, const vector *offset)
{
	var_sg_Camera_CenterCameraOn(s,offset);
}
void (*var_sg_Camera_CenterCameraOnCharacter)(character c, const vector *offset);
void sg_Camera_CenterCameraOnCharacter(character c, const vector *offset)
{
	var_sg_Camera_CenterCameraOnCharacter(c,offset);
}
void (*var_sg_Camera_CenterCameraOnWithXYOffset)(sprite s, int32_t offsetX, int32_t offsetY);
void sg_Camera_CenterCameraOnWithXYOffset(sprite s, int32_t offsetX, int32_t offsetY)
{
	var_sg_Camera_CenterCameraOnWithXYOffset(s,offsetX,offsetY);
}
void (*var_sg_Camera_MoveCameraBy)(const vector *offset);
void sg_Camera_MoveCameraBy(const vector *offset)
{
	var_sg_Camera_MoveCameraBy(offset);
}
void (*var_sg_Camera_MoveCameraByXY)(float dx, float dy);
void sg_Camera_MoveCameraByXY(float dx, float dy)
{
	var_sg_Camera_MoveCameraByXY(dx,dy);
}
void (*var_sg_Camera_MoveCameraTo)(const point2d *pt);
void sg_Camera_MoveCameraTo(const point2d *pt)
{
	var_sg_Camera_MoveCameraTo(pt);
}
void (*var_sg_Camera_MoveCameraToXY)(float x, float y);
void sg_Camera_MoveCameraToXY(float x, float y)
{
	var_sg_Camera_MoveCameraToXY(x,y);
}
bool (*var_sg_Camera_PointOnScreen)(const point2d *pt);
bool sg_Camera_PointOnScreen(const point2d *pt)
{
	return var_sg_Camera_PointOnScreen(pt);
}
bool (*var_sg_Camera_RectOnScreen)(const rectangle *rect);
bool sg_Camera_RectOnScreen(const rectangle *rect)
{
	return var_sg_Camera_RectOnScreen(rect);
}
void (*var_sg_Camera_SetCameraPos)(const point2d *pt);
void sg_Camera_SetCameraPos(const point2d *pt)
{
	var_sg_Camera_SetCameraPos(pt);
}
void (*var_sg_Camera_SetCameraX)(float x);
void sg_Camera_SetCameraX(float x)
{
	var_sg_Camera_SetCameraX(x);
}
void (*var_sg_Camera_SetCameraY)(float y);
void sg_Camera_SetCameraY(float y)
{
	var_sg_Camera_SetCameraY(y);
}
point2d (*var_sg_Camera_ToScreen)(const point2d *worldPoint);
point2d sg_Camera_ToScreen(const point2d *worldPoint)
{
	return var_sg_Camera_ToScreen(worldPoint);
}
rectangle (*var_sg_Camera_ToScreenRect)(const rectangle *rect);
rectangle sg_Camera_ToScreenRect(const rectangle *rect)
{
	return var_sg_Camera_ToScreenRect(rect);
}
int32_t (*var_sg_Camera_ToScreenX)(float worldX);
int32_t sg_Camera_ToScreenX(float worldX)
{
	return var_sg_Camera_ToScreenX(worldX);
}
int32_t (*var_sg_Camera_ToScreenY)(float worldY);
int32_t sg_Camera_ToScreenY(float worldY)
{
	return var_sg_Camera_ToScreenY(worldY);
}
point2d (*var_sg_Camera_ToWorld)(const point2d *screenPoint);
point2d sg_Camera_ToWorld(const point2d *screenPoint)
{
	return var_sg_Camera_ToWorld(screenPoint);
}
float (*var_sg_Camera_ToWorldX)(int32_t screenX);
float sg_Camera_ToWorldX(int32_t screenX)
{
	return var_sg_Camera_ToWorldX(screenX);
}
float (*var_sg_Camera_ToWorldY)(int32_t screenY);
float sg_Camera_ToWorldY(int32_t screenY)
{
	return var_sg_Camera_ToWorldY(screenY);
}
direction_angles (*var_sg_Characters_CharacterAngleAt)(character c, int32_t index);
direction_angles sg_Characters_CharacterAngleAt(character c, int32_t index)
{
	return var_sg_Characters_CharacterAngleAt(c,index);
}
int32_t (*var_sg_Characters_CharacterAngleMaxAt)(character c, int32_t index);
int32_t sg_Characters_CharacterAngleMaxAt(character c, int32_t index)
{
	return var_sg_Characters_CharacterAngleMaxAt(c,index);
}
int32_t (*var_sg_Characters_CharacterAngleMinAt)(character c, int32_t index);
int32_t sg_Characters_CharacterAngleMinAt(character c, int32_t index)
{
	return var_sg_Characters_CharacterAngleMinAt(c,index);
}
int32_t (*var_sg_Characters_CharacterAnglesLength)(character c);
int32_t sg_Characters_CharacterAnglesLength(character c)
{
	return var_sg_Characters_CharacterAnglesLength(c);
}
void (*var_sg_Characters_CharacterCharacterName)(character c, char *result);
void sg_Characters_CharacterCharacterName(character c, char *result)
{
	var_sg_Characters_CharacterCharacterName(c,result);
}
int32_t (*var_sg_Characters_CharacterCurrentDirection)(character c);
int32_t sg_Characters_CharacterCurrentDirection(character c)
{
	return var_sg_Characters_CharacterCurrentDirection(c);
}
int32_t (*var_sg_Characters_CharacterCurrentState)(character c);
int32_t sg_Characters_CharacterCurrentState(character c)
{
	return var_sg_Characters_CharacterCurrentState(c);
}
int32_t (*var_sg_Characters_CharacterDirectionCount)(character c);
int32_t sg_Characters_CharacterDirectionCount(character c)
{
	return var_sg_Characters_CharacterDirectionCount(c);
}
void (*var_sg_Characters_CharacterDirections)(character c, string_array result, int32_t result_len);
void sg_Characters_CharacterDirections(character c, string_array result, int32_t result_len)
{
	var_sg_Characters_CharacterDirections(c,result,result_len);
}
void (*var_sg_Characters_CharacterFilename)(character c, char *result);
void sg_Characters_CharacterFilename(character c, char *result)
{
	var_sg_Characters_CharacterFilename(c,result);
}
void (*var_sg_Characters_CharacterName)(character c, char *result);
void sg_Characters_CharacterName(character c, char *result)
{
	var_sg_Characters_CharacterName(c,result);
}
character (*var_sg_Characters_CharacterNamed)(const char *name);
character sg_Characters_CharacterNamed(const char *name)
{
	return var_sg_Characters_CharacterNamed(name);
}
void (*var_sg_Characters_CharacterSetCurrentDirection)(character c, int32_t direction);
void sg_Characters_CharacterSetCurrentDirection(character c, int32_t direction)
{
	var_sg_Characters_CharacterSetCurrentDirection(c,direction);
}
void (*var_sg_Characters_CharacterSetCurrentState)(character c, int32_t state);
void sg_Characters_CharacterSetCurrentState(character c, int32_t state)
{
	var_sg_Characters_CharacterSetCurrentState(c,state);
}
void (*var_sg_Characters_CharacterSetName)(character c, const char *name);
void sg_Characters_CharacterSetName(character c, const char *name)
{
	var_sg_Characters_CharacterSetName(c,name);
}
void (*var_sg_Characters_CharacterSetType)(character c, const char *name);
void sg_Characters_CharacterSetType(character c, const char *name)
{
	var_sg_Characters_CharacterSetType(c,name);
}
void (*var_sg_Characters_CharacterSetValue)(character c, int32_t idx, float val);
void sg_Characters_CharacterSetValue(character c, int32_t idx, float val)
{
	var_sg_Characters_CharacterSetValue(c,idx,val);
}
void (*var_sg_Characters_CharacterSetValueByName)(character c, const char *name, float val);
void sg_Characters_CharacterSetValueByName(character c, const char *name, float val)
{
	var_sg_Characters_CharacterSetValueByName(c,name,val);
}
bool (*var_sg_Characters_CharacterShownLayersAt)(character c, int32_t index);
bool sg_Characters_CharacterShownLayersAt(character c, int32_t index)
{
	return var_sg_Characters_CharacterShownLayersAt(c,index);
}
sprite (*var_sg_Characters_CharacterSprite)(character c);
sprite sg_Characters_CharacterSprite(character c)
{
	return var_sg_Characters_CharacterSprite(c);
}
int32_t (*var_sg_Characters_CharacterStateCount)(character c);
int32_t sg_Characters_CharacterStateCount(character c)
{
	return var_sg_Characters_CharacterStateCount(c);
}
void (*var_sg_Characters_CharacterStates)(character c, string_array result, int32_t result_len);
void sg_Characters_CharacterStates(character c, string_array result, int32_t result_len)
{
	var_sg_Characters_CharacterStates(c,result,result_len);
}
void (*var_sg_Characters_CharacterType)(character c, char *result);
void sg_Characters_CharacterType(character c, char *result)
{
	var_sg_Characters_CharacterType(c,result);
}
float (*var_sg_Characters_CharacterValueAt)(character c, int32_t index);
float sg_Characters_CharacterValueAt(character c, int32_t index)
{
	return var_sg_Characters_CharacterValueAt(c,index);
}
int32_t (*var_sg_Characters_CharacterValueCount)(character c);
int32_t sg_Characters_CharacterValueCount(character c)
{
	return var_sg_Characters_CharacterValueCount(c);
}
void (*var_sg_Characters_CharacterValueNames)(character c, string_array result, int32_t result_len);
void sg_Characters_CharacterValueNames(character c, string_array result, int32_t result_len)
{
	var_sg_Characters_CharacterValueNames(c,result,result_len);
}
void (*var_sg_Characters_DrawCharacter)(character c);
void sg_Characters_DrawCharacter(character c)
{
	var_sg_Characters_DrawCharacter(c);
}
void (*var_sg_Characters_DrawCharacterSprite)(character c);
void sg_Characters_DrawCharacterSprite(character c)
{
	var_sg_Characters_DrawCharacterSprite(c);
}
void (*var_sg_Characters_DrawCharacterWithStationary)(character c, int32_t stationaryState, int32_t state);
void sg_Characters_DrawCharacterWithStationary(character c, int32_t stationaryState, int32_t state)
{
	var_sg_Characters_DrawCharacterWithStationary(c,stationaryState,state);
}
void (*var_sg_Characters_FreeCharacter)(character *c);
void sg_Characters_FreeCharacter(character *c)
{
	var_sg_Characters_FreeCharacter(c);
}
bool (*var_sg_Characters_HasCharacter)(const char *name);
bool sg_Characters_HasCharacter(const char *name)
{
	return var_sg_Characters_HasCharacter(name);
}
character (*var_sg_Characters_LoadCharacter)(const char *filename);
character sg_Characters_LoadCharacter(const char *filename)
{
	return var_sg_Characters_LoadCharacter(filename);
}
character (*var_sg_Characters_LoadCharacterNamed)(const char *name, const char *filename);
character sg_Characters_LoadCharacterNamed(const char *name, const char *filename)
{
	return var_sg_Characters_LoadCharacterNamed(name,filename);
}
void (*var_sg_Characters_ReleaseAllCharacters)();
void sg_Characters_ReleaseAllCharacters()
{
	var_sg_Characters_ReleaseAllCharacters();
}
void (*var_sg_Characters_ReleaseCharacter)(const char *name);
void sg_Characters_ReleaseCharacter(const char *name)
{
	var_sg_Characters_ReleaseCharacter(name);
}
void (*var_sg_Characters_SetActiveLayer)(character c);
void sg_Characters_SetActiveLayer(character c)
{
	var_sg_Characters_SetActiveLayer(c);
}
void (*var_sg_Characters_ToggleLayerVisibility)(character c, int32_t index);
void sg_Characters_ToggleLayerVisibility(character c, int32_t index)
{
	var_sg_Characters_ToggleLayerVisibility(c,index);
}
bool (*var_sg_Characters_UpdateDirectionAnimation)(character c);
bool sg_Characters_UpdateDirectionAnimation(character c)
{
	return var_sg_Characters_UpdateDirectionAnimation(c);
}
bool (*var_sg_Characters_UpdateDirectionAnimationWithStationary)(character c, int32_t state, int32_t newState);
bool sg_Characters_UpdateDirectionAnimationWithStationary(character c, int32_t state, int32_t newState)
{
	return var_sg_Characters_UpdateDirectionAnimationWithStationary(c,state,newState);
}
vector (*var_sg_Geometry_AddVectors)(const vector *v1, const vector *v2);
vector sg_Geometry_AddVectors(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_AddVectors(v1,v2);
}
void (*var_sg_Geometry_ApplyMatrix)(const matrix2d  *m, triangle  *tri);
void sg_Geometry_ApplyMatrix(const matrix2d  *m, triangle  *tri)
{
	var_sg_Geometry_ApplyMatrix(m,tri);
}
void (*var_sg_Geometry_ApplyMatrixToPoints)(const matrix2d  *m, point2d *pts, int32_t pts_len);
void sg_Geometry_ApplyMatrixToPoints(const matrix2d  *m, point2d *pts, int32_t pts_len)
{
	var_sg_Geometry_ApplyMatrixToPoints(m,pts,pts_len);
}
float (*var_sg_Geometry_CalculateAngle)(float x1, float y1, float x2, float y2);
float sg_Geometry_CalculateAngle(float x1, float y1, float x2, float y2)
{
	return var_sg_Geometry_CalculateAngle(x1,y1,x2,y2);
}
float (*var_sg_Geometry_CalculateAngleBetween)(const point2d *pt1, const point2d *pt2);
float sg_Geometry_CalculateAngleBetween(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_CalculateAngleBetween(pt1,pt2);
}
float (*var_sg_Geometry_CalculateAngleBetweenSprites)(sprite s1, sprite s2);
float sg_Geometry_CalculateAngleBetweenSprites(sprite s1, sprite s2)
{
	return var_sg_Geometry_CalculateAngleBetweenSprites(s1,s2);
}
float (*var_sg_Geometry_CalculateAngleBetweenVectors)(const vector *v1, const vector *v2);
float sg_Geometry_CalculateAngleBetweenVectors(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_CalculateAngleBetweenVectors(v1,v2);
}
circle (*var_sg_Geometry_CircleAt)(const point2d *pt, int32_t radius);
circle sg_Geometry_CircleAt(const point2d *pt, int32_t radius)
{
	return var_sg_Geometry_CircleAt(pt,radius);
}
point2d (*var_sg_Geometry_CircleCenterPoint)(const circle *c);
point2d sg_Geometry_CircleCenterPoint(const circle *c)
{
	return var_sg_Geometry_CircleCenterPoint(c);
}
circle (*var_sg_Geometry_CircleFromXY)(float x, float y, int32_t radius);
circle sg_Geometry_CircleFromXY(float x, float y, int32_t radius)
{
	return var_sg_Geometry_CircleFromXY(x,y,radius);
}
int32_t (*var_sg_Geometry_CircleRadius)(const circle *c);
int32_t sg_Geometry_CircleRadius(const circle *c)
{
	return var_sg_Geometry_CircleRadius(c);
}
bool (*var_sg_Geometry_CircleWithinRect)(const circle *c, const rectangle *rect);
bool sg_Geometry_CircleWithinRect(const circle *c, const rectangle *rect)
{
	return var_sg_Geometry_CircleWithinRect(c,rect);
}
float (*var_sg_Geometry_CircleX)(const circle *c);
float sg_Geometry_CircleX(const circle *c)
{
	return var_sg_Geometry_CircleX(c);
}
float (*var_sg_Geometry_CircleY)(const circle *c);
float sg_Geometry_CircleY(const circle *c)
{
	return var_sg_Geometry_CircleY(c);
}
point2d (*var_sg_Geometry_ClosestPointOnCircle)(const point2d *fromPt, const circle *c);
point2d sg_Geometry_ClosestPointOnCircle(const point2d *fromPt, const circle *c)
{
	return var_sg_Geometry_ClosestPointOnCircle(fromPt,c);
}
point2d (*var_sg_Geometry_ClosestPointOnLine)(const point2d *fromPt, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLine(const point2d *fromPt, const line_segment *line)
{
	return var_sg_Geometry_ClosestPointOnLine(fromPt,line);
}
point2d (*var_sg_Geometry_ClosestPointOnLineFromCircle)(const circle *c, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLineFromCircle(const circle *c, const line_segment *line)
{
	return var_sg_Geometry_ClosestPointOnLineFromCircle(c,line);
}
point2d (*var_sg_Geometry_ClosestPointOnLineXY)(float x, float y, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLineXY(float x, float y, const line_segment *line)
{
	return var_sg_Geometry_ClosestPointOnLineXY(x,y,line);
}
point2d (*var_sg_Geometry_ClosestPointOnLinesFromCircle)(const circle *c, const lines_array lines, int32_t lines_len);
point2d sg_Geometry_ClosestPointOnLinesFromCircle(const circle *c, const lines_array lines, int32_t lines_len)
{
	return var_sg_Geometry_ClosestPointOnLinesFromCircle(c,lines,lines_len);
}
point2d (*var_sg_Geometry_ClosestPointOnRectFromCircle)(const circle *c, const rectangle *rect);
point2d sg_Geometry_ClosestPointOnRectFromCircle(const circle *c, const rectangle *rect)
{
	return var_sg_Geometry_ClosestPointOnRectFromCircle(c,rect);
}
float (*var_sg_Geometry_Cosine)(float angle);
float sg_Geometry_Cosine(float angle)
{
	return var_sg_Geometry_Cosine(angle);
}
circle (*var_sg_Geometry_CreateCircle)(const point2d *pt, int32_t radius);
circle sg_Geometry_CreateCircle(const point2d *pt, int32_t radius)
{
	return var_sg_Geometry_CreateCircle(pt,radius);
}
circle (*var_sg_Geometry_CreateCircleFromXY)(float x, float y, int32_t radius);
circle sg_Geometry_CreateCircleFromXY(float x, float y, int32_t radius)
{
	return var_sg_Geometry_CreateCircleFromXY(x,y,radius);
}
line_segment (*var_sg_Geometry_CreateLine)(float x1, float y1, float x2, float y2);
line_segment sg_Geometry_CreateLine(float x1, float y1, float x2, float y2)
{
	return var_sg_Geometry_CreateLine(x1,y1,x2,y2);
}
vector (*var_sg_Geometry_CreateLineAsVector)(const line_segment *line);
vector sg_Geometry_CreateLineAsVector(const line_segment *line)
{
	return var_sg_Geometry_CreateLineAsVector(line);
}
line_segment (*var_sg_Geometry_CreateLineFromVector)(const vector *mv);
line_segment sg_Geometry_CreateLineFromVector(const vector *mv)
{
	return var_sg_Geometry_CreateLineFromVector(mv);
}
line_segment (*var_sg_Geometry_CreateLinePointToPoint)(const point2d *pt1, const point2d *pt2);
line_segment sg_Geometry_CreateLinePointToPoint(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_CreateLinePointToPoint(pt1,pt2);
}
line_segment (*var_sg_Geometry_CreateLineVectorWithStartPoint)(const point2d *pt, const vector *mv);
line_segment sg_Geometry_CreateLineVectorWithStartPoint(const point2d *pt, const vector *mv)
{
	return var_sg_Geometry_CreateLineVectorWithStartPoint(pt,mv);
}
line_segment (*var_sg_Geometry_CreateLineVectorWithStartXY)(float x, float y, const vector *mv);
line_segment sg_Geometry_CreateLineVectorWithStartXY(float x, float y, const vector *mv)
{
	return var_sg_Geometry_CreateLineVectorWithStartXY(x,y,mv);
}
rectangle (*var_sg_Geometry_CreateRectangle)(float x, float y, int32_t w, int32_t h);
rectangle sg_Geometry_CreateRectangle(float x, float y, int32_t w, int32_t h)
{
	return var_sg_Geometry_CreateRectangle(x,y,w,h);
}
rectangle (*var_sg_Geometry_CreateRectangleAtPoint)(const point2d *pt, int32_t width, int32_t height);
rectangle sg_Geometry_CreateRectangleAtPoint(const point2d *pt, int32_t width, int32_t height)
{
	return var_sg_Geometry_CreateRectangleAtPoint(pt,width,height);
}
rectangle (*var_sg_Geometry_CreateRectangleCircle)(const circle *c);
rectangle sg_Geometry_CreateRectangleCircle(const circle *c)
{
	return var_sg_Geometry_CreateRectangleCircle(c);
}
rectangle (*var_sg_Geometry_CreateRectangleForPoints)(const point2d *pt1, const point2d *pt2);
rectangle sg_Geometry_CreateRectangleForPoints(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_CreateRectangleForPoints(pt1,pt2);
}
rectangle (*var_sg_Geometry_CreateRectangleLine)(const line_segment *line);
rectangle sg_Geometry_CreateRectangleLine(const line_segment *line)
{
	return var_sg_Geometry_CreateRectangleLine(line);
}
rectangle (*var_sg_Geometry_CreateRectangleLines)(const lines_array lines, int32_t lines_len);
rectangle sg_Geometry_CreateRectangleLines(const lines_array lines, int32_t lines_len)
{
	return var_sg_Geometry_CreateRectangleLines(lines,lines_len);
}
rectangle (*var_sg_Geometry_CreateRectangleTriangle)(const triangle  *tri);
rectangle sg_Geometry_CreateRectangleTriangle(const triangle  *tri)
{
	return var_sg_Geometry_CreateRectangleTriangle(tri);
}
triangle  (*var_sg_Geometry_CreateTriangle)(float ax, float ay, float bx, float by, float cx, float cy);
triangle  sg_Geometry_CreateTriangle(float ax, float ay, float bx, float by, float cx, float cy)
{
	return var_sg_Geometry_CreateTriangle(ax,ay,bx,by,cx,cy);
}
triangle  (*var_sg_Geometry_CreateTrianglePoints)(const point2d *a, const point2d *b, const point2d *c);
triangle  sg_Geometry_CreateTrianglePoints(const point2d *a, const point2d *b, const point2d *c)
{
	return var_sg_Geometry_CreateTrianglePoints(a,b,c);
}
vector (*var_sg_Geometry_CreateVectorFromAngle)(float angle, float magnitude);
vector sg_Geometry_CreateVectorFromAngle(float angle, float magnitude)
{
	return var_sg_Geometry_CreateVectorFromAngle(angle,magnitude);
}
vector (*var_sg_Geometry_CreateVectorFromPointPtToRectangle)(const point2d *pt, const rectangle *rect);
vector sg_Geometry_CreateVectorFromPointPtToRectangle(const point2d *pt, const rectangle *rect)
{
	return var_sg_Geometry_CreateVectorFromPointPtToRectangle(pt,rect);
}
vector (*var_sg_Geometry_CreateVectorFromPointToRect)(float x, float y, float rectX, float rectY, int32_t rectWidth, int32_t rectHeight);
vector sg_Geometry_CreateVectorFromPointToRect(float x, float y, float rectX, float rectY, int32_t rectWidth, int32_t rectHeight)
{
	return var_sg_Geometry_CreateVectorFromPointToRect(x,y,rectX,rectY,rectWidth,rectHeight);
}
vector (*var_sg_Geometry_CreateVectorFromPointToRectangle)(float x, float y, const rectangle *rect);
vector sg_Geometry_CreateVectorFromPointToRectangle(float x, float y, const rectangle *rect)
{
	return var_sg_Geometry_CreateVectorFromPointToRectangle(x,y,rect);
}
vector (*var_sg_Geometry_CreateVectorFromPoints)(const point2d *p1, const point2d *p2);
vector sg_Geometry_CreateVectorFromPoints(const point2d *p1, const point2d *p2)
{
	return var_sg_Geometry_CreateVectorFromPoints(p1,p2);
}
vector (*var_sg_Geometry_CreateVectorToPoint)(const point2d *p1);
vector sg_Geometry_CreateVectorToPoint(const point2d *p1)
{
	return var_sg_Geometry_CreateVectorToPoint(p1);
}
point2d (*var_sg_Geometry_DistantPointOnCircle)(const point2d *pt, const circle *c);
point2d sg_Geometry_DistantPointOnCircle(const point2d *pt, const circle *c)
{
	return var_sg_Geometry_DistantPointOnCircle(pt,c);
}
bool (*var_sg_Geometry_DistantPointOnCircleHeading)(const point2d *pt, const circle *c, const vector *heading, point2d *oppositePt);
bool sg_Geometry_DistantPointOnCircleHeading(const point2d *pt, const circle *c, const vector *heading, point2d *oppositePt)
{
	return var_sg_Geometry_DistantPointOnCircleHeading(pt,c,heading,oppositePt);
}
float (*var_sg_Geometry_DotProduct)(const vector *v1, const vector *v2);
float sg_Geometry_DotProduct(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_DotProduct(v1,v2);
}
void (*var_sg_Geometry_FixRect)(float *x, float *y, int32_t *width, int32_t *height);
void sg_Geometry_FixRect(float *x, float *y, int32_t *width, int32_t *height)
{
	var_sg_Geometry_FixRect(x,y,width,height);
}
void (*var_sg_Geometry_FixRectangle)(rectangle *rect);
void sg_Geometry_FixRectangle(rectangle *rect)
{
	var_sg_Geometry_FixRectangle(rect);
}
matrix2d  (*var_sg_Geometry_IdentityMatrix)();
matrix2d  sg_Geometry_IdentityMatrix()
{
	return var_sg_Geometry_IdentityMatrix();
}
rectangle (*var_sg_Geometry_InsetRectangle)(const rectangle *rect, int32_t insetAmount);
rectangle sg_Geometry_InsetRectangle(const rectangle *rect, int32_t insetAmount)
{
	return var_sg_Geometry_InsetRectangle(rect,insetAmount);
}
rectangle (*var_sg_Geometry_Intersection)(const rectangle *rect1, const rectangle *rect2);
rectangle sg_Geometry_Intersection(const rectangle *rect1, const rectangle *rect2)
{
	return var_sg_Geometry_Intersection(rect1,rect2);
}
vector (*var_sg_Geometry_InvertVector)(const vector *v);
vector sg_Geometry_InvertVector(const vector *v)
{
	return var_sg_Geometry_InvertVector(v);
}
vector (*var_sg_Geometry_LimitVector)(const vector *v, float limit);
vector sg_Geometry_LimitVector(const vector *v, float limit)
{
	return var_sg_Geometry_LimitVector(v,limit);
}
vector (*var_sg_Geometry_LineAsVector)(const line_segment *line);
vector sg_Geometry_LineAsVector(const line_segment *line)
{
	return var_sg_Geometry_LineAsVector(line);
}
bool (*var_sg_Geometry_LineCircleHit)(const circle *c, const vector *velocity, const lines_array lines, line_segment *found, int32_t lines_len);
bool sg_Geometry_LineCircleHit(const circle *c, const vector *velocity, const lines_array lines, line_segment *found, int32_t lines_len)
{
	return var_sg_Geometry_LineCircleHit(c,velocity,lines,found,lines_len);
}
line_segment (*var_sg_Geometry_LineFrom)(float x1, float y1, float x2, float y2);
line_segment sg_Geometry_LineFrom(float x1, float y1, float x2, float y2)
{
	return var_sg_Geometry_LineFrom(x1,y1,x2,y2);
}
line_segment (*var_sg_Geometry_LineFromPointToPoint)(const point2d *pt1, const point2d *pt2);
line_segment sg_Geometry_LineFromPointToPoint(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_LineFromPointToPoint(pt1,pt2);
}
line_segment (*var_sg_Geometry_LineFromVector)(const vector *mv);
line_segment sg_Geometry_LineFromVector(const vector *mv)
{
	return var_sg_Geometry_LineFromVector(mv);
}
line_segment (*var_sg_Geometry_LineFromVectorWithStartPoint)(const point2d *pt, const vector *mv);
line_segment sg_Geometry_LineFromVectorWithStartPoint(const point2d *pt, const vector *mv)
{
	return var_sg_Geometry_LineFromVectorWithStartPoint(pt,mv);
}
line_segment (*var_sg_Geometry_LineFromVectorWithStartXY)(float x, float y, const vector *mv);
line_segment sg_Geometry_LineFromVectorWithStartXY(float x, float y, const vector *mv)
{
	return var_sg_Geometry_LineFromVectorWithStartXY(x,y,mv);
}
bool (*var_sg_Geometry_LineIntersectionPoint)(const line_segment *line1, const line_segment *line2, point2d *pt);
bool sg_Geometry_LineIntersectionPoint(const line_segment *line1, const line_segment *line2, point2d *pt)
{
	return var_sg_Geometry_LineIntersectionPoint(line1,line2,pt);
}
bool (*var_sg_Geometry_LineIntersectsCircle)(const line_segment *l, const circle *c);
bool sg_Geometry_LineIntersectsCircle(const line_segment *l, const circle *c)
{
	return var_sg_Geometry_LineIntersectsCircle(l,c);
}
bool (*var_sg_Geometry_LineIntersectsLines)(const line_segment *line, const lines_array lines, int32_t lines_len);
bool sg_Geometry_LineIntersectsLines(const line_segment *line, const lines_array lines, int32_t lines_len)
{
	return var_sg_Geometry_LineIntersectsLines(line,lines,lines_len);
}
bool (*var_sg_Geometry_LineIntersectsRect)(const line_segment *line, const rectangle *rect);
bool sg_Geometry_LineIntersectsRect(const line_segment *line, const rectangle *rect)
{
	return var_sg_Geometry_LineIntersectsRect(line,rect);
}
float (*var_sg_Geometry_LineMagnitudeSq)(float x1, float y1, float x2, float y2);
float sg_Geometry_LineMagnitudeSq(float x1, float y1, float x2, float y2)
{
	return var_sg_Geometry_LineMagnitudeSq(x1,y1,x2,y2);
}
float (*var_sg_Geometry_LineMagnitudeSqFromLine)(const line_segment *line);
float sg_Geometry_LineMagnitudeSqFromLine(const line_segment *line)
{
	return var_sg_Geometry_LineMagnitudeSqFromLine(line);
}
point2d (*var_sg_Geometry_LineMidPoint)(const line_segment *line);
point2d sg_Geometry_LineMidPoint(const line_segment *line)
{
	return var_sg_Geometry_LineMidPoint(line);
}
vector (*var_sg_Geometry_LineNormal)(const line_segment *line);
vector sg_Geometry_LineNormal(const line_segment *line)
{
	return var_sg_Geometry_LineNormal(line);
}
bool (*var_sg_Geometry_LineSegmentsIntersect)(const line_segment *line1, const line_segment *line2);
bool sg_Geometry_LineSegmentsIntersect(const line_segment *line1, const line_segment *line2)
{
	return var_sg_Geometry_LineSegmentsIntersect(line1,line2);
}
void (*var_sg_Geometry_LineToString)(const line_segment *ln, char *result);
void sg_Geometry_LineToString(const line_segment *ln, char *result)
{
	var_sg_Geometry_LineToString(ln,result);
}
void (*var_sg_Geometry_LinesFromRect)(const rectangle *rect, lines_array result, int32_t result_len);
void sg_Geometry_LinesFromRect(const rectangle *rect, lines_array result, int32_t result_len)
{
	var_sg_Geometry_LinesFromRect(rect,result,result_len);
}
void (*var_sg_Geometry_LinesFromTriangle)(const triangle  *tri, lines_array result, int32_t result_len);
void sg_Geometry_LinesFromTriangle(const triangle  *tri, lines_array result, int32_t result_len)
{
	var_sg_Geometry_LinesFromTriangle(tri,result,result_len);
}
bool (*var_sg_Geometry_LinesRectIntersect)(const lines_array lines, const rectangle *r, int32_t lines_len);
bool sg_Geometry_LinesRectIntersect(const lines_array lines, const rectangle *r, int32_t lines_len)
{
	return var_sg_Geometry_LinesRectIntersect(lines,r,lines_len);
}
matrix2d  (*var_sg_Geometry_MatrixMultiply)(const matrix2d  *m1, const matrix2d  *m2);
matrix2d  sg_Geometry_MatrixMultiply(const matrix2d  *m1, const matrix2d  *m2)
{
	return var_sg_Geometry_MatrixMultiply(m1,m2);
}
vector (*var_sg_Geometry_MatrixMultiplyVector)(const matrix2d  *m, const vector *v);
vector sg_Geometry_MatrixMultiplyVector(const matrix2d  *m, const vector *v)
{
	return var_sg_Geometry_MatrixMultiplyVector(m,v);
}
void (*var_sg_Geometry_MatrixToString)(const matrix2d  *m, char *result);
void sg_Geometry_MatrixToString(const matrix2d  *m, char *result)
{
	var_sg_Geometry_MatrixToString(m,result);
}
point2d (*var_sg_Geometry_PointAdd)(const point2d *pt1, const point2d *pt2);
point2d sg_Geometry_PointAdd(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_PointAdd(pt1,pt2);
}
point2d (*var_sg_Geometry_PointAt)(float x, float y);
point2d sg_Geometry_PointAt(float x, float y)
{
	return var_sg_Geometry_PointAt(x,y);
}
point2d (*var_sg_Geometry_PointAtStartWithOffset)(const point2d *startPoint, const vector *offset);
point2d sg_Geometry_PointAtStartWithOffset(const point2d *startPoint, const vector *offset)
{
	return var_sg_Geometry_PointAtStartWithOffset(startPoint,offset);
}
bool (*var_sg_Geometry_PointInCircle)(const point2d *pt, const circle *c);
bool sg_Geometry_PointInCircle(const point2d *pt, const circle *c)
{
	return var_sg_Geometry_PointInCircle(pt,c);
}
bool (*var_sg_Geometry_PointInRect)(const point2d *pt, const rectangle *rect);
bool sg_Geometry_PointInRect(const point2d *pt, const rectangle *rect)
{
	return var_sg_Geometry_PointInRect(pt,rect);
}
bool (*var_sg_Geometry_PointInRectXY)(const point2d *pt, float x, float y, float w, float h);
bool sg_Geometry_PointInRectXY(const point2d *pt, float x, float y, float w, float h)
{
	return var_sg_Geometry_PointInRectXY(pt,x,y,w,h);
}
bool (*var_sg_Geometry_PointInTriangle)(const point2d *pt, const triangle  *tri);
bool sg_Geometry_PointInTriangle(const point2d *pt, const triangle  *tri)
{
	return var_sg_Geometry_PointInTriangle(pt,tri);
}
float (*var_sg_Geometry_PointLineDistance)(const point2d *pt, const line_segment *line);
float sg_Geometry_PointLineDistance(const point2d *pt, const line_segment *line)
{
	return var_sg_Geometry_PointLineDistance(pt,line);
}
bool (*var_sg_Geometry_PointOnLine)(const point2d *pt, const line_segment *line);
bool sg_Geometry_PointOnLine(const point2d *pt, const line_segment *line)
{
	return var_sg_Geometry_PointOnLine(pt,line);
}
bool (*var_sg_Geometry_PointOnPoint)(const point2d *pt1, const point2d *pt2);
bool sg_Geometry_PointOnPoint(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_PointOnPoint(pt1,pt2);
}
float (*var_sg_Geometry_PointPointDistance)(const point2d *pt1, const point2d *pt2);
float sg_Geometry_PointPointDistance(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_PointPointDistance(pt1,pt2);
}
void (*var_sg_Geometry_PointToString)(const point2d *pt, char *result);
void sg_Geometry_PointToString(const point2d *pt, char *result)
{
	var_sg_Geometry_PointToString(pt,result);
}
bool (*var_sg_Geometry_PointXYInCircle)(float ptX, float ptY, float cX, float cY, float radius);
bool sg_Geometry_PointXYInCircle(float ptX, float ptY, float cX, float cY, float radius)
{
	return var_sg_Geometry_PointXYInCircle(ptX,ptY,cX,cY,radius);
}
bool (*var_sg_Geometry_PointXYInRect)(float x, float y, const rectangle *rect);
bool sg_Geometry_PointXYInRect(float x, float y, const rectangle *rect)
{
	return var_sg_Geometry_PointXYInRect(x,y,rect);
}
bool (*var_sg_Geometry_PointXYInRectXY)(float ptX, float ptY, float x, float y, float w, float h);
bool sg_Geometry_PointXYInRectXY(float ptX, float ptY, float x, float y, float w, float h)
{
	return var_sg_Geometry_PointXYInRectXY(ptX,ptY,x,y,w,h);
}
float (*var_sg_Geometry_PointXYLineDistance)(float x, float y, const line_segment *line);
float sg_Geometry_PointXYLineDistance(float x, float y, const line_segment *line)
{
	return var_sg_Geometry_PointXYLineDistance(x,y,line);
}
void (*var_sg_Geometry_PointsFromLine)(const line_segment *line, point2d *result, int32_t result_len);
void sg_Geometry_PointsFromLine(const line_segment *line, point2d *result, int32_t result_len)
{
	var_sg_Geometry_PointsFromLine(line,result,result_len);
}
void (*var_sg_Geometry_PointsFromRect)(const rectangle *rect, point2d *result, int32_t result_len);
void sg_Geometry_PointsFromRect(const rectangle *rect, point2d *result, int32_t result_len)
{
	var_sg_Geometry_PointsFromRect(rect,result,result_len);
}
point2d (*var_sg_Geometry_RandomScreenPoint)();
point2d sg_Geometry_RandomScreenPoint()
{
	return var_sg_Geometry_RandomScreenPoint();
}
float (*var_sg_Geometry_RayCircleIntersectDistance)(const point2d *ray_origin, const vector *ray_heading, const circle *c);
float sg_Geometry_RayCircleIntersectDistance(const point2d *ray_origin, const vector *ray_heading, const circle *c)
{
	return var_sg_Geometry_RayCircleIntersectDistance(ray_origin,ray_heading,c);
}
bool (*var_sg_Geometry_RayIntersectionPoint)(const point2d *fromPt, const vector *heading, const line_segment *line, point2d *pt);
bool sg_Geometry_RayIntersectionPoint(const point2d *fromPt, const vector *heading, const line_segment *line, point2d *pt)
{
	return var_sg_Geometry_RayIntersectionPoint(fromPt,heading,line,pt);
}
rectangle (*var_sg_Geometry_RectangleAfterMove)(const rectangle *rect, const vector *mv);
rectangle sg_Geometry_RectangleAfterMove(const rectangle *rect, const vector *mv)
{
	return var_sg_Geometry_RectangleAfterMove(rect,mv);
}
rectangle (*var_sg_Geometry_RectangleAtPoint)(const point2d *pt, int32_t width, int32_t height);
rectangle sg_Geometry_RectangleAtPoint(const point2d *pt, int32_t width, int32_t height)
{
	return var_sg_Geometry_RectangleAtPoint(pt,width,height);
}
float (*var_sg_Geometry_RectangleBottom)(const rectangle *rect);
float sg_Geometry_RectangleBottom(const rectangle *rect)
{
	return var_sg_Geometry_RectangleBottom(rect);
}
point2d (*var_sg_Geometry_RectangleBottomLeft)(const rectangle *rect);
point2d sg_Geometry_RectangleBottomLeft(const rectangle *rect)
{
	return var_sg_Geometry_RectangleBottomLeft(rect);
}
point2d (*var_sg_Geometry_RectangleBottomRight)(const rectangle *rect);
point2d sg_Geometry_RectangleBottomRight(const rectangle *rect)
{
	return var_sg_Geometry_RectangleBottomRight(rect);
}
point2d (*var_sg_Geometry_RectangleCenter)(const rectangle *rect);
point2d sg_Geometry_RectangleCenter(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenter(rect);
}
point2d (*var_sg_Geometry_RectangleCenterBottom)(const rectangle *rect);
point2d sg_Geometry_RectangleCenterBottom(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenterBottom(rect);
}
point2d (*var_sg_Geometry_RectangleCenterLeft)(const rectangle *rect);
point2d sg_Geometry_RectangleCenterLeft(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenterLeft(rect);
}
point2d (*var_sg_Geometry_RectangleCenterRight)(const rectangle *rect);
point2d sg_Geometry_RectangleCenterRight(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenterRight(rect);
}
point2d (*var_sg_Geometry_RectangleCenterTop)(const rectangle *rect);
point2d sg_Geometry_RectangleCenterTop(const rectangle *rect)
{
	return var_sg_Geometry_RectangleCenterTop(rect);
}
rectangle (*var_sg_Geometry_RectangleForPoints)(const point2d *pt1, const point2d *pt2);
rectangle sg_Geometry_RectangleForPoints(const point2d *pt1, const point2d *pt2)
{
	return var_sg_Geometry_RectangleForPoints(pt1,pt2);
}
rectangle (*var_sg_Geometry_RectangleFrom)(float x, float y, int32_t w, int32_t h);
rectangle sg_Geometry_RectangleFrom(float x, float y, int32_t w, int32_t h)
{
	return var_sg_Geometry_RectangleFrom(x,y,w,h);
}
rectangle (*var_sg_Geometry_RectangleFromCircle)(const circle *c);
rectangle sg_Geometry_RectangleFromCircle(const circle *c)
{
	return var_sg_Geometry_RectangleFromCircle(c);
}
rectangle (*var_sg_Geometry_RectangleFromLine)(const line_segment *line);
rectangle sg_Geometry_RectangleFromLine(const line_segment *line)
{
	return var_sg_Geometry_RectangleFromLine(line);
}
rectangle (*var_sg_Geometry_RectangleFromLines)(const lines_array lines, int32_t lines_len);
rectangle sg_Geometry_RectangleFromLines(const lines_array lines, int32_t lines_len)
{
	return var_sg_Geometry_RectangleFromLines(lines,lines_len);
}
rectangle (*var_sg_Geometry_RectangleFromTriangle)(const triangle  *tri);
rectangle sg_Geometry_RectangleFromTriangle(const triangle  *tri)
{
	return var_sg_Geometry_RectangleFromTriangle(tri);
}
float (*var_sg_Geometry_RectangleLeft)(const rectangle *rect);
float sg_Geometry_RectangleLeft(const rectangle *rect)
{
	return var_sg_Geometry_RectangleLeft(rect);
}
rectangle (*var_sg_Geometry_RectangleOffset)(const rectangle *rect, const vector *vec);
rectangle sg_Geometry_RectangleOffset(const rectangle *rect, const vector *vec)
{
	return var_sg_Geometry_RectangleOffset(rect,vec);
}
float (*var_sg_Geometry_RectangleRight)(const rectangle *rect);
float sg_Geometry_RectangleRight(const rectangle *rect)
{
	return var_sg_Geometry_RectangleRight(rect);
}
void (*var_sg_Geometry_RectangleToString)(const rectangle *rect, char *result);
void sg_Geometry_RectangleToString(const rectangle *rect, char *result)
{
	var_sg_Geometry_RectangleToString(rect,result);
}
float (*var_sg_Geometry_RectangleTop)(const rectangle *rect);
float sg_Geometry_RectangleTop(const rectangle *rect)
{
	return var_sg_Geometry_RectangleTop(rect);
}
point2d (*var_sg_Geometry_RectangleTopLeft)(const rectangle *rect);
point2d sg_Geometry_RectangleTopLeft(const rectangle *rect)
{
	return var_sg_Geometry_RectangleTopLeft(rect);
}
point2d (*var_sg_Geometry_RectangleTopRight)(const rectangle *rect);
point2d sg_Geometry_RectangleTopRight(const rectangle *rect)
{
	return var_sg_Geometry_RectangleTopRight(rect);
}
bool (*var_sg_Geometry_RectanglesIntersect)(const rectangle *rect1, const rectangle *rect2);
bool sg_Geometry_RectanglesIntersect(const rectangle *rect1, const rectangle *rect2)
{
	return var_sg_Geometry_RectanglesIntersect(rect1,rect2);
}
matrix2d  (*var_sg_Geometry_RotationMatrix)(float deg);
matrix2d  sg_Geometry_RotationMatrix(float deg)
{
	return var_sg_Geometry_RotationMatrix(deg);
}
matrix2d  (*var_sg_Geometry_ScaleMatrix)(float scale);
matrix2d  sg_Geometry_ScaleMatrix(float scale)
{
	return var_sg_Geometry_ScaleMatrix(scale);
}
matrix2d  (*var_sg_Geometry_ScaleMatrixByPoint)(const point2d *scale);
matrix2d  sg_Geometry_ScaleMatrixByPoint(const point2d *scale)
{
	return var_sg_Geometry_ScaleMatrixByPoint(scale);
}
matrix2d  (*var_sg_Geometry_ScaleRotateTranslateMatrix)(const point2d *scale, float deg, const point2d *translate);
matrix2d  sg_Geometry_ScaleRotateTranslateMatrix(const point2d *scale, float deg, const point2d *translate)
{
	return var_sg_Geometry_ScaleRotateTranslateMatrix(scale,deg,translate);
}
float (*var_sg_Geometry_Sine)(float angle);
float sg_Geometry_Sine(float angle)
{
	return var_sg_Geometry_Sine(angle);
}
vector (*var_sg_Geometry_SubtractVectors)(const vector *v1, const vector *v2);
vector sg_Geometry_SubtractVectors(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_SubtractVectors(v1,v2);
}
float (*var_sg_Geometry_Tangent)(float angle);
float sg_Geometry_Tangent(float angle)
{
	return var_sg_Geometry_Tangent(angle);
}
bool (*var_sg_Geometry_TangentPoints)(const point2d *fromPt, const circle *c, point2d *p1, point2d *p2);
bool sg_Geometry_TangentPoints(const point2d *fromPt, const circle *c, point2d *p1, point2d *p2)
{
	return var_sg_Geometry_TangentPoints(fromPt,c,p1,p2);
}
matrix2d  (*var_sg_Geometry_TranslationMatrix)(float dx, float dy);
matrix2d  sg_Geometry_TranslationMatrix(float dx, float dy)
{
	return var_sg_Geometry_TranslationMatrix(dx,dy);
}
matrix2d  (*var_sg_Geometry_TranslationMatrixPt)(const point2d *pt);
matrix2d  sg_Geometry_TranslationMatrixPt(const point2d *pt)
{
	return var_sg_Geometry_TranslationMatrixPt(pt);
}
point2d (*var_sg_Geometry_TriangleBarycenter)(const triangle  *tri);
point2d sg_Geometry_TriangleBarycenter(const triangle  *tri)
{
	return var_sg_Geometry_TriangleBarycenter(tri);
}
triangle  (*var_sg_Geometry_TriangleFrom)(float ax, float ay, float bx, float by, float cx, float cy);
triangle  sg_Geometry_TriangleFrom(float ax, float ay, float bx, float by, float cx, float cy)
{
	return var_sg_Geometry_TriangleFrom(ax,ay,bx,by,cx,cy);
}
triangle  (*var_sg_Geometry_TriangleFromPoints)(const point2d *a, const point2d *b, const point2d *c);
triangle  sg_Geometry_TriangleFromPoints(const point2d *a, const point2d *b, const point2d *c)
{
	return var_sg_Geometry_TriangleFromPoints(a,b,c);
}
bool (*var_sg_Geometry_TriangleRectangleIntersect)(const triangle  *tri, const rectangle *rect);
bool sg_Geometry_TriangleRectangleIntersect(const triangle  *tri, const rectangle *rect)
{
	return var_sg_Geometry_TriangleRectangleIntersect(tri,rect);
}
void (*var_sg_Geometry_TriangleToString)(const triangle  *tri, char *result);
void sg_Geometry_TriangleToString(const triangle  *tri, char *result)
{
	var_sg_Geometry_TriangleToString(tri,result);
}
bool (*var_sg_Geometry_TrianglesRectangleIntersect)(const triangle_array tri, const rectangle *rect, int32_t tri_len);
bool sg_Geometry_TrianglesRectangleIntersect(const triangle_array tri, const rectangle *rect, int32_t tri_len)
{
	return var_sg_Geometry_TrianglesRectangleIntersect(tri,rect,tri_len);
}
vector (*var_sg_Geometry_UnitVector)(const vector *v);
vector sg_Geometry_UnitVector(const vector *v)
{
	return var_sg_Geometry_UnitVector(v);
}
float (*var_sg_Geometry_VectorAngle)(const vector *v);
float sg_Geometry_VectorAngle(const vector *v)
{
	return var_sg_Geometry_VectorAngle(v);
}
vector (*var_sg_Geometry_VectorFromAngle)(float angle, float magnitude);
vector sg_Geometry_VectorFromAngle(float angle, float magnitude)
{
	return var_sg_Geometry_VectorFromAngle(angle,magnitude);
}
vector (*var_sg_Geometry_VectorFromPointPtToRectangle)(const point2d *pt, const rectangle *rect);
vector sg_Geometry_VectorFromPointPtToRectangle(const point2d *pt, const rectangle *rect)
{
	return var_sg_Geometry_VectorFromPointPtToRectangle(pt,rect);
}
vector (*var_sg_Geometry_VectorFromPointToRect)(float x, float y, float rectX, float rectY, int32_t rectWidth, int32_t rectHeight);
vector sg_Geometry_VectorFromPointToRect(float x, float y, float rectX, float rectY, int32_t rectWidth, int32_t rectHeight)
{
	return var_sg_Geometry_VectorFromPointToRect(x,y,rectX,rectY,rectWidth,rectHeight);
}
vector (*var_sg_Geometry_VectorFromPointToRectangle)(float x, float y, const rectangle *rect);
vector sg_Geometry_VectorFromPointToRectangle(float x, float y, const rectangle *rect)
{
	return var_sg_Geometry_VectorFromPointToRectangle(x,y,rect);
}
vector (*var_sg_Geometry_VectorFromPoints)(const point2d *p1, const point2d *p2);
vector sg_Geometry_VectorFromPoints(const point2d *p1, const point2d *p2)
{
	return var_sg_Geometry_VectorFromPoints(p1,p2);
}
bool (*var_sg_Geometry_VectorInRect)(const vector *v, const rectangle *rect);
bool sg_Geometry_VectorInRect(const vector *v, const rectangle *rect)
{
	return var_sg_Geometry_VectorInRect(v,rect);
}
bool (*var_sg_Geometry_VectorInRectXY)(const vector *v, float x, float y, float w, float h);
bool sg_Geometry_VectorInRectXY(const vector *v, float x, float y, float w, float h)
{
	return var_sg_Geometry_VectorInRectXY(v,x,y,w,h);
}
bool (*var_sg_Geometry_VectorIsZero)(const vector *v);
bool sg_Geometry_VectorIsZero(const vector *v)
{
	return var_sg_Geometry_VectorIsZero(v);
}
float (*var_sg_Geometry_VectorMagnitude)(const vector *v);
float sg_Geometry_VectorMagnitude(const vector *v)
{
	return var_sg_Geometry_VectorMagnitude(v);
}
float (*var_sg_Geometry_VectorMagnitudeSq)(const vector *v);
float sg_Geometry_VectorMagnitudeSq(const vector *v)
{
	return var_sg_Geometry_VectorMagnitudeSq(v);
}
vector (*var_sg_Geometry_VectorMultiply)(const vector *v, float s);
vector sg_Geometry_VectorMultiply(const vector *v, float s)
{
	return var_sg_Geometry_VectorMultiply(v,s);
}
vector (*var_sg_Geometry_VectorNormal)(const vector *v);
vector sg_Geometry_VectorNormal(const vector *v)
{
	return var_sg_Geometry_VectorNormal(v);
}
vector (*var_sg_Geometry_VectorOutOfCircleFromCircle)(const circle *src, const circle *bounds, const vector *velocity);
vector sg_Geometry_VectorOutOfCircleFromCircle(const circle *src, const circle *bounds, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfCircleFromCircle(src,bounds,velocity);
}
vector (*var_sg_Geometry_VectorOutOfCircleFromPoint)(const point2d *pt, const circle *c, const vector *velocity);
vector sg_Geometry_VectorOutOfCircleFromPoint(const point2d *pt, const circle *c, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfCircleFromPoint(pt,c,velocity);
}
vector (*var_sg_Geometry_VectorOutOfRectFromCircle)(const circle *c, const rectangle *rect, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromCircle(const circle *c, const rectangle *rect, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfRectFromCircle(c,rect,velocity);
}
vector (*var_sg_Geometry_VectorOutOfRectFromPoint)(const point2d *pt, const rectangle *rect, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromPoint(const point2d *pt, const rectangle *rect, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfRectFromPoint(pt,rect,velocity);
}
vector (*var_sg_Geometry_VectorOutOfRectFromRect)(const rectangle *src, const rectangle *bounds, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromRect(const rectangle *src, const rectangle *bounds, const vector *velocity)
{
	return var_sg_Geometry_VectorOutOfRectFromRect(src,bounds,velocity);
}
vector (*var_sg_Geometry_VectorOverLinesFromCircle)(const circle *c, const lines_array lines, const vector *velocity, int32_t *maxIdx, int32_t lines_len);
vector sg_Geometry_VectorOverLinesFromCircle(const circle *c, const lines_array lines, const vector *velocity, int32_t *maxIdx, int32_t lines_len)
{
	return var_sg_Geometry_VectorOverLinesFromCircle(c,lines,velocity,maxIdx,lines_len);
}
vector (*var_sg_Geometry_VectorOverLinesFromLines)(const lines_array srcLines, const lines_array boundLines, const vector *velocity, int32_t *maxIdx, int32_t srcLines_len, int32_t boundLines_len);
vector sg_Geometry_VectorOverLinesFromLines(const lines_array srcLines, const lines_array boundLines, const vector *velocity, int32_t *maxIdx, int32_t srcLines_len, int32_t boundLines_len)
{
	return var_sg_Geometry_VectorOverLinesFromLines(srcLines,boundLines,velocity,maxIdx,srcLines_len,boundLines_len);
}
vector (*var_sg_Geometry_VectorTo)(float x, float y, bool invertY);
vector sg_Geometry_VectorTo(float x, float y, bool invertY)
{
	return var_sg_Geometry_VectorTo(x,y,invertY != 0);
}
vector (*var_sg_Geometry_VectorToPoint)(const point2d *p1);
vector sg_Geometry_VectorToPoint(const point2d *p1)
{
	return var_sg_Geometry_VectorToPoint(p1);
}
bool (*var_sg_Geometry_VectorsEqual)(const vector *v1, const vector *v2);
bool sg_Geometry_VectorsEqual(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_VectorsEqual(v1,v2);
}
bool (*var_sg_Geometry_VectorsNotEqual)(const vector *v1, const vector *v2);
bool sg_Geometry_VectorsNotEqual(const vector *v1, const vector *v2)
{
	return var_sg_Geometry_VectorsNotEqual(v1,v2);
}
void (*var_sg_Geometry_WidestPoints)(const circle *c, const vector *along, point2d *pt1, point2d *pt2);
void sg_Geometry_WidestPoints(const circle *c, const vector *along, point2d *pt1, point2d *pt2)
{
	var_sg_Geometry_WidestPoints(c,along,pt1,pt2);
}
unsigned char (*var_sg_Graphics_BlueOf)(color c);
unsigned char sg_Graphics_BlueOf(color c)
{
	return var_sg_Graphics_BlueOf(c);
}
float (*var_sg_Graphics_BrightnessOf)(color c);
float sg_Graphics_BrightnessOf(color c)
{
	return var_sg_Graphics_BrightnessOf(c);
}
void (*var_sg_Graphics_ChangeScreenSize)(int32_t width, int32_t height);
void sg_Graphics_ChangeScreenSize(int32_t width, int32_t height)
{
	var_sg_Graphics_ChangeScreenSize(width,height);
}
void (*var_sg_Graphics_ClearScreen)();
void sg_Graphics_ClearScreen()
{
	var_sg_Graphics_ClearScreen();
}
void (*var_sg_Graphics_ClearScreenTo)(color toColor);
void sg_Graphics_ClearScreenTo(color toColor)
{
	var_sg_Graphics_ClearScreenTo(toColor);
}
void (*var_sg_Graphics_ColorComponents)(color c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
void sg_Graphics_ColorComponents(color c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a)
{
	var_sg_Graphics_ColorComponents(c,r,g,b,a);
}
color (*var_sg_Graphics_ColorFromBitmap)(bitmap bmp, color apiColor);
color sg_Graphics_ColorFromBitmap(bitmap bmp, color apiColor)
{
	return var_sg_Graphics_ColorFromBitmap(bmp,apiColor);
}
void (*var_sg_Graphics_ColorToString)(color c, char *result);
void sg_Graphics_ColorToString(color c, char *result)
{
	var_sg_Graphics_ColorToString(c,result);
}
rectangle (*var_sg_Graphics_CurrentBmpClip)(bitmap bmp);
rectangle sg_Graphics_CurrentBmpClip(bitmap bmp)
{
	return var_sg_Graphics_CurrentBmpClip(bmp);
}
rectangle (*var_sg_Graphics_CurrentScreenClip)();
rectangle sg_Graphics_CurrentScreenClip()
{
	return var_sg_Graphics_CurrentScreenClip();
}
void (*var_sg_Graphics_DrawHorizontalLine)(color clr, float y, float x1, float x2);
void sg_Graphics_DrawHorizontalLine(color clr, float y, float x1, float x2)
{
	var_sg_Graphics_DrawHorizontalLine(clr,y,x1,x2);
}
void (*var_sg_Graphics_DrawHorizontalLineOnScreen)(color clr, int32_t y, int32_t x1, int32_t x2);
void sg_Graphics_DrawHorizontalLineOnScreen(color clr, int32_t y, int32_t x1, int32_t x2)
{
	var_sg_Graphics_DrawHorizontalLineOnScreen(clr,y,x1,x2);
}
void (*var_sg_Graphics_DrawHorizontalLineOnto)(bitmap dest, color clr, int32_t y, int32_t x1, int32_t x2);
void sg_Graphics_DrawHorizontalLineOnto(bitmap dest, color clr, int32_t y, int32_t x1, int32_t x2)
{
	var_sg_Graphics_DrawHorizontalLineOnto(dest,clr,y,x1,x2);
}
void (*var_sg_Graphics_DrawLine)(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd);
void sg_Graphics_DrawLine(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd)
{
	var_sg_Graphics_DrawLine(clr,xPosStart,yPosStart,xPosEnd,yPosEnd);
}
void (*var_sg_Graphics_DrawLineOnScreen)(color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd);
void sg_Graphics_DrawLineOnScreen(color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd)
{
	var_sg_Graphics_DrawLineOnScreen(clr,xPosStart,yPosStart,xPosEnd,yPosEnd);
}
void (*var_sg_Graphics_DrawLineOnto)(bitmap dest, color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd);
void sg_Graphics_DrawLineOnto(bitmap dest, color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd)
{
	var_sg_Graphics_DrawLineOnto(dest,clr,xPosStart,yPosStart,xPosEnd,yPosEnd);
}
void (*var_sg_Graphics_DrawLinePts)(color clr, const point2d *startPt, const point2d *endPt);
void sg_Graphics_DrawLinePts(color clr, const point2d *startPt, const point2d *endPt)
{
	var_sg_Graphics_DrawLinePts(clr,startPt,endPt);
}
void (*var_sg_Graphics_DrawLinePtsOnScreen)(color clr, const point2d *startPt, const point2d *endPt);
void sg_Graphics_DrawLinePtsOnScreen(color clr, const point2d *startPt, const point2d *endPt)
{
	var_sg_Graphics_DrawLinePtsOnScreen(clr,startPt,endPt);
}
void (*var_sg_Graphics_DrawLinePtsOnto)(bitmap dest, color clr, const point2d *startPt, const point2d *endPt);
void sg_Graphics_DrawLinePtsOnto(bitmap dest, color clr, const point2d *startPt, const point2d *endPt)
{
	var_sg_Graphics_DrawLinePtsOnto(dest,clr,startPt,endPt);
}
void (*var_sg_Graphics_DrawLineSegment)(color clr, const line_segment *line);
void sg_Graphics_DrawLineSegment(color clr, const line_segment *line)
{
	var_sg_Graphics_DrawLineSegment(clr,line);
}
void (*var_sg_Graphics_DrawLineSegmentOnScreen)(color clr, const line_segment *line);
void sg_Graphics_DrawLineSegmentOnScreen(color clr, const line_segment *line)
{
	var_sg_Graphics_DrawLineSegmentOnScreen(clr,line);
}
void (*var_sg_Graphics_DrawLineSegmentOnto)(bitmap dest, color clr, const line_segment *line);
void sg_Graphics_DrawLineSegmentOnto(bitmap dest, color clr, const line_segment *line)
{
	var_sg_Graphics_DrawLineSegmentOnto(dest,clr,line);
}
void (*var_sg_Graphics_DrawLineSegments)(color clr, const lines_array lines, int32_t lines_len);
void sg_Graphics_DrawLineSegments(color clr, const lines_array lines, int32_t lines_len)
{
	var_sg_Graphics_DrawLineSegments(clr,lines,lines_len);
}
void (*var_sg_Graphics_DrawOrFillCircle)(color clr, bool filled, float xc, float yc, int32_t radius);
void sg_Graphics_DrawOrFillCircle(color clr, bool filled, float xc, float yc, int32_t radius)
{
	var_sg_Graphics_DrawOrFillCircle(clr,filled != 0,xc,yc,radius);
}
void (*var_sg_Graphics_DrawOrFillCircleAtPoint)(color clr, bool filled, const point2d *position, int32_t radius);
void sg_Graphics_DrawOrFillCircleAtPoint(color clr, bool filled, const point2d *position, int32_t radius)
{
	var_sg_Graphics_DrawOrFillCircleAtPoint(clr,filled != 0,position,radius);
}
void (*var_sg_Graphics_DrawOrFillCircleAtPointOnScreen)(color clr, bool filled, const point2d *position, int32_t radius);
void sg_Graphics_DrawOrFillCircleAtPointOnScreen(color clr, bool filled, const point2d *position, int32_t radius)
{
	var_sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr,filled != 0,position,radius);
}
void (*var_sg_Graphics_DrawOrFillCircleAtPointOnto)(bitmap dest, color clr, bool filled, const point2d *point, int32_t radius);
void sg_Graphics_DrawOrFillCircleAtPointOnto(bitmap dest, color clr, bool filled, const point2d *point, int32_t radius)
{
	var_sg_Graphics_DrawOrFillCircleAtPointOnto(dest,clr,filled != 0,point,radius);
}
void (*var_sg_Graphics_DrawOrFillCircleOnScreen)(color clr, bool filled, float xc, float yc, int32_t radius);
void sg_Graphics_DrawOrFillCircleOnScreen(color clr, bool filled, float xc, float yc, int32_t radius)
{
	var_sg_Graphics_DrawOrFillCircleOnScreen(clr,filled != 0,xc,yc,radius);
}
void (*var_sg_Graphics_DrawOrFillCircleOnto)(bitmap dest, color clr, bool filled, float xc, float yc, int32_t radius);
void sg_Graphics_DrawOrFillCircleOnto(bitmap dest, color clr, bool filled, float xc, float yc, int32_t radius)
{
	var_sg_Graphics_DrawOrFillCircleOnto(dest,clr,filled != 0,xc,yc,radius);
}
void (*var_sg_Graphics_DrawOrFillCircleStruct)(color clr, bool filled, const circle *c);
void sg_Graphics_DrawOrFillCircleStruct(color clr, bool filled, const circle *c)
{
	var_sg_Graphics_DrawOrFillCircleStruct(clr,filled != 0,c);
}
void (*var_sg_Graphics_DrawOrFillCircleStructOnScreen)(color clr, bool filled, const circle *c);
void sg_Graphics_DrawOrFillCircleStructOnScreen(color clr, bool filled, const circle *c)
{
	var_sg_Graphics_DrawOrFillCircleStructOnScreen(clr,filled != 0,c);
}
void (*var_sg_Graphics_DrawOrFillCircleStructOnto)(bitmap dest, color clr, bool filled, const circle *c);
void sg_Graphics_DrawOrFillCircleStructOnto(bitmap dest, color clr, bool filled, const circle *c)
{
	var_sg_Graphics_DrawOrFillCircleStructOnto(dest,clr,filled != 0,c);
}
void (*var_sg_Graphics_DrawOrFillEllipse)(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillEllipse(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height)
{
	var_sg_Graphics_DrawOrFillEllipse(clr,filled != 0,xPos,yPos,width,height);
}
void (*var_sg_Graphics_DrawOrFillEllipseInRect)(color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillEllipseInRect(color clr, bool filled, const rectangle *source)
{
	var_sg_Graphics_DrawOrFillEllipseInRect(clr,filled != 0,source);
}
void (*var_sg_Graphics_DrawOrFillEllipseInRectOnScreen)(color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillEllipseInRectOnScreen(color clr, bool filled, const rectangle *source)
{
	var_sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr,filled != 0,source);
}
void (*var_sg_Graphics_DrawOrFillEllipseInRectOnto)(bitmap dest, color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillEllipseInRectOnto(bitmap dest, color clr, bool filled, const rectangle *source)
{
	var_sg_Graphics_DrawOrFillEllipseInRectOnto(dest,clr,filled != 0,source);
}
void (*var_sg_Graphics_DrawOrFillEllipseOnScreen)(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillEllipseOnScreen(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
	var_sg_Graphics_DrawOrFillEllipseOnScreen(clr,filled != 0,xPos,yPos,width,height);
}
void (*var_sg_Graphics_DrawOrFillEllipseOnto)(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillEllipseOnto(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
	var_sg_Graphics_DrawOrFillEllipseOnto(dest,clr,filled != 0,xPos,yPos,width,height);
}
void (*var_sg_Graphics_DrawOrFillRectangle)(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillRectangle(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height)
{
	var_sg_Graphics_DrawOrFillRectangle(clr,filled != 0,xPos,yPos,width,height);
}
void (*var_sg_Graphics_DrawOrFillRectangleOnScreen)(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillRectangleOnScreen(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
	var_sg_Graphics_DrawOrFillRectangleOnScreen(clr,filled != 0,xPos,yPos,width,height);
}
void (*var_sg_Graphics_DrawOrFillRectangleOnto)(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillRectangleOnto(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)
{
	var_sg_Graphics_DrawOrFillRectangleOnto(dest,clr,filled != 0,xPos,yPos,width,height);
}
void (*var_sg_Graphics_DrawOrFillRectangleStruct)(color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillRectangleStruct(color clr, bool filled, const rectangle *source)
{
	var_sg_Graphics_DrawOrFillRectangleStruct(clr,filled != 0,source);
}
void (*var_sg_Graphics_DrawOrFillRectangleStructOnScreen)(color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillRectangleStructOnScreen(color clr, bool filled, const rectangle *source)
{
	var_sg_Graphics_DrawOrFillRectangleStructOnScreen(clr,filled != 0,source);
}
void (*var_sg_Graphics_DrawOrFillRectangleStructOnto)(bitmap dest, color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillRectangleStructOnto(bitmap dest, color clr, bool filled, const rectangle *source)
{
	var_sg_Graphics_DrawOrFillRectangleStructOnto(dest,clr,filled != 0,source);
}
void (*var_sg_Graphics_DrawOrFillTriangleStruct)(color clr, bool filled, const triangle  *tri);
void sg_Graphics_DrawOrFillTriangleStruct(color clr, bool filled, const triangle  *tri)
{
	var_sg_Graphics_DrawOrFillTriangleStruct(clr,filled != 0,tri);
}
void (*var_sg_Graphics_DrawOrFillTriangleStructOnScreen)(color clr, bool filled, const triangle  *tri);
void sg_Graphics_DrawOrFillTriangleStructOnScreen(color clr, bool filled, const triangle  *tri)
{
	var_sg_Graphics_DrawOrFillTriangleStructOnScreen(clr,filled != 0,tri);
}
void (*var_sg_Graphics_DrawOrFillTriangleStructOnto)(bitmap dest, color clr, bool filled, const triangle  *tri);
void sg_Graphics_DrawOrFillTriangleStructOnto(bitmap dest, color clr, bool filled, const triangle  *tri)
{
	var_sg_Graphics_DrawOrFillTriangleStructOnto(dest,clr,filled != 0,tri);
}
void (*var_sg_Graphics_DrawPixel)(color clr, float x, float y);
void sg_Graphics_DrawPixel(color clr, float x, float y)
{
	var_sg_Graphics_DrawPixel(clr,x,y);
}
void (*var_sg_Graphics_DrawPixelAtPoint)(color clr, const point2d *position);
void sg_Graphics_DrawPixelAtPoint(color clr, const point2d *position)
{
	var_sg_Graphics_DrawPixelAtPoint(clr,position);
}
void (*var_sg_Graphics_DrawPixelAtPointOnScreen)(color clr, const point2d *position);
void sg_Graphics_DrawPixelAtPointOnScreen(color clr, const point2d *position)
{
	var_sg_Graphics_DrawPixelAtPointOnScreen(clr,position);
}
void (*var_sg_Graphics_DrawPixelAtPointOnto)(bitmap dest, color clr, const point2d *position);
void sg_Graphics_DrawPixelAtPointOnto(bitmap dest, color clr, const point2d *position)
{
	var_sg_Graphics_DrawPixelAtPointOnto(dest,clr,position);
}
void (*var_sg_Graphics_DrawPixelOnScreen)(color clr, int32_t x, int32_t y);
void sg_Graphics_DrawPixelOnScreen(color clr, int32_t x, int32_t y)
{
	var_sg_Graphics_DrawPixelOnScreen(clr,x,y);
}
void (*var_sg_Graphics_DrawPixelOnto)(bitmap dest, color clr, int32_t x, int32_t y);
void sg_Graphics_DrawPixelOnto(bitmap dest, color clr, int32_t x, int32_t y)
{
	var_sg_Graphics_DrawPixelOnto(dest,clr,x,y);
}
void (*var_sg_Graphics_DrawTriangle)(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawTriangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
	var_sg_Graphics_DrawTriangle(clr,x1,y1,x2,y2,x3,y3);
}
void (*var_sg_Graphics_DrawTriangleOnScreen)(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawTriangleOnScreen(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
	var_sg_Graphics_DrawTriangleOnScreen(clr,x1,y1,x2,y2,x3,y3);
}
void (*var_sg_Graphics_DrawTriangleOnto)(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawTriangleOnto(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
	var_sg_Graphics_DrawTriangleOnto(dest,clr,x1,y1,x2,y2,x3,y3);
}
void (*var_sg_Graphics_DrawVerticalLine)(color clr, float x, float y1, float y2);
void sg_Graphics_DrawVerticalLine(color clr, float x, float y1, float y2)
{
	var_sg_Graphics_DrawVerticalLine(clr,x,y1,y2);
}
void (*var_sg_Graphics_DrawVerticalLineOnScreen)(color clr, int32_t x, int32_t y1, int32_t y2);
void sg_Graphics_DrawVerticalLineOnScreen(color clr, int32_t x, int32_t y1, int32_t y2)
{
	var_sg_Graphics_DrawVerticalLineOnScreen(clr,x,y1,y2);
}
void (*var_sg_Graphics_DrawVerticalLineOnto)(bitmap dest, color clr, int32_t x, int32_t y1, int32_t y2);
void sg_Graphics_DrawVerticalLineOnto(bitmap dest, color clr, int32_t x, int32_t y1, int32_t y2)
{
	var_sg_Graphics_DrawVerticalLineOnto(dest,clr,x,y1,y2);
}
void (*var_sg_Graphics_FillTriangle)(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_FillTriangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
	var_sg_Graphics_FillTriangle(clr,x1,y1,x2,y2,x3,y3);
}
void (*var_sg_Graphics_FillTriangleOnScreen)(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_FillTriangleOnScreen(color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
	var_sg_Graphics_FillTriangleOnScreen(clr,x1,y1,x2,y2,x3,y3);
}
void (*var_sg_Graphics_FillTriangleOnto)(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_FillTriangleOnto(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3)
{
	var_sg_Graphics_FillTriangleOnto(dest,clr,x1,y1,x2,y2,x3,y3);
}
color (*var_sg_Graphics_GetPixel)(bitmap bmp, int32_t x, int32_t y);
color sg_Graphics_GetPixel(bitmap bmp, int32_t x, int32_t y)
{
	return var_sg_Graphics_GetPixel(bmp,x,y);
}
color (*var_sg_Graphics_GetPixelFromScreen)(int32_t x, int32_t y);
color sg_Graphics_GetPixelFromScreen(int32_t x, int32_t y)
{
	return var_sg_Graphics_GetPixelFromScreen(x,y);
}
unsigned char (*var_sg_Graphics_GreenOf)(color c);
unsigned char sg_Graphics_GreenOf(color c)
{
	return var_sg_Graphics_GreenOf(c);
}
color (*var_sg_Graphics_HSBColor)(float hue, float saturation, float brightness);
color sg_Graphics_HSBColor(float hue, float saturation, float brightness)
{
	return var_sg_Graphics_HSBColor(hue,saturation,brightness);
}
void (*var_sg_Graphics_HSBValuesOf)(color c, float *h, float *s, float *b);
void sg_Graphics_HSBValuesOf(color c, float *h, float *s, float *b)
{
	var_sg_Graphics_HSBValuesOf(c,h,s,b);
}
float (*var_sg_Graphics_HueOf)(color c);
float sg_Graphics_HueOf(color c)
{
	return var_sg_Graphics_HueOf(c);
}
void (*var_sg_Graphics_OpenGraphicsWindow)(const char *caption, int32_t width, int32_t height);
void sg_Graphics_OpenGraphicsWindow(const char *caption, int32_t width, int32_t height)
{
	var_sg_Graphics_OpenGraphicsWindow(caption,width,height);
}
void (*var_sg_Graphics_PopClipBmp)(bitmap bmp);
void sg_Graphics_PopClipBmp(bitmap bmp)
{
	var_sg_Graphics_PopClipBmp(bmp);
}
void (*var_sg_Graphics_PopClipScreen)();
void sg_Graphics_PopClipScreen()
{
	var_sg_Graphics_PopClipScreen();
}
void (*var_sg_Graphics_PushClipRect)(const rectangle *r);
void sg_Graphics_PushClipRect(const rectangle *r)
{
	var_sg_Graphics_PushClipRect(r);
}
void (*var_sg_Graphics_PushClipRectForBitmap)(bitmap bmp, const rectangle *r);
void sg_Graphics_PushClipRectForBitmap(bitmap bmp, const rectangle *r)
{
	var_sg_Graphics_PushClipRectForBitmap(bmp,r);
}
void (*var_sg_Graphics_PushClipXY)(int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Graphics_PushClipXY(int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Graphics_PushClipXY(x,y,w,h);
}
void (*var_sg_Graphics_PutPixel)(bitmap bmp, color value, int32_t x, int32_t y);
void sg_Graphics_PutPixel(bitmap bmp, color value, int32_t x, int32_t y)
{
	var_sg_Graphics_PutPixel(bmp,value,x,y);
}
color (*var_sg_Graphics_RGBAColor)(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha);
color sg_Graphics_RGBAColor(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)
{
	return var_sg_Graphics_RGBAColor(red,green,blue,alpha);
}
color (*var_sg_Graphics_RGBAFloatColor)(float r, float g, float b, float a);
color sg_Graphics_RGBAFloatColor(float r, float g, float b, float a)
{
	return var_sg_Graphics_RGBAFloatColor(r,g,b,a);
}
color (*var_sg_Graphics_RGBFloatColor)(float r, float g, float b);
color sg_Graphics_RGBFloatColor(float r, float g, float b)
{
	return var_sg_Graphics_RGBFloatColor(r,g,b);
}
color (*var_sg_Graphics_RandomColor)();
color sg_Graphics_RandomColor()
{
	return var_sg_Graphics_RandomColor();
}
color (*var_sg_Graphics_RandomRGBColor)(unsigned char alpha);
color sg_Graphics_RandomRGBColor(unsigned char alpha)
{
	return var_sg_Graphics_RandomRGBColor(alpha);
}
unsigned char (*var_sg_Graphics_RedOf)(color c);
unsigned char sg_Graphics_RedOf(color c)
{
	return var_sg_Graphics_RedOf(c);
}
void (*var_sg_Graphics_RefreshScreen)();
void sg_Graphics_RefreshScreen()
{
	var_sg_Graphics_RefreshScreen();
}
void (*var_sg_Graphics_RefreshScreenRestrictFPS)(uint32_t TargetFPS);
void sg_Graphics_RefreshScreenRestrictFPS(uint32_t TargetFPS)
{
	var_sg_Graphics_RefreshScreenRestrictFPS(TargetFPS);
}
void (*var_sg_Graphics_ResetClip)();
void sg_Graphics_ResetClip()
{
	var_sg_Graphics_ResetClip();
}
void (*var_sg_Graphics_ResetClipForBitmap)(bitmap bmp);
void sg_Graphics_ResetClipForBitmap(bitmap bmp)
{
	var_sg_Graphics_ResetClipForBitmap(bmp);
}
float (*var_sg_Graphics_SaturationOf)(color c);
float sg_Graphics_SaturationOf(color c)
{
	return var_sg_Graphics_SaturationOf(c);
}
int32_t (*var_sg_Graphics_ScreenHeight)();
int32_t sg_Graphics_ScreenHeight()
{
	return var_sg_Graphics_ScreenHeight();
}
int32_t (*var_sg_Graphics_ScreenWidth)();
int32_t sg_Graphics_ScreenWidth()
{
	return var_sg_Graphics_ScreenWidth();
}
void (*var_sg_Graphics_SetBmpClip)(bitmap bmp, const rectangle *r);
void sg_Graphics_SetBmpClip(bitmap bmp, const rectangle *r)
{
	var_sg_Graphics_SetBmpClip(bmp,r);
}
void (*var_sg_Graphics_SetBmpClipXY)(bitmap bmp, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Graphics_SetBmpClipXY(bitmap bmp, int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Graphics_SetBmpClipXY(bmp,x,y,w,h);
}
void (*var_sg_Graphics_SetClip)(const rectangle *r);
void sg_Graphics_SetClip(const rectangle *r)
{
	var_sg_Graphics_SetClip(r);
}
void (*var_sg_Graphics_SetClipXY)(int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Graphics_SetClipXY(int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Graphics_SetClipXY(x,y,w,h);
}
void (*var_sg_Graphics_SetIcon)(const char *filename);
void sg_Graphics_SetIcon(const char *filename)
{
	var_sg_Graphics_SetIcon(filename);
}
void (*var_sg_Graphics_ShowSwinGameSplashScreen)();
void sg_Graphics_ShowSwinGameSplashScreen()
{
	var_sg_Graphics_ShowSwinGameSplashScreen();
}
void (*var_sg_Graphics_TakeScreenshot)(const char *basename);
void sg_Graphics_TakeScreenshot(const char *basename)
{
	var_sg_Graphics_TakeScreenshot(basename);
}
void (*var_sg_Graphics_ToggleFullScreen)();
void sg_Graphics_ToggleFullScreen()
{
	var_sg_Graphics_ToggleFullScreen();
}
void (*var_sg_Graphics_ToggleWindowBorder)();
void sg_Graphics_ToggleWindowBorder()
{
	var_sg_Graphics_ToggleWindowBorder();
}
unsigned char (*var_sg_Graphics_TransparencyOf)(color c);
unsigned char sg_Graphics_TransparencyOf(color c)
{
	return var_sg_Graphics_TransparencyOf(c);
}
circle (*var_sg_Images_BitmapCellCircle)(bitmap bmp, const point2d *pt);
circle sg_Images_BitmapCellCircle(bitmap bmp, const point2d *pt)
{
	return var_sg_Images_BitmapCellCircle(bmp,pt);
}
circle (*var_sg_Images_BitmapCellCircleXY)(bitmap bmp, int32_t x, int32_t y);
circle sg_Images_BitmapCellCircleXY(bitmap bmp, int32_t x, int32_t y)
{
	return var_sg_Images_BitmapCellCircleXY(bmp,x,y);
}
int32_t (*var_sg_Images_BitmapCellColumns)(bitmap bmp);
int32_t sg_Images_BitmapCellColumns(bitmap bmp)
{
	return var_sg_Images_BitmapCellColumns(bmp);
}
int32_t (*var_sg_Images_BitmapCellCount)(bitmap bmp);
int32_t sg_Images_BitmapCellCount(bitmap bmp)
{
	return var_sg_Images_BitmapCellCount(bmp);
}
int32_t (*var_sg_Images_BitmapCellHeight)(bitmap bmp);
int32_t sg_Images_BitmapCellHeight(bitmap bmp)
{
	return var_sg_Images_BitmapCellHeight(bmp);
}
bitmap_cell (*var_sg_Images_BitmapCellOf)(bitmap bmp, int32_t cell);
bitmap_cell sg_Images_BitmapCellOf(bitmap bmp, int32_t cell)
{
	return var_sg_Images_BitmapCellOf(bmp,cell);
}
rectangle (*var_sg_Images_BitmapCellRectangle)(const point2d *pt, bitmap bmp);
rectangle sg_Images_BitmapCellRectangle(const point2d *pt, bitmap bmp)
{
	return var_sg_Images_BitmapCellRectangle(pt,bmp);
}
rectangle (*var_sg_Images_BitmapCellRectangleAtOrigin)(bitmap bmp);
rectangle sg_Images_BitmapCellRectangleAtOrigin(bitmap bmp)
{
	return var_sg_Images_BitmapCellRectangleAtOrigin(bmp);
}
rectangle (*var_sg_Images_BitmapCellRectangleXY)(float x, float y, bitmap bmp);
rectangle sg_Images_BitmapCellRectangleXY(float x, float y, bitmap bmp)
{
	return var_sg_Images_BitmapCellRectangleXY(x,y,bmp);
}
int32_t (*var_sg_Images_BitmapCellRows)(bitmap bmp);
int32_t sg_Images_BitmapCellRows(bitmap bmp)
{
	return var_sg_Images_BitmapCellRows(bmp);
}
int32_t (*var_sg_Images_BitmapCellWidth)(bitmap bmp);
int32_t sg_Images_BitmapCellWidth(bitmap bmp)
{
	return var_sg_Images_BitmapCellWidth(bmp);
}
circle (*var_sg_Images_BitmapCircle)(bitmap bmp, const point2d *pt);
circle sg_Images_BitmapCircle(bitmap bmp, const point2d *pt)
{
	return var_sg_Images_BitmapCircle(bmp,pt);
}
circle (*var_sg_Images_BitmapCircleXY)(bitmap bmp, int32_t x, int32_t y);
circle sg_Images_BitmapCircleXY(bitmap bmp, int32_t x, int32_t y)
{
	return var_sg_Images_BitmapCircleXY(bmp,x,y);
}
void (*var_sg_Images_BitmapFilename)(bitmap bmp, char *result);
void sg_Images_BitmapFilename(bitmap bmp, char *result)
{
	var_sg_Images_BitmapFilename(bmp,result);
}
int32_t (*var_sg_Images_BitmapHeight)(bitmap bmp);
int32_t sg_Images_BitmapHeight(bitmap bmp)
{
	return var_sg_Images_BitmapHeight(bmp);
}
int32_t (*var_sg_Images_BitmapHeightForCell)(const bitmap_cell *bmp);
int32_t sg_Images_BitmapHeightForCell(const bitmap_cell *bmp)
{
	return var_sg_Images_BitmapHeightForCell(bmp);
}
void (*var_sg_Images_BitmapName)(bitmap bmp, char *result);
void sg_Images_BitmapName(bitmap bmp, char *result)
{
	var_sg_Images_BitmapName(bmp,result);
}
bitmap (*var_sg_Images_BitmapNamed)(const char *name);
bitmap sg_Images_BitmapNamed(const char *name)
{
	return var_sg_Images_BitmapNamed(name);
}
rectangle (*var_sg_Images_BitmapRectAtOrigin)(bitmap bmp);
rectangle sg_Images_BitmapRectAtOrigin(bitmap bmp)
{
	return var_sg_Images_BitmapRectAtOrigin(bmp);
}
rectangle (*var_sg_Images_BitmapRectXY)(float x, float y, bitmap bmp);
rectangle sg_Images_BitmapRectXY(float x, float y, bitmap bmp)
{
	return var_sg_Images_BitmapRectXY(x,y,bmp);
}
rectangle (*var_sg_Images_BitmapRectangleOfCell)(bitmap src, int32_t cell);
rectangle sg_Images_BitmapRectangleOfCell(bitmap src, int32_t cell)
{
	return var_sg_Images_BitmapRectangleOfCell(src,cell);
}
void (*var_sg_Images_BitmapSetCellDetails)(bitmap bmp, int32_t width, int32_t height, int32_t columns, int32_t rows, int32_t count);
void sg_Images_BitmapSetCellDetails(bitmap bmp, int32_t width, int32_t height, int32_t columns, int32_t rows, int32_t count)
{
	var_sg_Images_BitmapSetCellDetails(bmp,width,height,columns,rows,count);
}
int32_t (*var_sg_Images_BitmapWidth)(bitmap bmp);
int32_t sg_Images_BitmapWidth(bitmap bmp)
{
	return var_sg_Images_BitmapWidth(bmp);
}
int32_t (*var_sg_Images_BitmapWidthForCell)(const bitmap_cell *bmp);
int32_t sg_Images_BitmapWidthForCell(const bitmap_cell *bmp)
{
	return var_sg_Images_BitmapWidthForCell(bmp);
}
bool (*var_sg_Images_BitmapsInterchangable)(bitmap bmp1, bitmap bmp2);
bool sg_Images_BitmapsInterchangable(bitmap bmp1, bitmap bmp2)
{
	return var_sg_Images_BitmapsInterchangable(bmp1,bmp2);
}
void (*var_sg_Images_ClearSurface)(bitmap dest, color toColor);
void sg_Images_ClearSurface(bitmap dest, color toColor)
{
	var_sg_Images_ClearSurface(dest,toColor);
}
void (*var_sg_Images_ClearSurfaceToBlack)(bitmap dest);
void sg_Images_ClearSurfaceToBlack(bitmap dest)
{
	var_sg_Images_ClearSurfaceToBlack(dest);
}
bitmap (*var_sg_Images_CombineIntoGrid)(const bitmap *bitmaps, int32_t cols, int32_t bitmaps_len);
bitmap sg_Images_CombineIntoGrid(const bitmap *bitmaps, int32_t cols, int32_t bitmaps_len)
{
	return var_sg_Images_CombineIntoGrid(bitmaps,cols,bitmaps_len);
}
bitmap (*var_sg_Images_CreateBitmap)(int32_t width, int32_t height);
bitmap sg_Images_CreateBitmap(int32_t width, int32_t height)
{
	return var_sg_Images_CreateBitmap(width,height);
}
bitmap (*var_sg_Images_CreateBitmapNamed)(const char *name, int32_t width, int32_t height);
bitmap sg_Images_CreateBitmapNamed(const char *name, int32_t width, int32_t height)
{
	return var_sg_Images_CreateBitmapNamed(name,width,height);
}
void (*var_sg_Images_DrawBitmap)(bitmap src, float x, float y);
void sg_Images_DrawBitmap(bitmap src, float x, float y)
{
	var_sg_Images_DrawBitmap(src,x,y);
}
void (*var_sg_Images_DrawBitmapAtPoint)(bitmap src, const point2d *position);
void sg_Images_DrawBitmapAtPoint(bitmap src, const point2d *position)
{
	var_sg_Images_DrawBitmapAtPoint(src,position);
}
void (*var_sg_Images_DrawBitmapAtPointOnScreen)(bitmap src, const point2d *position);
void sg_Images_DrawBitmapAtPointOnScreen(bitmap src, const point2d *position)
{
	var_sg_Images_DrawBitmapAtPointOnScreen(src,position);
}
void (*var_sg_Images_DrawBitmapAtPointOnto)(bitmap dest, bitmap src, const point2d *position);
void sg_Images_DrawBitmapAtPointOnto(bitmap dest, bitmap src, const point2d *position)
{
	var_sg_Images_DrawBitmapAtPointOnto(dest,src,position);
}
void (*var_sg_Images_DrawBitmapCell)(const bitmap_cell *src, float x, float y);
void sg_Images_DrawBitmapCell(const bitmap_cell *src, float x, float y)
{
	var_sg_Images_DrawBitmapCell(src,x,y);
}
void (*var_sg_Images_DrawBitmapCellAtPoint)(const bitmap_cell *src, const point2d *position);
void sg_Images_DrawBitmapCellAtPoint(const bitmap_cell *src, const point2d *position)
{
	var_sg_Images_DrawBitmapCellAtPoint(src,position);
}
void (*var_sg_Images_DrawBitmapCellAtPointOnScreen)(const bitmap_cell *src, const point2d *position);
void sg_Images_DrawBitmapCellAtPointOnScreen(const bitmap_cell *src, const point2d *position)
{
	var_sg_Images_DrawBitmapCellAtPointOnScreen(src,position);
}
void (*var_sg_Images_DrawBitmapCellAtPointOnto)(bitmap dest, const bitmap_cell *src, const point2d *position);
void sg_Images_DrawBitmapCellAtPointOnto(bitmap dest, const bitmap_cell *src, const point2d *position)
{
	var_sg_Images_DrawBitmapCellAtPointOnto(dest,src,position);
}
void (*var_sg_Images_DrawBitmapCellOnScreen)(const bitmap_cell *src, int32_t x, int32_t y);
void sg_Images_DrawBitmapCellOnScreen(const bitmap_cell *src, int32_t x, int32_t y)
{
	var_sg_Images_DrawBitmapCellOnScreen(src,x,y);
}
void (*var_sg_Images_DrawBitmapCellOnto)(bitmap dest, const bitmap_cell *src, int32_t x, int32_t y);
void sg_Images_DrawBitmapCellOnto(bitmap dest, const bitmap_cell *src, int32_t x, int32_t y)
{
	var_sg_Images_DrawBitmapCellOnto(dest,src,x,y);
}
void (*var_sg_Images_DrawBitmapNamed)(const char *name, float x, float y);
void sg_Images_DrawBitmapNamed(const char *name, float x, float y)
{
	var_sg_Images_DrawBitmapNamed(name,x,y);
}
void (*var_sg_Images_DrawBitmapNamedAtPoint)(const char *name, const point2d *position);
void sg_Images_DrawBitmapNamedAtPoint(const char *name, const point2d *position)
{
	var_sg_Images_DrawBitmapNamedAtPoint(name,position);
}
void (*var_sg_Images_DrawBitmapOnScreen)(bitmap src, int32_t x, int32_t y);
void sg_Images_DrawBitmapOnScreen(bitmap src, int32_t x, int32_t y)
{
	var_sg_Images_DrawBitmapOnScreen(src,x,y);
}
void (*var_sg_Images_DrawBitmapOnto)(bitmap dest, bitmap src, int32_t x, int32_t y);
void sg_Images_DrawBitmapOnto(bitmap dest, bitmap src, int32_t x, int32_t y)
{
	var_sg_Images_DrawBitmapOnto(dest,src,x,y);
}
void (*var_sg_Images_DrawBitmapPart)(bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, float x, float y);
void sg_Images_DrawBitmapPart(bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, float x, float y)
{
	var_sg_Images_DrawBitmapPart(src,srcX,srcY,srcW,srcH,x,y);
}
void (*var_sg_Images_DrawBitmapPartFromRect)(bitmap src, const rectangle *source, float x, float y);
void sg_Images_DrawBitmapPartFromRect(bitmap src, const rectangle *source, float x, float y)
{
	var_sg_Images_DrawBitmapPartFromRect(src,source,x,y);
}
void (*var_sg_Images_DrawBitmapPartFromRectAtPoint)(bitmap src, const rectangle *source, const point2d *position);
void sg_Images_DrawBitmapPartFromRectAtPoint(bitmap src, const rectangle *source, const point2d *position)
{
	var_sg_Images_DrawBitmapPartFromRectAtPoint(src,source,position);
}
void (*var_sg_Images_DrawBitmapPartFromRectAtPointOnScreen)(bitmap src, const rectangle *source, const point2d *position);
void sg_Images_DrawBitmapPartFromRectAtPointOnScreen(bitmap src, const rectangle *source, const point2d *position)
{
	var_sg_Images_DrawBitmapPartFromRectAtPointOnScreen(src,source,position);
}
void (*var_sg_Images_DrawBitmapPartFromRectAtPointOnto)(bitmap dest, bitmap src, const rectangle *source, const point2d *position);
void sg_Images_DrawBitmapPartFromRectAtPointOnto(bitmap dest, bitmap src, const rectangle *source, const point2d *position)
{
	var_sg_Images_DrawBitmapPartFromRectAtPointOnto(dest,src,source,position);
}
void (*var_sg_Images_DrawBitmapPartFromRectOnScreen)(bitmap src, const rectangle *source, int32_t x, int32_t y);
void sg_Images_DrawBitmapPartFromRectOnScreen(bitmap src, const rectangle *source, int32_t x, int32_t y)
{
	var_sg_Images_DrawBitmapPartFromRectOnScreen(src,source,x,y);
}
void (*var_sg_Images_DrawBitmapPartFromRectOnto)(bitmap dest, bitmap src, const rectangle *source, int32_t x, int32_t y);
void sg_Images_DrawBitmapPartFromRectOnto(bitmap dest, bitmap src, const rectangle *source, int32_t x, int32_t y)
{
	var_sg_Images_DrawBitmapPartFromRectOnto(dest,src,source,x,y);
}
void (*var_sg_Images_DrawBitmapPartOnScreen)(bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, int32_t x, int32_t y);
void sg_Images_DrawBitmapPartOnScreen(bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, int32_t x, int32_t y)
{
	var_sg_Images_DrawBitmapPartOnScreen(src,srcX,srcY,srcW,srcH,x,y);
}
void (*var_sg_Images_DrawBitmapPartOnto)(bitmap dest, bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, int32_t x, int32_t y);
void sg_Images_DrawBitmapPartOnto(bitmap dest, bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, int32_t x, int32_t y)
{
	var_sg_Images_DrawBitmapPartOnto(dest,src,srcX,srcY,srcW,srcH,x,y);
}
void (*var_sg_Images_DrawCell)(bitmap src, int32_t cell, const point2d *position);
void sg_Images_DrawCell(bitmap src, int32_t cell, const point2d *position)
{
	var_sg_Images_DrawCell(src,cell,position);
}
void (*var_sg_Images_DrawCellOnScreen)(bitmap src, int32_t cell, const point2d *position);
void sg_Images_DrawCellOnScreen(bitmap src, int32_t cell, const point2d *position)
{
	var_sg_Images_DrawCellOnScreen(src,cell,position);
}
void (*var_sg_Images_DrawCellOnScreenXY)(bitmap src, int32_t cell, float x, float y);
void sg_Images_DrawCellOnScreenXY(bitmap src, int32_t cell, float x, float y)
{
	var_sg_Images_DrawCellOnScreenXY(src,cell,x,y);
}
void (*var_sg_Images_DrawCellOnto)(bitmap dest, bitmap src, int32_t cell, const point2d *position);
void sg_Images_DrawCellOnto(bitmap dest, bitmap src, int32_t cell, const point2d *position)
{
	var_sg_Images_DrawCellOnto(dest,src,cell,position);
}
void (*var_sg_Images_DrawCellOntoXY)(bitmap dest, bitmap src, int32_t cell, float x, float y);
void sg_Images_DrawCellOntoXY(bitmap dest, bitmap src, int32_t cell, float x, float y)
{
	var_sg_Images_DrawCellOntoXY(dest,src,cell,x,y);
}
void (*var_sg_Images_DrawCellXY)(bitmap src, int32_t cell, float x, float y);
void sg_Images_DrawCellXY(bitmap src, int32_t cell, float x, float y)
{
	var_sg_Images_DrawCellXY(src,cell,x,y);
}
void (*var_sg_Images_FreeBitmap)(bitmap *bitmapToFree);
void sg_Images_FreeBitmap(bitmap *bitmapToFree)
{
	var_sg_Images_FreeBitmap(bitmapToFree);
}
bool (*var_sg_Images_HasBitmap)(const char *name);
bool sg_Images_HasBitmap(const char *name)
{
	return var_sg_Images_HasBitmap(name);
}
bitmap (*var_sg_Images_LoadBitmap)(const char *filename);
bitmap sg_Images_LoadBitmap(const char *filename)
{
	return var_sg_Images_LoadBitmap(filename);
}
bitmap (*var_sg_Images_LoadBitmapNamed)(const char *name, const char *filename);
bitmap sg_Images_LoadBitmapNamed(const char *name, const char *filename)
{
	return var_sg_Images_LoadBitmapNamed(name,filename);
}
bitmap (*var_sg_Images_LoadBitmapWithTransparentColor)(const char *filename, bool transparent, color transparentColor);
bitmap sg_Images_LoadBitmapWithTransparentColor(const char *filename, bool transparent, color transparentColor)
{
	return var_sg_Images_LoadBitmapWithTransparentColor(filename,transparent != 0,transparentColor);
}
bitmap (*var_sg_Images_LoadTransparentBitmapNamed)(const char *name, const char *filename, color transparentColor);
bitmap sg_Images_LoadTransparentBitmapNamed(const char *name, const char *filename, color transparentColor)
{
	return var_sg_Images_LoadTransparentBitmapNamed(name,filename,transparentColor);
}
void (*var_sg_Images_MakeOpaque)(bitmap bmp);
void sg_Images_MakeOpaque(bitmap bmp)
{
	var_sg_Images_MakeOpaque(bmp);
}
void (*var_sg_Images_MakeTransparent)(bitmap bmp);
void sg_Images_MakeTransparent(bitmap bmp)
{
	var_sg_Images_MakeTransparent(bmp);
}
void (*var_sg_Images_OptimiseBitmap)(bitmap surface);
void sg_Images_OptimiseBitmap(bitmap surface)
{
	var_sg_Images_OptimiseBitmap(surface);
}
bool (*var_sg_Images_PixelDrawnAtPoint)(bitmap bmp, int32_t x, int32_t y);
bool sg_Images_PixelDrawnAtPoint(bitmap bmp, int32_t x, int32_t y)
{
	return var_sg_Images_PixelDrawnAtPoint(bmp,x,y);
}
void (*var_sg_Images_ReleaseAllBitmaps)();
void sg_Images_ReleaseAllBitmaps()
{
	var_sg_Images_ReleaseAllBitmaps();
}
void (*var_sg_Images_ReleaseBitmap)(const char *name);
void sg_Images_ReleaseBitmap(const char *name)
{
	var_sg_Images_ReleaseBitmap(name);
}
bitmap (*var_sg_Images_RotateScaleBitmap)(bitmap src, float degRot, float scale);
bitmap sg_Images_RotateScaleBitmap(bitmap src, float degRot, float scale)
{
	return var_sg_Images_RotateScaleBitmap(src,degRot,scale);
}
bool (*var_sg_Images_SameBitmapCell)(const bitmap_cell *bmp1, const bitmap_cell *bmp2);
bool sg_Images_SameBitmapCell(const bitmap_cell *bmp1, const bitmap_cell *bmp2)
{
	return var_sg_Images_SameBitmapCell(bmp1,bmp2);
}
void (*var_sg_Images_SaveBitmap)(bitmap src, const char *filepath);
void sg_Images_SaveBitmap(bitmap src, const char *filepath)
{
	var_sg_Images_SaveBitmap(src,filepath);
}
void (*var_sg_Images_SaveToPNG)(bitmap bmp, const char *filename);
void sg_Images_SaveToPNG(bitmap bmp, const char *filename)
{
	var_sg_Images_SaveToPNG(bmp,filename);
}
void (*var_sg_Images_SetOpacity)(bitmap bmp, float pct);
void sg_Images_SetOpacity(bitmap bmp, float pct)
{
	var_sg_Images_SetOpacity(bmp,pct);
}
void (*var_sg_Images_SetTransparentColor)(bitmap src, color clr);
void sg_Images_SetTransparentColor(bitmap src, color clr)
{
	var_sg_Images_SetTransparentColor(src,clr);
}
void (*var_sg_Images_SetupBitmapForCollisions)(bitmap src);
void sg_Images_SetupBitmapForCollisions(bitmap src)
{
	var_sg_Images_SetupBitmapForCollisions(src);
}
bool (*var_sg_Input_AnyKeyPressed)();
bool sg_Input_AnyKeyPressed()
{
	return var_sg_Input_AnyKeyPressed();
}
float (*var_sg_Input_DeviceMovedInXAxis)();
float sg_Input_DeviceMovedInXAxis()
{
	return var_sg_Input_DeviceMovedInXAxis();
}
float (*var_sg_Input_DeviceMovedInYAxis)();
float sg_Input_DeviceMovedInYAxis()
{
	return var_sg_Input_DeviceMovedInYAxis();
}
float (*var_sg_Input_DeviceMovedInZAxis)();
float sg_Input_DeviceMovedInZAxis()
{
	return var_sg_Input_DeviceMovedInZAxis();
}
void (*var_sg_Input_EndReadingText)(char *result);
void sg_Input_EndReadingText(char *result)
{
	var_sg_Input_EndReadingText(result);
}
void (*var_sg_Input_FingersOnScreen)(finger_array result, int32_t result_len);
void sg_Input_FingersOnScreen(finger_array result, int32_t result_len)
{
	var_sg_Input_FingersOnScreen(result,result_len);
}
float (*var_sg_Input_GetAccelerometerThreshold)();
float sg_Input_GetAccelerometerThreshold()
{
	return var_sg_Input_GetAccelerometerThreshold();
}
void (*var_sg_Input_HideKeyboard)();
void sg_Input_HideKeyboard()
{
	var_sg_Input_HideKeyboard();
}
void (*var_sg_Input_HideMouse)();
void sg_Input_HideMouse()
{
	var_sg_Input_HideMouse();
}
bool (*var_sg_Input_KeyDown)(key_code key);
bool sg_Input_KeyDown(key_code key)
{
	return var_sg_Input_KeyDown(key);
}
void (*var_sg_Input_KeyName)(key_code key, char *result);
void sg_Input_KeyName(key_code key, char *result)
{
	var_sg_Input_KeyName(key,result);
}
bool (*var_sg_Input_KeyReleased)(key_code key);
bool sg_Input_KeyReleased(key_code key)
{
	return var_sg_Input_KeyReleased(key);
}
bool (*var_sg_Input_KeyTyped)(key_code key);
bool sg_Input_KeyTyped(key_code key)
{
	return var_sg_Input_KeyTyped(key);
}
bool (*var_sg_Input_KeyUp)(key_code key);
bool sg_Input_KeyUp(key_code key)
{
	return var_sg_Input_KeyUp(key);
}
bool (*var_sg_Input_KeyboardShown)();
bool sg_Input_KeyboardShown()
{
	return var_sg_Input_KeyboardShown();
}
bool (*var_sg_Input_MouseClicked)(mouse_button button);
bool sg_Input_MouseClicked(mouse_button button)
{
	return var_sg_Input_MouseClicked(button);
}
bool (*var_sg_Input_MouseDown)(mouse_button button);
bool sg_Input_MouseDown(mouse_button button)
{
	return var_sg_Input_MouseDown(button);
}
vector (*var_sg_Input_MouseMovement)();
vector sg_Input_MouseMovement()
{
	return var_sg_Input_MouseMovement();
}
point2d (*var_sg_Input_MousePosition)();
point2d sg_Input_MousePosition()
{
	return var_sg_Input_MousePosition();
}
vector (*var_sg_Input_MousePositionAsVector)();
vector sg_Input_MousePositionAsVector()
{
	return var_sg_Input_MousePositionAsVector();
}
bool (*var_sg_Input_MouseShown)();
bool sg_Input_MouseShown()
{
	return var_sg_Input_MouseShown();
}
bool (*var_sg_Input_MouseUp)(mouse_button button);
bool sg_Input_MouseUp(mouse_button button)
{
	return var_sg_Input_MouseUp(button);
}
float (*var_sg_Input_MouseX)();
float sg_Input_MouseX()
{
	return var_sg_Input_MouseX();
}
float (*var_sg_Input_MouseY)();
float sg_Input_MouseY()
{
	return var_sg_Input_MouseY();
}
void (*var_sg_Input_MoveMouse)(unsigned char x, unsigned char y);
void sg_Input_MoveMouse(unsigned char x, unsigned char y)
{
	var_sg_Input_MoveMouse(x,y);
}
void (*var_sg_Input_MoveMouseToPoint)(const point2d *point);
void sg_Input_MoveMouseToPoint(const point2d *point)
{
	var_sg_Input_MoveMouseToPoint(point);
}
int32_t (*var_sg_Input_NumberOfFingersOnScreen)();
int32_t sg_Input_NumberOfFingersOnScreen()
{
	return var_sg_Input_NumberOfFingersOnScreen();
}
void (*var_sg_Input_ProcessEvents)();
void sg_Input_ProcessEvents()
{
	var_sg_Input_ProcessEvents();
}
bool (*var_sg_Input_ReadingText)();
bool sg_Input_ReadingText()
{
	return var_sg_Input_ReadingText();
}
bool (*var_sg_Input_ScreenTouched)();
bool sg_Input_ScreenTouched()
{
	return var_sg_Input_ScreenTouched();
}
void (*var_sg_Input_SetAccelerometerThreshold)(float value);
void sg_Input_SetAccelerometerThreshold(float value)
{
	var_sg_Input_SetAccelerometerThreshold(value);
}
void (*var_sg_Input_SetMouseVisible)(bool show);
void sg_Input_SetMouseVisible(bool show)
{
	var_sg_Input_SetMouseVisible(show != 0);
}
void (*var_sg_Input_ShowKeyboard)();
void sg_Input_ShowKeyboard()
{
	var_sg_Input_ShowKeyboard();
}
void (*var_sg_Input_ShowMouse)();
void sg_Input_ShowMouse()
{
	var_sg_Input_ShowMouse();
}
void (*var_sg_Input_StartReadingText)(color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y);
void sg_Input_StartReadingText(color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)
{
	var_sg_Input_StartReadingText(textColor,maxLength,theFont,x,y);
}
void (*var_sg_Input_StartReadingTextWithText)(const char *text, color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y);
void sg_Input_StartReadingTextWithText(const char *text, color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)
{
	var_sg_Input_StartReadingTextWithText(text,textColor,maxLength,theFont,x,y);
}
void (*var_sg_Input_StartReadingTextWithTextAndColorInArea)(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle *area);
void sg_Input_StartReadingTextWithTextAndColorInArea(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle *area)
{
	var_sg_Input_StartReadingTextWithTextAndColorInArea(text,textColor,backGroundColor,maxLength,theFont,area);
}
void (*var_sg_Input_StartReadingTextWithTextAtPt)(const char *text, color textColor, int32_t maxLength, font theFont, const point2d *pt);
void sg_Input_StartReadingTextWithTextAtPt(const char *text, color textColor, int32_t maxLength, font theFont, const point2d *pt)
{
	var_sg_Input_StartReadingTextWithTextAtPt(text,textColor,maxLength,theFont,pt);
}
void (*var_sg_Input_StartReadingTextWithTextInArea)(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle *area);
void sg_Input_StartReadingTextWithTextInArea(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle *area)
{
	var_sg_Input_StartReadingTextWithTextInArea(text,textColor,maxLength,theFont,area);
}
void (*var_sg_Input_StartReadingTextWithinArea)(color textColor, int32_t maxLength, font theFont, const rectangle *area);
void sg_Input_StartReadingTextWithinArea(color textColor, int32_t maxLength, font theFont, const rectangle *area)
{
	var_sg_Input_StartReadingTextWithinArea(textColor,maxLength,theFont,area);
}
bool (*var_sg_Input_TextEntryCancelled)();
bool sg_Input_TextEntryCancelled()
{
	return var_sg_Input_TextEntryCancelled();
}
void (*var_sg_Input_TextReadAsASCII)(char *result);
void sg_Input_TextReadAsASCII(char *result)
{
	var_sg_Input_TextReadAsASCII(result);
}
void (*var_sg_Input_ToggleKeyboard)();
void sg_Input_ToggleKeyboard()
{
	var_sg_Input_ToggleKeyboard();
}
bool (*var_sg_Input_WindowCloseRequested)();
bool sg_Input_WindowCloseRequested()
{
	return var_sg_Input_WindowCloseRequested();
}
int32_t (*var_sg_Networking_AcceptTCPConnection)();
int32_t sg_Networking_AcceptTCPConnection()
{
	return var_sg_Networking_AcceptTCPConnection();
}
void (*var_sg_Networking_BroadcastTCPMessage)(const char *aMsg);
void sg_Networking_BroadcastTCPMessage(const char *aMsg)
{
	var_sg_Networking_BroadcastTCPMessage(aMsg);
}
void (*var_sg_Networking_BroadcastUDPMessage)(const char *aMsg);
void sg_Networking_BroadcastUDPMessage(const char *aMsg)
{
	var_sg_Networking_BroadcastUDPMessage(aMsg);
}
void (*var_sg_Networking_ClearMessageQueue)(connection aConnection);
void sg_Networking_ClearMessageQueue(connection aConnection)
{
	var_sg_Networking_ClearMessageQueue(aConnection);
}
void (*var_sg_Networking_CloseAllConnections)();
void sg_Networking_CloseAllConnections()
{
	var_sg_Networking_CloseAllConnections();
}
void (*var_sg_Networking_CloseAllSockets)();
void sg_Networking_CloseAllSockets()
{
	var_sg_Networking_CloseAllSockets();
}
void (*var_sg_Networking_CloseAllTCPHostSockets)();
void sg_Networking_CloseAllTCPHostSockets()
{
	var_sg_Networking_CloseAllTCPHostSockets();
}
void (*var_sg_Networking_CloseAllUDPSockets)();
void sg_Networking_CloseAllUDPSockets()
{
	var_sg_Networking_CloseAllUDPSockets();
}
bool (*var_sg_Networking_CloseConnection)(connection *aConnection);
bool sg_Networking_CloseConnection(connection *aConnection)
{
	return var_sg_Networking_CloseConnection(aConnection);
}
bool (*var_sg_Networking_CloseTCPHostSocket)(int32_t aPort);
bool sg_Networking_CloseTCPHostSocket(int32_t aPort)
{
	return var_sg_Networking_CloseTCPHostSocket(aPort);
}
bool (*var_sg_Networking_CloseUDPSocket)(int32_t aPort);
bool sg_Networking_CloseUDPSocket(int32_t aPort)
{
	return var_sg_Networking_CloseUDPSocket(aPort);
}
int32_t (*var_sg_Networking_ConnectionCount)();
int32_t sg_Networking_ConnectionCount()
{
	return var_sg_Networking_ConnectionCount();
}
uint32_t (*var_sg_Networking_ConnectionIP)(connection aConnection);
uint32_t sg_Networking_ConnectionIP(connection aConnection)
{
	return var_sg_Networking_ConnectionIP(aConnection);
}
int32_t (*var_sg_Networking_ConnectionPort)(connection aConnection);
int32_t sg_Networking_ConnectionPort(connection aConnection)
{
	return var_sg_Networking_ConnectionPort(aConnection);
}
int32_t (*var_sg_Networking_ConnectionQueueSize)();
int32_t sg_Networking_ConnectionQueueSize()
{
	return var_sg_Networking_ConnectionQueueSize();
}
connection (*var_sg_Networking_CreateTCPConnection)(const char *aIP, int32_t aPort);
connection sg_Networking_CreateTCPConnection(const char *aIP, int32_t aPort)
{
	return var_sg_Networking_CreateTCPConnection(aIP,aPort);
}
bool (*var_sg_Networking_CreateTCPHost)(int32_t aPort);
bool sg_Networking_CreateTCPHost(int32_t aPort)
{
	return var_sg_Networking_CreateTCPHost(aPort);
}
connection (*var_sg_Networking_CreateUDPConnection)(const char *aDestIP, int32_t aDestPort, int32_t aInPort);
connection sg_Networking_CreateUDPConnection(const char *aDestIP, int32_t aDestPort, int32_t aInPort)
{
	return var_sg_Networking_CreateUDPConnection(aDestIP,aDestPort,aInPort);
}
int32_t (*var_sg_Networking_CreateUDPHost)(int32_t aPort);
int32_t sg_Networking_CreateUDPHost(int32_t aPort)
{
	return var_sg_Networking_CreateUDPHost(aPort);
}
void (*var_sg_Networking_DecToHex)(uint32_t aDec, char *result);
void sg_Networking_DecToHex(uint32_t aDec, char *result)
{
	var_sg_Networking_DecToHex(aDec,result);
}
void (*var_sg_Networking_EnqueueMessage)(const char *aMsg, connection aConnection);
void sg_Networking_EnqueueMessage(const char *aMsg, connection aConnection)
{
	var_sg_Networking_EnqueueMessage(aMsg,aConnection);
}
void (*var_sg_Networking_EnqueueNewConnection)(connection aConnection);
void sg_Networking_EnqueueNewConnection(connection aConnection)
{
	var_sg_Networking_EnqueueNewConnection(aConnection);
}
connection (*var_sg_Networking_FetchConnection)();
connection sg_Networking_FetchConnection()
{
	return var_sg_Networking_FetchConnection();
}
void (*var_sg_Networking_FreeConnection)(connection *aConnection);
void sg_Networking_FreeConnection(connection *aConnection)
{
	var_sg_Networking_FreeConnection(aConnection);
}
void (*var_sg_Networking_HexStrToIPv4)(const char *aHex, char *result);
void sg_Networking_HexStrToIPv4(const char *aHex, char *result)
{
	var_sg_Networking_HexStrToIPv4(aHex,result);
}
void (*var_sg_Networking_HexToDecString)(const char *aHex, char *result);
void sg_Networking_HexToDecString(const char *aHex, char *result)
{
	var_sg_Networking_HexToDecString(aHex,result);
}
uint32_t (*var_sg_Networking_IPv4ToDec)(const char *aIP);
uint32_t sg_Networking_IPv4ToDec(const char *aIP)
{
	return var_sg_Networking_IPv4ToDec(aIP);
}
int32_t (*var_sg_Networking_MessageCount)(connection aConnection);
int32_t sg_Networking_MessageCount(connection aConnection)
{
	return var_sg_Networking_MessageCount(aConnection);
}
void (*var_sg_Networking_MyIP)(char *result);
void sg_Networking_MyIP(char *result)
{
	var_sg_Networking_MyIP(result);
}
void (*var_sg_Networking_ReadLastMessage)(connection aConnection, char *result);
void sg_Networking_ReadLastMessage(connection aConnection, char *result)
{
	var_sg_Networking_ReadLastMessage(aConnection,result);
}
void (*var_sg_Networking_ReadMessage)(connection aConnection, char *result);
void sg_Networking_ReadMessage(connection aConnection, char *result)
{
	var_sg_Networking_ReadMessage(aConnection,result);
}
void (*var_sg_Networking_ReleaseAllConnections)();
void sg_Networking_ReleaseAllConnections()
{
	var_sg_Networking_ReleaseAllConnections();
}
connection (*var_sg_Networking_RetreiveConnection)(int32_t aConnectionAt);
connection sg_Networking_RetreiveConnection(int32_t aConnectionAt)
{
	return var_sg_Networking_RetreiveConnection(aConnectionAt);
}
connection (*var_sg_Networking_SendTCPMessage)(const char *aMsg, connection aConnection);
connection sg_Networking_SendTCPMessage(const char *aMsg, connection aConnection)
{
	return var_sg_Networking_SendTCPMessage(aMsg,aConnection);
}
bool (*var_sg_Networking_SendUDPMessage)(const char *aMsg, connection aConnection);
bool sg_Networking_SendUDPMessage(const char *aMsg, connection aConnection)
{
	return var_sg_Networking_SendUDPMessage(aMsg,aConnection);
}
bool (*var_sg_Networking_TCPMessageReceived)();
bool sg_Networking_TCPMessageReceived()
{
	return var_sg_Networking_TCPMessageReceived();
}
bool (*var_sg_Networking_UDPMessageReceived)();
bool sg_Networking_UDPMessageReceived()
{
	return var_sg_Networking_UDPMessageReceived();
}
bool (*var_sg_Physics_BitmapAtPointsCollision)(bitmap bmp1, const point2d *pt1, bitmap bmp2, const point2d *pt2);
bool sg_Physics_BitmapAtPointsCollision(bitmap bmp1, const point2d *pt1, bitmap bmp2, const point2d *pt2)
{
	return var_sg_Physics_BitmapAtPointsCollision(bmp1,pt1,bmp2,pt2);
}
bool (*var_sg_Physics_BitmapCollision)(bitmap bmp1, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2);
bool sg_Physics_BitmapCollision(bitmap bmp1, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2)
{
	return var_sg_Physics_BitmapCollision(bmp1,x1,y1,bmp2,x2,y2);
}
bool (*var_sg_Physics_BitmapPartAtPtRectCollision)(bitmap bmp, const point2d *pt, const rectangle *part, const rectangle *rect);
bool sg_Physics_BitmapPartAtPtRectCollision(bitmap bmp, const point2d *pt, const rectangle *part, const rectangle *rect)
{
	return var_sg_Physics_BitmapPartAtPtRectCollision(bmp,pt,part,rect);
}
bool (*var_sg_Physics_BitmapPartPointCollision)(bitmap bmp, int32_t x, int32_t y, const rectangle *part, float ptX, float ptY);
bool sg_Physics_BitmapPartPointCollision(bitmap bmp, int32_t x, int32_t y, const rectangle *part, float ptX, float ptY)
{
	return var_sg_Physics_BitmapPartPointCollision(bmp,x,y,part,ptX,ptY);
}
bool (*var_sg_Physics_BitmapPartPointXYCollision)(bitmap bmp, int32_t x, int32_t y, const rectangle *part, const point2d *pt);
bool sg_Physics_BitmapPartPointXYCollision(bitmap bmp, int32_t x, int32_t y, const rectangle *part, const point2d *pt)
{
	return var_sg_Physics_BitmapPartPointXYCollision(bmp,x,y,part,pt);
}
bool (*var_sg_Physics_BitmapPartRectCollision)(bitmap bmp, int32_t x, int32_t y, const rectangle *part, const rectangle *rect);
bool sg_Physics_BitmapPartRectCollision(bitmap bmp, int32_t x, int32_t y, const rectangle *part, const rectangle *rect)
{
	return var_sg_Physics_BitmapPartRectCollision(bmp,x,y,part,rect);
}
bool (*var_sg_Physics_BitmapPointCollision)(bitmap bmp, int32_t x, int32_t y, float ptX, float ptY);
bool sg_Physics_BitmapPointCollision(bitmap bmp, int32_t x, int32_t y, float ptX, float ptY)
{
	return var_sg_Physics_BitmapPointCollision(bmp,x,y,ptX,ptY);
}
bool (*var_sg_Physics_BitmapPointPtCollision)(bitmap bmp, int32_t x, int32_t y, const point2d *pt);
bool sg_Physics_BitmapPointPtCollision(bitmap bmp, int32_t x, int32_t y, const point2d *pt)
{
	return var_sg_Physics_BitmapPointPtCollision(bmp,x,y,pt);
}
bool (*var_sg_Physics_BitmapRectCollision)(bitmap bmp, int32_t x, int32_t y, int32_t rectX, int32_t rectY, int32_t rectWidth, int32_t rectHeight);
bool sg_Physics_BitmapRectCollision(bitmap bmp, int32_t x, int32_t y, int32_t rectX, int32_t rectY, int32_t rectWidth, int32_t rectHeight)
{
	return var_sg_Physics_BitmapRectCollision(bmp,x,y,rectX,rectY,rectWidth,rectHeight);
}
bool (*var_sg_Physics_BitmapRectangleCollision)(bitmap bmp, int32_t x, int32_t y, const rectangle *rect);
bool sg_Physics_BitmapRectangleCollision(bitmap bmp, int32_t x, int32_t y, const rectangle *rect)
{
	return var_sg_Physics_BitmapRectangleCollision(bmp,x,y,rect);
}
bool (*var_sg_Physics_BitmapsPartsCollision)(bitmap bmp1, const point2d *pt1, const rectangle *part1, bitmap bmp2, const point2d *pt2, const rectangle *part2);
bool sg_Physics_BitmapsPartsCollision(bitmap bmp1, const point2d *pt1, const rectangle *part1, bitmap bmp2, const point2d *pt2, const rectangle *part2)
{
	return var_sg_Physics_BitmapsPartsCollision(bmp1,pt1,part1,bmp2,pt2,part2);
}
bool (*var_sg_Physics_CellBitmapCollision)(bitmap bmp1, int32_t cell, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2);
bool sg_Physics_CellBitmapCollision(bitmap bmp1, int32_t cell, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2)
{
	return var_sg_Physics_CellBitmapCollision(bmp1,cell,x1,y1,bmp2,x2,y2);
}
bool (*var_sg_Physics_CellBitmapCollisionAtPt)(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2);
bool sg_Physics_CellBitmapCollisionAtPt(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2)
{
	return var_sg_Physics_CellBitmapCollisionAtPt(bmp1,cell,pt1,bmp2,pt2);
}
bool (*var_sg_Physics_CellBitmapPartCollision)(bitmap bmp1, int32_t cell, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2, const rectangle *part);
bool sg_Physics_CellBitmapPartCollision(bitmap bmp1, int32_t cell, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2, const rectangle *part)
{
	return var_sg_Physics_CellBitmapPartCollision(bmp1,cell,x1,y1,bmp2,x2,y2,part);
}
bool (*var_sg_Physics_CellBitmapPartCollisionAtPt)(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2, const rectangle *part);
bool sg_Physics_CellBitmapPartCollisionAtPt(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2, const rectangle *part)
{
	return var_sg_Physics_CellBitmapPartCollisionAtPt(bmp1,cell,pt1,bmp2,pt2,part);
}
bool (*var_sg_Physics_CellCollision)(bitmap bmp1, int32_t cell1, int32_t x1, int32_t y1, bitmap bmp2, int32_t cell2, int32_t x2, int32_t y2);
bool sg_Physics_CellCollision(bitmap bmp1, int32_t cell1, int32_t x1, int32_t y1, bitmap bmp2, int32_t cell2, int32_t x2, int32_t y2)
{
	return var_sg_Physics_CellCollision(bmp1,cell1,x1,y1,bmp2,cell2,x2,y2);
}
bool (*var_sg_Physics_CellCollisionAtPt)(bitmap bmp1, int32_t cell1, const point2d *pt1, bitmap bmp2, int32_t cell2, const point2d *pt2);
bool sg_Physics_CellCollisionAtPt(bitmap bmp1, int32_t cell1, const point2d *pt1, bitmap bmp2, int32_t cell2, const point2d *pt2)
{
	return var_sg_Physics_CellCollisionAtPt(bmp1,cell1,pt1,bmp2,cell2,pt2);
}
bool (*var_sg_Physics_CellRectCollision)(bitmap bmp, int32_t cell, int32_t x, int32_t y, const rectangle *rect);
bool sg_Physics_CellRectCollision(bitmap bmp, int32_t cell, int32_t x, int32_t y, const rectangle *rect)
{
	return var_sg_Physics_CellRectCollision(bmp,cell,x,y,rect);
}
bool (*var_sg_Physics_CellRectCollisionAtPt)(bitmap bmp, int32_t cell, const point2d *pt, const rectangle *rect);
bool sg_Physics_CellRectCollisionAtPt(bitmap bmp, int32_t cell, const point2d *pt, const rectangle *rect)
{
	return var_sg_Physics_CellRectCollisionAtPt(bmp,cell,pt,rect);
}
bool (*var_sg_Physics_CircleCircleCollision)(const circle *c1, const circle *c2);
bool sg_Physics_CircleCircleCollision(const circle *c1, const circle *c2)
{
	return var_sg_Physics_CircleCircleCollision(c1,c2);
}
bool (*var_sg_Physics_CircleLinesCollision)(const circle *c, const lines_array lines, int32_t lines_len);
bool sg_Physics_CircleLinesCollision(const circle *c, const lines_array lines, int32_t lines_len)
{
	return var_sg_Physics_CircleLinesCollision(c,lines,lines_len);
}
bool (*var_sg_Physics_CircleRectCollision)(const circle *c, const rectangle *rect);
bool sg_Physics_CircleRectCollision(const circle *c, const rectangle *rect)
{
	return var_sg_Physics_CircleRectCollision(c,rect);
}
bool (*var_sg_Physics_CircleTriangleCollision)(const circle *c, const triangle  *tri);
bool sg_Physics_CircleTriangleCollision(const circle *c, const triangle  *tri)
{
	return var_sg_Physics_CircleTriangleCollision(c,tri);
}
void (*var_sg_Physics_CollideCircleCircle)(sprite s, const circle *c);
void sg_Physics_CollideCircleCircle(sprite s, const circle *c)
{
	var_sg_Physics_CollideCircleCircle(s,c);
}
void (*var_sg_Physics_CollideCircleLine)(sprite s, const line_segment *line);
void sg_Physics_CollideCircleLine(sprite s, const line_segment *line)
{
	var_sg_Physics_CollideCircleLine(s,line);
}
void (*var_sg_Physics_CollideCircleLines)(sprite s, const lines_array lines, int32_t lines_len);
void sg_Physics_CollideCircleLines(sprite s, const lines_array lines, int32_t lines_len)
{
	var_sg_Physics_CollideCircleLines(s,lines,lines_len);
}
void (*var_sg_Physics_CollideCircleRectangle)(sprite s, const rectangle *rect);
void sg_Physics_CollideCircleRectangle(sprite s, const rectangle *rect)
{
	var_sg_Physics_CollideCircleRectangle(s,rect);
}
void (*var_sg_Physics_CollideCircles)(sprite s1, sprite s2);
void sg_Physics_CollideCircles(sprite s1, sprite s2)
{
	var_sg_Physics_CollideCircles(s1,s2);
}
bool (*var_sg_Physics_RectLineCollision)(const rectangle *rect, const line_segment *line);
bool sg_Physics_RectLineCollision(const rectangle *rect, const line_segment *line)
{
	return var_sg_Physics_RectLineCollision(rect,line);
}
collision_side (*var_sg_Physics_SideForCollisionTest)(const vector *velocity);
collision_side sg_Physics_SideForCollisionTest(const vector *velocity)
{
	return var_sg_Physics_SideForCollisionTest(velocity);
}
bool (*var_sg_Physics_SpriteBitmapAtPointCollision)(sprite s, bitmap bmp, const point2d *pt);
bool sg_Physics_SpriteBitmapAtPointCollision(sprite s, bitmap bmp, const point2d *pt)
{
	return var_sg_Physics_SpriteBitmapAtPointCollision(s,bmp,pt);
}
bool (*var_sg_Physics_SpriteBitmapCollision)(sprite s, bitmap bmp, float x, float y);
bool sg_Physics_SpriteBitmapCollision(sprite s, bitmap bmp, float x, float y)
{
	return var_sg_Physics_SpriteBitmapCollision(s,bmp,x,y);
}
bool (*var_sg_Physics_SpriteCircleLineCollision)(sprite s, const line_segment *line);
bool sg_Physics_SpriteCircleLineCollision(sprite s, const line_segment *line)
{
	return var_sg_Physics_SpriteCircleLineCollision(s,line);
}
bool (*var_sg_Physics_SpriteCollision)(sprite s1, sprite s2);
bool sg_Physics_SpriteCollision(sprite s1, sprite s2)
{
	return var_sg_Physics_SpriteCollision(s1,s2);
}
bool (*var_sg_Physics_SpriteRectCollision)(sprite s, float x, float y, int32_t width, int32_t height);
bool sg_Physics_SpriteRectCollision(sprite s, float x, float y, int32_t width, int32_t height)
{
	return var_sg_Physics_SpriteRectCollision(s,x,y,width,height);
}
bool (*var_sg_Physics_SpriteRectLineCollision)(sprite s, const line_segment *line);
bool sg_Physics_SpriteRectLineCollision(sprite s, const line_segment *line)
{
	return var_sg_Physics_SpriteRectLineCollision(s,line);
}
bool (*var_sg_Physics_SpriteRectangleCollision)(sprite s, const rectangle *r);
bool sg_Physics_SpriteRectangleCollision(sprite s, const rectangle *r)
{
	return var_sg_Physics_SpriteRectangleCollision(s,r);
}
bool (*var_sg_Physics_TriangleLineCollision)(const triangle  *tri, const line_segment *ln);
bool sg_Physics_TriangleLineCollision(const triangle  *tri, const line_segment *ln)
{
	return var_sg_Physics_TriangleLineCollision(tri,ln);
}
void (*var_sg_Resources_AppPath)(char *result);
void sg_Resources_AppPath(char *result)
{
	var_sg_Resources_AppPath(result);
}
void (*var_sg_Resources_FilenameToResource)(const char *name, resource_kind kind, char *result);
void sg_Resources_FilenameToResource(const char *name, resource_kind kind, char *result)
{
	var_sg_Resources_FilenameToResource(name,kind,result);
}
bool (*var_sg_Resources_HasResourceBundle)(const char *name);
bool sg_Resources_HasResourceBundle(const char *name)
{
	return var_sg_Resources_HasResourceBundle(name);
}
void (*var_sg_Resources_LoadResourceBundle)(const char *name, bool showProgress);
void sg_Resources_LoadResourceBundle(const char *name, bool showProgress)
{
	var_sg_Resources_LoadResourceBundle(name,showProgress != 0);
}
void (*var_sg_Resources_LoadResourceBundleNamed)(const char *name, const char *filename, bool showProgress);
void sg_Resources_LoadResourceBundleNamed(const char *name, const char *filename, bool showProgress)
{
	var_sg_Resources_LoadResourceBundleNamed(name,filename,showProgress != 0);
}
void (*var_sg_Resources_PathToOtherResource)(const char *filename, char *result);
void sg_Resources_PathToOtherResource(const char *filename, char *result)
{
	var_sg_Resources_PathToOtherResource(filename,result);
}
void (*var_sg_Resources_PathToOtherResourceWithBase)(const char *path, const char *filename, char *result);
void sg_Resources_PathToOtherResourceWithBase(const char *path, const char *filename, char *result)
{
	var_sg_Resources_PathToOtherResourceWithBase(path,filename,result);
}
void (*var_sg_Resources_PathToResource)(const char *filename, resource_kind kind, char *result);
void sg_Resources_PathToResource(const char *filename, resource_kind kind, char *result)
{
	var_sg_Resources_PathToResource(filename,kind,result);
}
void (*var_sg_Resources_PathToResourceWithBase)(const char *path, const char *filename, resource_kind kind, char *result);
void sg_Resources_PathToResourceWithBase(const char *path, const char *filename, resource_kind kind, char *result)
{
	var_sg_Resources_PathToResourceWithBase(path,filename,kind,result);
}
void (*var_sg_Resources_PathToResourceWithSubPaths)(const char *filename, resource_kind kind, const string_array subPaths, char *result, int32_t subPaths_len);
void sg_Resources_PathToResourceWithSubPaths(const char *filename, resource_kind kind, const string_array subPaths, char *result, int32_t subPaths_len)
{
	var_sg_Resources_PathToResourceWithSubPaths(filename,kind,subPaths,result,subPaths_len);
}
void (*var_sg_Resources_PathToResourseInSubdir)(const char *filename, const char *subdir, char *result);
void sg_Resources_PathToResourseInSubdir(const char *filename, const char *subdir, char *result)
{
	var_sg_Resources_PathToResourseInSubdir(filename,subdir,result);
}
void (*var_sg_Resources_PathToResourseKindInSubdir)(const char *filename, resource_kind kind, const char *subdir, char *result);
void sg_Resources_PathToResourseKindInSubdir(const char *filename, resource_kind kind, const char *subdir, char *result)
{
	var_sg_Resources_PathToResourseKindInSubdir(filename,kind,subdir,result);
}
void (*var_sg_Resources_RegisterFreeNotifier)(free_notifier  fn);
void sg_Resources_RegisterFreeNotifier(free_notifier  fn)
{
	var_sg_Resources_RegisterFreeNotifier(fn);
}
void (*var_sg_Resources_ReleaseAllResources)();
void sg_Resources_ReleaseAllResources()
{
	var_sg_Resources_ReleaseAllResources();
}
void (*var_sg_Resources_ReleaseResourceBundle)(const char *name);
void sg_Resources_ReleaseResourceBundle(const char *name)
{
	var_sg_Resources_ReleaseResourceBundle(name);
}
void (*var_sg_Resources_SetAppPath)(const char *path);
void sg_Resources_SetAppPath(const char *path)
{
	var_sg_Resources_SetAppPath(path);
}
void (*var_sg_Resources_SetAppPathWithExe)(const char *path, bool withExe);
void sg_Resources_SetAppPathWithExe(const char *path, bool withExe)
{
	var_sg_Resources_SetAppPathWithExe(path,withExe != 0);
}
point2d (*var_sg_Sprites_CenterPoint)(sprite s);
point2d sg_Sprites_CenterPoint(sprite s)
{
	return var_sg_Sprites_CenterPoint(s);
}
sprite (*var_sg_Sprites_CreateBasicSprite)(bitmap layer);
sprite sg_Sprites_CreateBasicSprite(bitmap layer)
{
	return var_sg_Sprites_CreateBasicSprite(layer);
}
sprite (*var_sg_Sprites_CreateBasicSpriteNamed)(const char *name, bitmap layer);
sprite sg_Sprites_CreateBasicSpriteNamed(const char *name, bitmap layer)
{
	return var_sg_Sprites_CreateBasicSpriteNamed(name,layer);
}
sprite (*var_sg_Sprites_CreateBasicSpritePt)(bitmap layer, point2d pt);
sprite sg_Sprites_CreateBasicSpritePt(bitmap layer, point2d pt)
{
	return var_sg_Sprites_CreateBasicSpritePt(layer,pt);
}
sprite (*var_sg_Sprites_CreateBasicSpriteXY)(bitmap layer, float x, float y);
sprite sg_Sprites_CreateBasicSpriteXY(bitmap layer, float x, float y)
{
	return var_sg_Sprites_CreateBasicSpriteXY(layer,x,y);
}
sprite (*var_sg_Sprites_CreateLayeredSprite)(const bitmap *layers, int32_t layers_len);
sprite sg_Sprites_CreateLayeredSprite(const bitmap *layers, int32_t layers_len)
{
	return var_sg_Sprites_CreateLayeredSprite(layers,layers_len);
}
sprite (*var_sg_Sprites_CreateLayeredSpriteNamed)(const char *name, const bitmap *layers, int32_t layers_len);
sprite sg_Sprites_CreateLayeredSpriteNamed(const char *name, const bitmap *layers, int32_t layers_len)
{
	return var_sg_Sprites_CreateLayeredSpriteNamed(name,layers,layers_len);
}
sprite (*var_sg_Sprites_CreateLayeredSpriteWithAnimationScript)(const bitmap *layers, animation_script ani, int32_t layers_len);
sprite sg_Sprites_CreateLayeredSpriteWithAnimationScript(const bitmap *layers, animation_script ani, int32_t layers_len)
{
	return var_sg_Sprites_CreateLayeredSpriteWithAnimationScript(layers,ani,layers_len);
}
sprite (*var_sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed)(const char *name, const bitmap *layers, animation_script ani, int32_t layers_len);
sprite sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed(const char *name, const bitmap *layers, animation_script ani, int32_t layers_len)
{
	return var_sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed(name,layers,ani,layers_len);
}
sprite (*var_sg_Sprites_CreateLayeredSpriteWithLayerNames)(const bitmap *layers, const string_array layerNames, int32_t layers_len, int32_t layerNames_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNames(const bitmap *layers, const string_array layerNames, int32_t layers_len, int32_t layerNames_len)
{
	return var_sg_Sprites_CreateLayeredSpriteWithLayerNames(layers,layerNames,layers_len,layerNames_len);
}
sprite (*var_sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript)(const bitmap *layers, const string_array layerNames, animation_script ani, int32_t layers_len, int32_t layerNames_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript(const bitmap *layers, const string_array layerNames, animation_script ani, int32_t layers_len, int32_t layerNames_len)
{
	return var_sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript(layers,layerNames,ani,layers_len,layerNames_len);
}
sprite (*var_sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed)(const char *name, const bitmap *layers, const string_array layerNames, animation_script ani, int32_t layers_len, int32_t layerNames_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed(const char *name, const bitmap *layers, const string_array layerNames, animation_script ani, int32_t layers_len, int32_t layerNames_len)
{
	return var_sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed(name,layers,layerNames,ani,layers_len,layerNames_len);
}
sprite (*var_sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed)(const char *name, const bitmap *layers, const string_array layerNames, int32_t layers_len, int32_t layerNames_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed(const char *name, const bitmap *layers, const string_array layerNames, int32_t layers_len, int32_t layerNames_len)
{
	return var_sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed(name,layers,layerNames,layers_len,layerNames_len);
}
sprite (*var_sg_Sprites_CreateSpriteWithAnimation)(bitmap layer, animation_script ani);
sprite sg_Sprites_CreateSpriteWithAnimation(bitmap layer, animation_script ani)
{
	return var_sg_Sprites_CreateSpriteWithAnimation(layer,ani);
}
sprite (*var_sg_Sprites_CreateSpriteWithAnimationNamed)(const char *name, bitmap layer, animation_script ani);
sprite sg_Sprites_CreateSpriteWithAnimationNamed(const char *name, bitmap layer, animation_script ani)
{
	return var_sg_Sprites_CreateSpriteWithAnimationNamed(name,layer,ani);
}
sprite (*var_sg_Sprites_CreateSpriteWithAnimationPt)(bitmap layer, animation_script ani, point2d pt);
sprite sg_Sprites_CreateSpriteWithAnimationPt(bitmap layer, animation_script ani, point2d pt)
{
	return var_sg_Sprites_CreateSpriteWithAnimationPt(layer,ani,pt);
}
sprite (*var_sg_Sprites_CreateSpriteWithAnimationXY)(bitmap layer, animation_script ani, float x, float y);
sprite sg_Sprites_CreateSpriteWithAnimationXY(bitmap layer, animation_script ani, float x, float y)
{
	return var_sg_Sprites_CreateSpriteWithAnimationXY(layer,ani,x,y);
}
sprite (*var_sg_Sprites_CreateSpriteWithLayer)(bitmap layer, const char *layerName);
sprite sg_Sprites_CreateSpriteWithLayer(bitmap layer, const char *layerName)
{
	return var_sg_Sprites_CreateSpriteWithLayer(layer,layerName);
}
sprite (*var_sg_Sprites_CreateSpriteWithLayerAndAnimation)(bitmap layer, const char *layerName, animation_script ani);
sprite sg_Sprites_CreateSpriteWithLayerAndAnimation(bitmap layer, const char *layerName, animation_script ani)
{
	return var_sg_Sprites_CreateSpriteWithLayerAndAnimation(layer,layerName,ani);
}
sprite (*var_sg_Sprites_CreateSpriteWithLayerAndAnimationNamed)(const char *name, bitmap layer, const char *layerName, animation_script ani);
sprite sg_Sprites_CreateSpriteWithLayerAndAnimationNamed(const char *name, bitmap layer, const char *layerName, animation_script ani)
{
	return var_sg_Sprites_CreateSpriteWithLayerAndAnimationNamed(name,layer,layerName,ani);
}
sprite (*var_sg_Sprites_CreateSpriteWithLayerNamed)(const char *name, bitmap layer, const char *layerName);
sprite sg_Sprites_CreateSpriteWithLayerNamed(const char *name, bitmap layer, const char *layerName)
{
	return var_sg_Sprites_CreateSpriteWithLayerNamed(name,layer,layerName);
}
void (*var_sg_Sprites_DrawSpriteOffsetPoint)(sprite s, const point2d *position);
void sg_Sprites_DrawSpriteOffsetPoint(sprite s, const point2d *position)
{
	var_sg_Sprites_DrawSpriteOffsetPoint(s,position);
}
void (*var_sg_Sprites_DrawSpriteOffsetXY)(sprite s, int32_t xOffset, int32_t yOffset);
void sg_Sprites_DrawSpriteOffsetXY(sprite s, int32_t xOffset, int32_t yOffset)
{
	var_sg_Sprites_DrawSpriteOffsetXY(s,xOffset,yOffset);
}
void (*var_sg_Sprites_FreeSprite)(sprite *s);
void sg_Sprites_FreeSprite(sprite *s)
{
	var_sg_Sprites_FreeSprite(s);
}
bool (*var_sg_Sprites_HasSprite)(const char *name);
bool sg_Sprites_HasSprite(const char *name)
{
	return var_sg_Sprites_HasSprite(name);
}
void (*var_sg_Sprites_MoveSpritePct)(sprite s, float pct);
void sg_Sprites_MoveSpritePct(sprite s, float pct)
{
	var_sg_Sprites_MoveSpritePct(s,pct);
}
void (*var_sg_Sprites_MoveSpriteTo)(sprite s, int32_t x, int32_t y);
void sg_Sprites_MoveSpriteTo(sprite s, int32_t x, int32_t y)
{
	var_sg_Sprites_MoveSpriteTo(s,x,y);
}
void (*var_sg_Sprites_MoveSpriteVecPct)(sprite s, const vector *distance, float pct);
void sg_Sprites_MoveSpriteVecPct(sprite s, const vector *distance, float pct)
{
	var_sg_Sprites_MoveSpriteVecPct(s,distance,pct);
}
void (*var_sg_Sprites_ReleaseAllSprites)();
void sg_Sprites_ReleaseAllSprites()
{
	var_sg_Sprites_ReleaseAllSprites();
}
void (*var_sg_Sprites_ReleaseSprite)(const char *name);
void sg_Sprites_ReleaseSprite(const char *name)
{
	var_sg_Sprites_ReleaseSprite(name);
}
void (*var_sg_Sprites_ReplayAnimationWithSound)(sprite s, bool withSound);
void sg_Sprites_ReplayAnimationWithSound(sprite s, bool withSound)
{
	var_sg_Sprites_ReplayAnimationWithSound(s,withSound != 0);
}
int32_t (*var_sg_Sprites_SpriteAddLayer)(sprite s, bitmap newLayer, const char *layerName);
int32_t sg_Sprites_SpriteAddLayer(sprite s, bitmap newLayer, const char *layerName)
{
	return var_sg_Sprites_SpriteAddLayer(s,newLayer,layerName);
}
void (*var_sg_Sprites_SpriteAddToVelocity)(sprite s, const vector *value);
void sg_Sprites_SpriteAddToVelocity(sprite s, const vector *value)
{
	var_sg_Sprites_SpriteAddToVelocity(s,value);
}
void (*var_sg_Sprites_SpriteAddValue)(sprite s, const char *name);
void sg_Sprites_SpriteAddValue(sprite s, const char *name)
{
	var_sg_Sprites_SpriteAddValue(s,name);
}
void (*var_sg_Sprites_SpriteAddValueWithInitialValue)(sprite s, const char *name, float initVal);
void sg_Sprites_SpriteAddValueWithInitialValue(sprite s, const char *name, float initVal)
{
	var_sg_Sprites_SpriteAddValueWithInitialValue(s,name,initVal);
}
bool (*var_sg_Sprites_SpriteAnimationHasEnded)(sprite s);
bool sg_Sprites_SpriteAnimationHasEnded(sprite s)
{
	return var_sg_Sprites_SpriteAnimationHasEnded(s);
}
void (*var_sg_Sprites_SpriteBringLayerForward)(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteBringLayerForward(sprite s, int32_t visibleLayer)
{
	var_sg_Sprites_SpriteBringLayerForward(s,visibleLayer);
}
void (*var_sg_Sprites_SpriteBringLayerToFront)(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteBringLayerToFront(sprite s, int32_t visibleLayer)
{
	var_sg_Sprites_SpriteBringLayerToFront(s,visibleLayer);
}
circle (*var_sg_Sprites_SpriteCircle)(sprite s);
circle sg_Sprites_SpriteCircle(sprite s)
{
	return var_sg_Sprites_SpriteCircle(s);
}
bitmap (*var_sg_Sprites_SpriteCollisionBitmap)(sprite s);
bitmap sg_Sprites_SpriteCollisionBitmap(sprite s)
{
	return var_sg_Sprites_SpriteCollisionBitmap(s);
}
circle (*var_sg_Sprites_SpriteCollisionCircle)(sprite s);
circle sg_Sprites_SpriteCollisionCircle(sprite s)
{
	return var_sg_Sprites_SpriteCollisionCircle(s);
}
collision_test_kind (*var_sg_Sprites_SpriteCollisionKind)(sprite s);
collision_test_kind sg_Sprites_SpriteCollisionKind(sprite s)
{
	return var_sg_Sprites_SpriteCollisionKind(s);
}
rectangle (*var_sg_Sprites_SpriteCollisionRectangle)(sprite s);
rectangle sg_Sprites_SpriteCollisionRectangle(sprite s)
{
	return var_sg_Sprites_SpriteCollisionRectangle(s);
}
int32_t (*var_sg_Sprites_SpriteCurrentCell)(sprite s);
int32_t sg_Sprites_SpriteCurrentCell(sprite s)
{
	return var_sg_Sprites_SpriteCurrentCell(s);
}
rectangle (*var_sg_Sprites_SpriteCurrentCellRectangle)(sprite s);
rectangle sg_Sprites_SpriteCurrentCellRectangle(sprite s)
{
	return var_sg_Sprites_SpriteCurrentCellRectangle(s);
}
float (*var_sg_Sprites_SpriteDX)(sprite s);
float sg_Sprites_SpriteDX(sprite s)
{
	return var_sg_Sprites_SpriteDX(s);
}
float (*var_sg_Sprites_SpriteDY)(sprite s);
float sg_Sprites_SpriteDY(sprite s)
{
	return var_sg_Sprites_SpriteDY(s);
}
float (*var_sg_Sprites_SpriteHeading)(sprite s);
float sg_Sprites_SpriteHeading(sprite s)
{
	return var_sg_Sprites_SpriteHeading(s);
}
int32_t (*var_sg_Sprites_SpriteHeight)(sprite s);
int32_t sg_Sprites_SpriteHeight(sprite s)
{
	return var_sg_Sprites_SpriteHeight(s);
}
void (*var_sg_Sprites_SpriteHideLayer)(sprite s, int32_t id);
void sg_Sprites_SpriteHideLayer(sprite s, int32_t id)
{
	var_sg_Sprites_SpriteHideLayer(s,id);
}
void (*var_sg_Sprites_SpriteHideLayerNamed)(sprite s, const char *name);
void sg_Sprites_SpriteHideLayerNamed(sprite s, const char *name)
{
	var_sg_Sprites_SpriteHideLayerNamed(s,name);
}
bitmap (*var_sg_Sprites_SpriteLayerAtIdx)(sprite s, int32_t idx);
bitmap sg_Sprites_SpriteLayerAtIdx(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerAtIdx(s,idx);
}
circle (*var_sg_Sprites_SpriteLayerCircle)(sprite s, int32_t idx);
circle sg_Sprites_SpriteLayerCircle(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerCircle(s,idx);
}
int32_t (*var_sg_Sprites_SpriteLayerCount)(sprite s);
int32_t sg_Sprites_SpriteLayerCount(sprite s)
{
	return var_sg_Sprites_SpriteLayerCount(s);
}
int32_t (*var_sg_Sprites_SpriteLayerHeight)(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteLayerHeight(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerHeight(s,idx);
}
int32_t (*var_sg_Sprites_SpriteLayerIndex)(sprite s, const char *name);
int32_t sg_Sprites_SpriteLayerIndex(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerIndex(s,name);
}
void (*var_sg_Sprites_SpriteLayerName)(sprite s, int32_t idx, char *result);
void sg_Sprites_SpriteLayerName(sprite s, int32_t idx, char *result)
{
	var_sg_Sprites_SpriteLayerName(s,idx,result);
}
bitmap (*var_sg_Sprites_SpriteLayerNamed)(sprite s, const char *name);
bitmap sg_Sprites_SpriteLayerNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamed(s,name);
}
circle (*var_sg_Sprites_SpriteLayerNamedCircle)(sprite s, const char *name);
circle sg_Sprites_SpriteLayerNamedCircle(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamedCircle(s,name);
}
int32_t (*var_sg_Sprites_SpriteLayerNamedHeight)(sprite s, const char *name);
int32_t sg_Sprites_SpriteLayerNamedHeight(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamedHeight(s,name);
}
rectangle (*var_sg_Sprites_SpriteLayerNamedRectangle)(sprite s, const char *name);
rectangle sg_Sprites_SpriteLayerNamedRectangle(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamedRectangle(s,name);
}
int32_t (*var_sg_Sprites_SpriteLayerNamedWidth)(sprite s, const char *name);
int32_t sg_Sprites_SpriteLayerNamedWidth(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerNamedWidth(s,name);
}
point2d (*var_sg_Sprites_SpriteLayerOffset)(sprite s, int32_t idx);
point2d sg_Sprites_SpriteLayerOffset(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerOffset(s,idx);
}
point2d (*var_sg_Sprites_SpriteLayerOffsetNamed)(sprite s, const char *name);
point2d sg_Sprites_SpriteLayerOffsetNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteLayerOffsetNamed(s,name);
}
void (*var_sg_Sprites_SpriteLayerOffsets)(sprite s, point2d *result, int32_t result_len);
void sg_Sprites_SpriteLayerOffsets(sprite s, point2d *result, int32_t result_len)
{
	var_sg_Sprites_SpriteLayerOffsets(s,result,result_len);
}
rectangle (*var_sg_Sprites_SpriteLayerRectangle)(sprite s, int32_t idx);
rectangle sg_Sprites_SpriteLayerRectangle(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerRectangle(s,idx);
}
int32_t (*var_sg_Sprites_SpriteLayerWidth)(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteLayerWidth(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteLayerWidth(s,idx);
}
void (*var_sg_Sprites_SpriteLayers)(sprite s, bitmap *result, int32_t result_len);
void sg_Sprites_SpriteLayers(sprite s, bitmap *result, int32_t result_len)
{
	var_sg_Sprites_SpriteLayers(s,result,result_len);
}
float (*var_sg_Sprites_SpriteMass)(sprite s);
float sg_Sprites_SpriteMass(sprite s)
{
	return var_sg_Sprites_SpriteMass(s);
}
void (*var_sg_Sprites_SpriteName)(sprite sprt, char *result);
void sg_Sprites_SpriteName(sprite sprt, char *result)
{
	var_sg_Sprites_SpriteName(sprt,result);
}
sprite (*var_sg_Sprites_SpriteNamed)(const char *name);
sprite sg_Sprites_SpriteNamed(const char *name)
{
	return var_sg_Sprites_SpriteNamed(name);
}
bool (*var_sg_Sprites_SpriteOffscreen)(sprite s);
bool sg_Sprites_SpriteOffscreen(sprite s)
{
	return var_sg_Sprites_SpriteOffscreen(s);
}
bool (*var_sg_Sprites_SpriteOnScreenAt)(sprite s, int32_t x, int32_t y);
bool sg_Sprites_SpriteOnScreenAt(sprite s, int32_t x, int32_t y)
{
	return var_sg_Sprites_SpriteOnScreenAt(s,x,y);
}
bool (*var_sg_Sprites_SpriteOnScreenAtPoint)(sprite s, const point2d *pt);
bool sg_Sprites_SpriteOnScreenAtPoint(sprite s, const point2d *pt)
{
	return var_sg_Sprites_SpriteOnScreenAtPoint(s,pt);
}
point2d (*var_sg_Sprites_SpritePosition)(sprite s);
point2d sg_Sprites_SpritePosition(sprite s)
{
	return var_sg_Sprites_SpritePosition(s);
}
void (*var_sg_Sprites_SpriteReplayAnimation)(sprite s);
void sg_Sprites_SpriteReplayAnimation(sprite s)
{
	var_sg_Sprites_SpriteReplayAnimation(s);
}
float (*var_sg_Sprites_SpriteRotation)(sprite s);
float sg_Sprites_SpriteRotation(sprite s)
{
	return var_sg_Sprites_SpriteRotation(s);
}
float (*var_sg_Sprites_SpriteScale)(sprite s);
float sg_Sprites_SpriteScale(sprite s)
{
	return var_sg_Sprites_SpriteScale(s);
}
rectangle (*var_sg_Sprites_SpriteScreenRectangle)(sprite s);
rectangle sg_Sprites_SpriteScreenRectangle(sprite s)
{
	return var_sg_Sprites_SpriteScreenRectangle(s);
}
void (*var_sg_Sprites_SpriteSendLayerBackward)(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteSendLayerBackward(sprite s, int32_t visibleLayer)
{
	var_sg_Sprites_SpriteSendLayerBackward(s,visibleLayer);
}
void (*var_sg_Sprites_SpriteSendLayerToBack)(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteSendLayerToBack(sprite s, int32_t visibleLayer)
{
	var_sg_Sprites_SpriteSendLayerToBack(s,visibleLayer);
}
void (*var_sg_Sprites_SpriteSetCollisionBitmap)(sprite s, bitmap bmp);
void sg_Sprites_SpriteSetCollisionBitmap(sprite s, bitmap bmp)
{
	var_sg_Sprites_SpriteSetCollisionBitmap(s,bmp);
}
void (*var_sg_Sprites_SpriteSetCollisionKind)(sprite s, collision_test_kind value);
void sg_Sprites_SpriteSetCollisionKind(sprite s, collision_test_kind value)
{
	var_sg_Sprites_SpriteSetCollisionKind(s,value);
}
void (*var_sg_Sprites_SpriteSetDX)(sprite s, float value);
void sg_Sprites_SpriteSetDX(sprite s, float value)
{
	var_sg_Sprites_SpriteSetDX(s,value);
}
void (*var_sg_Sprites_SpriteSetDY)(sprite s, float value);
void sg_Sprites_SpriteSetDY(sprite s, float value)
{
	var_sg_Sprites_SpriteSetDY(s,value);
}
void (*var_sg_Sprites_SpriteSetHeading)(sprite s, float value);
void sg_Sprites_SpriteSetHeading(sprite s, float value)
{
	var_sg_Sprites_SpriteSetHeading(s,value);
}
void (*var_sg_Sprites_SpriteSetLayerOffset)(sprite s, int32_t idx, const point2d *value);
void sg_Sprites_SpriteSetLayerOffset(sprite s, int32_t idx, const point2d *value)
{
	var_sg_Sprites_SpriteSetLayerOffset(s,idx,value);
}
void (*var_sg_Sprites_SpriteSetLayerOffsetNamed)(sprite s, const char *name, const point2d *value);
void sg_Sprites_SpriteSetLayerOffsetNamed(sprite s, const char *name, const point2d *value)
{
	var_sg_Sprites_SpriteSetLayerOffsetNamed(s,name,value);
}
void (*var_sg_Sprites_SpriteSetLayerOffsets)(sprite s, const point2d *values, int32_t values_len);
void sg_Sprites_SpriteSetLayerOffsets(sprite s, const point2d *values, int32_t values_len)
{
	var_sg_Sprites_SpriteSetLayerOffsets(s,values,values_len);
}
void (*var_sg_Sprites_SpriteSetMass)(sprite s, float value);
void sg_Sprites_SpriteSetMass(sprite s, float value)
{
	var_sg_Sprites_SpriteSetMass(s,value);
}
void (*var_sg_Sprites_SpriteSetPosition)(sprite s, const point2d *value);
void sg_Sprites_SpriteSetPosition(sprite s, const point2d *value)
{
	var_sg_Sprites_SpriteSetPosition(s,value);
}
void (*var_sg_Sprites_SpriteSetRotation)(sprite s, float value);
void sg_Sprites_SpriteSetRotation(sprite s, float value)
{
	var_sg_Sprites_SpriteSetRotation(s,value);
}
void (*var_sg_Sprites_SpriteSetScale)(sprite s, float value);
void sg_Sprites_SpriteSetScale(sprite s, float value)
{
	var_sg_Sprites_SpriteSetScale(s,value);
}
void (*var_sg_Sprites_SpriteSetSpeed)(sprite s, float value);
void sg_Sprites_SpriteSetSpeed(sprite s, float value)
{
	var_sg_Sprites_SpriteSetSpeed(s,value);
}
void (*var_sg_Sprites_SpriteSetValue)(sprite s, int32_t idx, float val);
void sg_Sprites_SpriteSetValue(sprite s, int32_t idx, float val)
{
	var_sg_Sprites_SpriteSetValue(s,idx,val);
}
void (*var_sg_Sprites_SpriteSetValueNamed)(sprite s, const char *name, float val);
void sg_Sprites_SpriteSetValueNamed(sprite s, const char *name, float val)
{
	var_sg_Sprites_SpriteSetValueNamed(s,name,val);
}
void (*var_sg_Sprites_SpriteSetVelocity)(sprite s, const vector *value);
void sg_Sprites_SpriteSetVelocity(sprite s, const vector *value)
{
	var_sg_Sprites_SpriteSetVelocity(s,value);
}
void (*var_sg_Sprites_SpriteSetX)(sprite s, float value);
void sg_Sprites_SpriteSetX(sprite s, float value)
{
	var_sg_Sprites_SpriteSetX(s,value);
}
void (*var_sg_Sprites_SpriteSetY)(sprite s, float value);
void sg_Sprites_SpriteSetY(sprite s, float value)
{
	var_sg_Sprites_SpriteSetY(s,value);
}
int32_t (*var_sg_Sprites_SpriteShowLayer)(sprite s, int32_t id);
int32_t sg_Sprites_SpriteShowLayer(sprite s, int32_t id)
{
	return var_sg_Sprites_SpriteShowLayer(s,id);
}
int32_t (*var_sg_Sprites_SpriteShowLayerNamed)(sprite s, const char *name);
int32_t sg_Sprites_SpriteShowLayerNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteShowLayerNamed(s,name);
}
float (*var_sg_Sprites_SpriteSpeed)(sprite s);
float sg_Sprites_SpriteSpeed(sprite s)
{
	return var_sg_Sprites_SpriteSpeed(s);
}
void (*var_sg_Sprites_SpriteStartAnimation)(sprite s, int32_t idx);
void sg_Sprites_SpriteStartAnimation(sprite s, int32_t idx)
{
	var_sg_Sprites_SpriteStartAnimation(s,idx);
}
void (*var_sg_Sprites_SpriteStartAnimationNamed)(sprite s, const char *named);
void sg_Sprites_SpriteStartAnimationNamed(sprite s, const char *named)
{
	var_sg_Sprites_SpriteStartAnimationNamed(s,named);
}
void (*var_sg_Sprites_SpriteStartAnimationNamedWithSound)(sprite s, const char *named, bool withSound);
void sg_Sprites_SpriteStartAnimationNamedWithSound(sprite s, const char *named, bool withSound)
{
	var_sg_Sprites_SpriteStartAnimationNamedWithSound(s,named,withSound != 0);
}
void (*var_sg_Sprites_SpriteStartAnimationWithSound)(sprite s, int32_t idx, bool withSound);
void sg_Sprites_SpriteStartAnimationWithSound(sprite s, int32_t idx, bool withSound)
{
	var_sg_Sprites_SpriteStartAnimationWithSound(s,idx,withSound != 0);
}
void (*var_sg_Sprites_SpriteToggleLayerNamedVisible)(sprite s, const char *name);
void sg_Sprites_SpriteToggleLayerNamedVisible(sprite s, const char *name)
{
	var_sg_Sprites_SpriteToggleLayerNamedVisible(s,name);
}
void (*var_sg_Sprites_SpriteToggleLayerVisible)(sprite s, int32_t id);
void sg_Sprites_SpriteToggleLayerVisible(sprite s, int32_t id)
{
	var_sg_Sprites_SpriteToggleLayerVisible(s,id);
}
float (*var_sg_Sprites_SpriteValue)(sprite s, int32_t index);
float sg_Sprites_SpriteValue(sprite s, int32_t index)
{
	return var_sg_Sprites_SpriteValue(s,index);
}
int32_t (*var_sg_Sprites_SpriteValueCount)(sprite s);
int32_t sg_Sprites_SpriteValueCount(sprite s)
{
	return var_sg_Sprites_SpriteValueCount(s);
}
float (*var_sg_Sprites_SpriteValueNamed)(sprite s, const char *name);
float sg_Sprites_SpriteValueNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteValueNamed(s,name);
}
void (*var_sg_Sprites_SpriteValueNames)(sprite s, string_array result, int32_t result_len);
void sg_Sprites_SpriteValueNames(sprite s, string_array result, int32_t result_len)
{
	var_sg_Sprites_SpriteValueNames(s,result,result_len);
}
vector (*var_sg_Sprites_SpriteVelocity)(sprite s);
vector sg_Sprites_SpriteVelocity(sprite s)
{
	return var_sg_Sprites_SpriteVelocity(s);
}
int32_t (*var_sg_Sprites_SpriteVisibleIndexOfLayer)(sprite s, int32_t id);
int32_t sg_Sprites_SpriteVisibleIndexOfLayer(sprite s, int32_t id)
{
	return var_sg_Sprites_SpriteVisibleIndexOfLayer(s,id);
}
int32_t (*var_sg_Sprites_SpriteVisibleIndexOfLayerNamed)(sprite s, const char *name);
int32_t sg_Sprites_SpriteVisibleIndexOfLayerNamed(sprite s, const char *name)
{
	return var_sg_Sprites_SpriteVisibleIndexOfLayerNamed(s,name);
}
int32_t (*var_sg_Sprites_SpriteVisibleLayer)(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteVisibleLayer(sprite s, int32_t idx)
{
	return var_sg_Sprites_SpriteVisibleLayer(s,idx);
}
int32_t (*var_sg_Sprites_SpriteVisibleLayerCount)(sprite s);
int32_t sg_Sprites_SpriteVisibleLayerCount(sprite s)
{
	return var_sg_Sprites_SpriteVisibleLayerCount(s);
}
void (*var_sg_Sprites_SpriteVisibleLayerIds)(sprite s, int32_t *result, int32_t result_len);
void sg_Sprites_SpriteVisibleLayerIds(sprite s, int32_t *result, int32_t result_len)
{
	var_sg_Sprites_SpriteVisibleLayerIds(s,result,result_len);
}
int32_t (*var_sg_Sprites_SpriteWidth)(sprite s);
int32_t sg_Sprites_SpriteWidth(sprite s)
{
	return var_sg_Sprites_SpriteWidth(s);
}
float (*var_sg_Sprites_SpriteX)(sprite s);
float sg_Sprites_SpriteX(sprite s)
{
	return var_sg_Sprites_SpriteX(s);
}
float (*var_sg_Sprites_SpriteY)(sprite s);
float sg_Sprites_SpriteY(sprite s)
{
	return var_sg_Sprites_SpriteY(s);
}
void (*var_sg_Sprites_UpdateSpriteAnimationPctWithSound)(sprite s, float pct, bool withSound);
void sg_Sprites_UpdateSpriteAnimationPctWithSound(sprite s, float pct, bool withSound)
{
	var_sg_Sprites_UpdateSpriteAnimationPctWithSound(s,pct,withSound != 0);
}
void (*var_sg_Sprites_UpdateSpritePctWithSound)(sprite s, float pct, bool withSound);
void sg_Sprites_UpdateSpritePctWithSound(sprite s, float pct, bool withSound)
{
	var_sg_Sprites_UpdateSpritePctWithSound(s,pct,withSound != 0);
}
vector (*var_sg_Sprites_VectorFromCenterSpriteToPoint)(sprite s, const point2d *pt);
vector sg_Sprites_VectorFromCenterSpriteToPoint(sprite s, const point2d *pt)
{
	return var_sg_Sprites_VectorFromCenterSpriteToPoint(s,pt);
}
vector (*var_sg_Sprites_VectorFromTo)(sprite s1, sprite s2);
vector sg_Sprites_VectorFromTo(sprite s1, sprite s2)
{
	return var_sg_Sprites_VectorFromTo(s1,s2);
}
void (*var_sg_Text_DrawFramerate)(int32_t x, int32_t y, font font);
void sg_Text_DrawFramerate(int32_t x, int32_t y, font font)
{
	var_sg_Text_DrawFramerate(x,y,font);
}
void (*var_sg_Text_DrawFramerateFontNamed)(int32_t x, int32_t y, const char *name);
void sg_Text_DrawFramerateFontNamed(int32_t x, int32_t y, const char *name)
{
	var_sg_Text_DrawFramerateFontNamed(x,y,name);
}
void (*var_sg_Text_DrawFramerateFontNamedSize)(int32_t x, int32_t y, const char *name, int32_t size);
void sg_Text_DrawFramerateFontNamedSize(int32_t x, int32_t y, const char *name, int32_t size)
{
	var_sg_Text_DrawFramerateFontNamedSize(x,y,name,size);
}
void (*var_sg_Text_DrawFramerateWithSimpleFont)(int32_t x, int32_t y);
void sg_Text_DrawFramerateWithSimpleFont(int32_t x, int32_t y)
{
	var_sg_Text_DrawFramerateWithSimpleFont(x,y);
}
void (*var_sg_Text_DrawSimpleText)(const char *theText, color textColor, float x, float y);
void sg_Text_DrawSimpleText(const char *theText, color textColor, float x, float y)
{
	var_sg_Text_DrawSimpleText(theText,textColor,x,y);
}
void (*var_sg_Text_DrawSimpleTextOnBitmap)(bitmap dest, const char *theText, color textColor, float x, float y);
void sg_Text_DrawSimpleTextOnBitmap(bitmap dest, const char *theText, color textColor, float x, float y)
{
	var_sg_Text_DrawSimpleTextOnBitmap(dest,theText,textColor,x,y);
}
void (*var_sg_Text_DrawSimpleTextOnScreen)(const char *theText, color textColor, float x, float y);
void sg_Text_DrawSimpleTextOnScreen(const char *theText, color textColor, float x, float y)
{
	var_sg_Text_DrawSimpleTextOnScreen(theText,textColor,x,y);
}
void (*var_sg_Text_DrawSimpleTextPt)(const char *theText, color textColor, const point2d *pt);
void sg_Text_DrawSimpleTextPt(const char *theText, color textColor, const point2d *pt)
{
	var_sg_Text_DrawSimpleTextPt(theText,textColor,pt);
}
void (*var_sg_Text_DrawText)(const char *theText, color textColor, font theFont, float x, float y);
void sg_Text_DrawText(const char *theText, color textColor, font theFont, float x, float y)
{
	var_sg_Text_DrawText(theText,textColor,theFont,x,y);
}
void (*var_sg_Text_DrawTextAtPoint)(const char *theText, color textColor, font theFont, const point2d *pt);
void sg_Text_DrawTextAtPoint(const char *theText, color textColor, font theFont, const point2d *pt)
{
	var_sg_Text_DrawTextAtPoint(theText,textColor,theFont,pt);
}
void (*var_sg_Text_DrawTextAtPointWithFontNamed)(const char *theText, color textColor, const char *name, const point2d *pt);
void sg_Text_DrawTextAtPointWithFontNamed(const char *theText, color textColor, const char *name, const point2d *pt)
{
	var_sg_Text_DrawTextAtPointWithFontNamed(theText,textColor,name,pt);
}
void (*var_sg_Text_DrawTextAtPointWithFontNamedAndSize)(const char *theText, color textColor, const char *name, int32_t size, const point2d *pt);
void sg_Text_DrawTextAtPointWithFontNamedAndSize(const char *theText, color textColor, const char *name, int32_t size, const point2d *pt)
{
	var_sg_Text_DrawTextAtPointWithFontNamedAndSize(theText,textColor,name,size,pt);
}
void (*var_sg_Text_DrawTextLines)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, float x, float y, int32_t w, int32_t h);
void sg_Text_DrawTextLines(const char *theText, color textColor, color backColor, font theFont, font_alignment align, float x, float y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLines(theText,textColor,backColor,theFont,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextLinesInRect)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRect(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRect(theText,textColor,backColor,theFont,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesInRectOnBitmap)(bitmap dest, const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnBitmap(bitmap dest, const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRectOnBitmap(dest,theText,textColor,backColor,theFont,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed)(bitmap dest, const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed(bitmap dest, const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed(dest,theText,textColor,backColor,name,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize)(bitmap dest, const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize(bitmap dest, const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize(dest,theText,textColor,backColor,name,size,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesInRectOnScreen)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnScreen(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRectOnScreen(theText,textColor,backColor,theFont,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesInRectOnScreenWithFontNamed)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnScreenWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRectOnScreenWithFontNamed(theText,textColor,backColor,name,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize(theText,textColor,backColor,name,size,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesInRectWithFontNamed)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRectWithFontNamed(theText,textColor,backColor,name,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesInRectWithFontNamedAndSize)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectWithFontNamedAndSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect)
{
	var_sg_Text_DrawTextLinesInRectWithFontNamedAndSize(theText,textColor,backColor,name,size,align,withinRect);
}
void (*var_sg_Text_DrawTextLinesOnBitmap)(bitmap dest, const char *theText, color textColor, color backColor, font theFont, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnBitmap(bitmap dest, const char *theText, color textColor, color backColor, font theFont, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLinesOnBitmap(dest,theText,textColor,backColor,theFont,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextLinesOnBitmapWithFontNamed)(bitmap dest, const char *theText, color textColor, color backColor, const char *name, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnBitmapWithFontNamed(bitmap dest, const char *theText, color textColor, color backColor, const char *name, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLinesOnBitmapWithFontNamed(dest,theText,textColor,backColor,name,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize)(bitmap dest, const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize(bitmap dest, const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize(dest,theText,textColor,backColor,name,size,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextLinesOnScreen)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnScreen(const char *theText, color textColor, color backColor, font theFont, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLinesOnScreen(theText,textColor,backColor,theFont,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextLinesOnScreenWithFontNamed)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnScreenWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLinesOnScreenWithFontNamed(theText,textColor,backColor,name,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize(theText,textColor,backColor,name,size,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextLinesWithFontNamed)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, float x, float y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, float x, float y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLinesWithFontNamed(theText,textColor,backColor,name,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextLinesWithFontNamedAndSize)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, float x, float y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesWithFontNamedAndSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, float x, float y, int32_t w, int32_t h)
{
	var_sg_Text_DrawTextLinesWithFontNamedAndSize(theText,textColor,backColor,name,size,align,x,y,w,h);
}
void (*var_sg_Text_DrawTextOnBitmap)(bitmap dest, const char *theText, color textColor, font theFont, int32_t x, int32_t y);
void sg_Text_DrawTextOnBitmap(bitmap dest, const char *theText, color textColor, font theFont, int32_t x, int32_t y)
{
	var_sg_Text_DrawTextOnBitmap(dest,theText,textColor,theFont,x,y);
}
void (*var_sg_Text_DrawTextOnBitmapAtPoint)(bitmap dest, const char *theText, color textColor, font theFont, const point2d *pt);
void sg_Text_DrawTextOnBitmapAtPoint(bitmap dest, const char *theText, color textColor, font theFont, const point2d *pt)
{
	var_sg_Text_DrawTextOnBitmapAtPoint(dest,theText,textColor,theFont,pt);
}
void (*var_sg_Text_DrawTextOnBitmapAtPointWithFontNamed)(bitmap dest, const char *theText, color textColor, const char *name, const point2d *pt);
void sg_Text_DrawTextOnBitmapAtPointWithFontNamed(bitmap dest, const char *theText, color textColor, const char *name, const point2d *pt)
{
	var_sg_Text_DrawTextOnBitmapAtPointWithFontNamed(dest,theText,textColor,name,pt);
}
void (*var_sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize)(bitmap dest, const char *theText, color textColor, const char *name, int32_t size, const point2d *pt);
void sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize(bitmap dest, const char *theText, color textColor, const char *name, int32_t size, const point2d *pt)
{
	var_sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize(dest,theText,textColor,name,size,pt);
}
void (*var_sg_Text_DrawTextOnBitmapWithFontNamed)(bitmap dest, const char *theText, color textColor, const char *name, int32_t x, int32_t y);
void sg_Text_DrawTextOnBitmapWithFontNamed(bitmap dest, const char *theText, color textColor, const char *name, int32_t x, int32_t y)
{
	var_sg_Text_DrawTextOnBitmapWithFontNamed(dest,theText,textColor,name,x,y);
}
void (*var_sg_Text_DrawTextOnBitmapWithFontNamedAndSize)(bitmap dest, const char *theText, color textColor, const char *name, int32_t size, int32_t x, int32_t y);
void sg_Text_DrawTextOnBitmapWithFontNamedAndSize(bitmap dest, const char *theText, color textColor, const char *name, int32_t size, int32_t x, int32_t y)
{
	var_sg_Text_DrawTextOnBitmapWithFontNamedAndSize(dest,theText,textColor,name,size,x,y);
}
void (*var_sg_Text_DrawTextOnScreen)(const char *theText, color textColor, font theFont, int32_t x, int32_t y);
void sg_Text_DrawTextOnScreen(const char *theText, color textColor, font theFont, int32_t x, int32_t y)
{
	var_sg_Text_DrawTextOnScreen(theText,textColor,theFont,x,y);
}
void (*var_sg_Text_DrawTextOnScreenAtPoint)(const char *theText, color textColor, font theFont, const point2d *pt);
void sg_Text_DrawTextOnScreenAtPoint(const char *theText, color textColor, font theFont, const point2d *pt)
{
	var_sg_Text_DrawTextOnScreenAtPoint(theText,textColor,theFont,pt);
}
void (*var_sg_Text_DrawTextOnScreenAtPointWithFontNamed)(const char *theText, color textColor, const char *name, const point2d *pt);
void sg_Text_DrawTextOnScreenAtPointWithFontNamed(const char *theText, color textColor, const char *name, const point2d *pt)
{
	var_sg_Text_DrawTextOnScreenAtPointWithFontNamed(theText,textColor,name,pt);
}
void (*var_sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize)(const char *theText, color textColor, const char *name, int32_t size, const point2d *pt);
void sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize(const char *theText, color textColor, const char *name, int32_t size, const point2d *pt)
{
	var_sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize(theText,textColor,name,size,pt);
}
void (*var_sg_Text_DrawTextOnScreenWithFontNamed)(const char *theText, color textColor, const char *name, int32_t x, int32_t y);
void sg_Text_DrawTextOnScreenWithFontNamed(const char *theText, color textColor, const char *name, int32_t x, int32_t y)
{
	var_sg_Text_DrawTextOnScreenWithFontNamed(theText,textColor,name,x,y);
}
void (*var_sg_Text_DrawTextOnScreenWithFontNamedAndSize)(const char *theText, color textColor, const char *name, int32_t size, int32_t x, int32_t y);
void sg_Text_DrawTextOnScreenWithFontNamedAndSize(const char *theText, color textColor, const char *name, int32_t size, int32_t x, int32_t y)
{
	var_sg_Text_DrawTextOnScreenWithFontNamedAndSize(theText,textColor,name,size,x,y);
}
bitmap (*var_sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize)(font font, const char *str, color clrFg, color backgroundColor);
bitmap sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize(font font, const char *str, color clrFg, color backgroundColor)
{
	return var_sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize(font,str,clrFg,backgroundColor);
}
void (*var_sg_Text_DrawTextWithFontNamed)(const char *theText, color textColor, const char *name, float x, float y);
void sg_Text_DrawTextWithFontNamed(const char *theText, color textColor, const char *name, float x, float y)
{
	var_sg_Text_DrawTextWithFontNamed(theText,textColor,name,x,y);
}
void (*var_sg_Text_DrawTextWithFontNamedSize)(const char *theText, color textColor, const char *name, int32_t size, float x, float y);
void sg_Text_DrawTextWithFontNamedSize(const char *theText, color textColor, const char *name, int32_t size, float x, float y)
{
	var_sg_Text_DrawTextWithFontNamedSize(theText,textColor,name,size,x,y);
}
font_style (*var_sg_Text_FontFontStyle)(font font);
font_style sg_Text_FontFontStyle(font font)
{
	return var_sg_Text_FontFontStyle(font);
}
void (*var_sg_Text_FontNameFor)(const char *fontName, int32_t size, char *result);
void sg_Text_FontNameFor(const char *fontName, int32_t size, char *result)
{
	var_sg_Text_FontNameFor(fontName,size,result);
}
font (*var_sg_Text_FontNamed)(const char *name);
font sg_Text_FontNamed(const char *name)
{
	return var_sg_Text_FontNamed(name);
}
font (*var_sg_Text_FontNamedWithSize)(const char *name, int32_t size);
font sg_Text_FontNamedWithSize(const char *name, int32_t size)
{
	return var_sg_Text_FontNamedWithSize(name,size);
}
void (*var_sg_Text_FontSetStyle)(font font, font_style value);
void sg_Text_FontSetStyle(font font, font_style value)
{
	var_sg_Text_FontSetStyle(font,value);
}
void (*var_sg_Text_FreeFont)(font *fontToFree);
void sg_Text_FreeFont(font *fontToFree)
{
	var_sg_Text_FreeFont(fontToFree);
}
bool (*var_sg_Text_HasFont)(const char *name);
bool sg_Text_HasFont(const char *name)
{
	return var_sg_Text_HasFont(name);
}
font (*var_sg_Text_LoadFont)(const char *fontName, int32_t size);
font sg_Text_LoadFont(const char *fontName, int32_t size)
{
	return var_sg_Text_LoadFont(fontName,size);
}
font (*var_sg_Text_LoadFontNamed)(const char *name, const char *filename, int32_t size);
font sg_Text_LoadFontNamed(const char *name, const char *filename, int32_t size)
{
	return var_sg_Text_LoadFontNamed(name,filename,size);
}
void (*var_sg_Text_ReleaseAllFonts)();
void sg_Text_ReleaseAllFonts()
{
	var_sg_Text_ReleaseAllFonts();
}
void (*var_sg_Text_ReleaseFont)(const char *name);
void sg_Text_ReleaseFont(const char *name)
{
	var_sg_Text_ReleaseFont(name);
}
font_alignment (*var_sg_Text_TextAlignmentFrom)(const char *str);
font_alignment sg_Text_TextAlignmentFrom(const char *str)
{
	return var_sg_Text_TextAlignmentFrom(str);
}
int32_t (*var_sg_Text_TextHeight)(font theFont, const char *theText);
int32_t sg_Text_TextHeight(font theFont, const char *theText)
{
	return var_sg_Text_TextHeight(theFont,theText);
}
int32_t (*var_sg_Text_TextWidth)(font theFont, const char *theText);
int32_t sg_Text_TextWidth(font theFont, const char *theText)
{
	return var_sg_Text_TextWidth(theFont,theText);
}
timer (*var_sg_Timers_CreateTimer)();
timer sg_Timers_CreateTimer()
{
	return var_sg_Timers_CreateTimer();
}
timer (*var_sg_Timers_CreateTimerNamed)(const char *name);
timer sg_Timers_CreateTimerNamed(const char *name)
{
	return var_sg_Timers_CreateTimerNamed(name);
}
void (*var_sg_Timers_FreeTimer)(timer *toFree);
void sg_Timers_FreeTimer(timer *toFree)
{
	var_sg_Timers_FreeTimer(toFree);
}
void (*var_sg_Timers_PauseTimer)(timer toPause);
void sg_Timers_PauseTimer(timer toPause)
{
	var_sg_Timers_PauseTimer(toPause);
}
void (*var_sg_Timers_ReleaseAllTimers)();
void sg_Timers_ReleaseAllTimers()
{
	var_sg_Timers_ReleaseAllTimers();
}
void (*var_sg_Timers_ReleaseTimer)(const char *name);
void sg_Timers_ReleaseTimer(const char *name)
{
	var_sg_Timers_ReleaseTimer(name);
}
void (*var_sg_Timers_ResetTimer)(timer tmr);
void sg_Timers_ResetTimer(timer tmr)
{
	var_sg_Timers_ResetTimer(tmr);
}
void (*var_sg_Timers_ResumeTimer)(timer toUnpause);
void sg_Timers_ResumeTimer(timer toUnpause)
{
	var_sg_Timers_ResumeTimer(toUnpause);
}
void (*var_sg_Timers_StartTimer)(timer toStart);
void sg_Timers_StartTimer(timer toStart)
{
	var_sg_Timers_StartTimer(toStart);
}
void (*var_sg_Timers_StopTimer)(timer toStop);
void sg_Timers_StopTimer(timer toStop)
{
	var_sg_Timers_StopTimer(toStop);
}
timer (*var_sg_Timers_TimerNamed)(const char *name);
timer sg_Timers_TimerNamed(const char *name)
{
	return var_sg_Timers_TimerNamed(name);
}
uint32_t (*var_sg_Timers_TimerTicks)(timer toGet);
uint32_t sg_Timers_TimerTicks(timer toGet)
{
	return var_sg_Timers_TimerTicks(toGet);
}
void (*var_sg_UserInterface_ActivatePanel)(panel p);
void sg_UserInterface_ActivatePanel(panel p)
{
	var_sg_UserInterface_ActivatePanel(p);
}
region (*var_sg_UserInterface_ActiveRadioButton)(guiradio_group grp);
region sg_UserInterface_ActiveRadioButton(guiradio_group grp)
{
	return var_sg_UserInterface_ActiveRadioButton(grp);
}
int32_t (*var_sg_UserInterface_ActiveRadioButtonIndex)(guiradio_group RadioGroup);
int32_t sg_UserInterface_ActiveRadioButtonIndex(guiradio_group RadioGroup)
{
	return var_sg_UserInterface_ActiveRadioButtonIndex(RadioGroup);
}
int32_t (*var_sg_UserInterface_ActiveRadioButtonIndexFromID)(const char *id);
int32_t sg_UserInterface_ActiveRadioButtonIndexFromID(const char *id)
{
	return var_sg_UserInterface_ActiveRadioButtonIndexFromID(id);
}
int32_t (*var_sg_UserInterface_ActiveRadioButtonIndexOnPanel)(panel pnl, const char *id);
int32_t sg_UserInterface_ActiveRadioButtonIndexOnPanel(panel pnl, const char *id)
{
	return var_sg_UserInterface_ActiveRadioButtonIndexOnPanel(pnl,id);
}
region (*var_sg_UserInterface_ActiveRadioButtonOnPanelWithId)(panel pnl, const char *id);
region sg_UserInterface_ActiveRadioButtonOnPanelWithId(panel pnl, const char *id)
{
	return var_sg_UserInterface_ActiveRadioButtonOnPanelWithId(pnl,id);
}
region (*var_sg_UserInterface_ActiveRadioButtonWithID)(const char *id);
region sg_UserInterface_ActiveRadioButtonWithID(const char *id)
{
	return var_sg_UserInterface_ActiveRadioButtonWithID(id);
}
panel (*var_sg_UserInterface_ActiveTextBoxParent)();
panel sg_UserInterface_ActiveTextBoxParent()
{
	return var_sg_UserInterface_ActiveTextBoxParent();
}
int32_t (*var_sg_UserInterface_ActiveTextIndex)();
int32_t sg_UserInterface_ActiveTextIndex()
{
	return var_sg_UserInterface_ActiveTextIndex();
}
void (*var_sg_UserInterface_AddItemByBitmap)(guilist lst, bitmap img);
void sg_UserInterface_AddItemByBitmap(guilist lst, bitmap img)
{
	var_sg_UserInterface_AddItemByBitmap(lst,img);
}
void (*var_sg_UserInterface_AddItemByText)(guilist lst, const char *text);
void sg_UserInterface_AddItemByText(guilist lst, const char *text)
{
	var_sg_UserInterface_AddItemByText(lst,text);
}
void (*var_sg_UserInterface_AddItemOnPanelWithIdByText)(panel pnl, const char *id, const char *text);
void sg_UserInterface_AddItemOnPanelWithIdByText(panel pnl, const char *id, const char *text)
{
	var_sg_UserInterface_AddItemOnPanelWithIdByText(pnl,id,text);
}
void (*var_sg_UserInterface_AddItemWithIdByBitmap)(const char *id, bitmap img);
void sg_UserInterface_AddItemWithIdByBitmap(const char *id, bitmap img)
{
	var_sg_UserInterface_AddItemWithIdByBitmap(id,img);
}
void (*var_sg_UserInterface_AddItemWithIdByText)(const char *id, const char *text);
void sg_UserInterface_AddItemWithIdByText(const char *id, const char *text)
{
	var_sg_UserInterface_AddItemWithIdByText(id,text);
}
bool (*var_sg_UserInterface_ButtonClicked)(region r);
bool sg_UserInterface_ButtonClicked(region r)
{
	return var_sg_UserInterface_ButtonClicked(r);
}
bool (*var_sg_UserInterface_ButtonNamedClicked)(const char *name);
bool sg_UserInterface_ButtonNamedClicked(const char *name)
{
	return var_sg_UserInterface_ButtonNamedClicked(name);
}
void (*var_sg_UserInterface_CheckBoxSetStateWithId)(const char *id, bool val);
void sg_UserInterface_CheckBoxSetStateWithId(const char *id, bool val)
{
	var_sg_UserInterface_CheckBoxSetStateWithId(id,val != 0);
}
guicheckbox (*var_sg_UserInterface_CheckboxFromRegion)(region r);
guicheckbox sg_UserInterface_CheckboxFromRegion(region r)
{
	return var_sg_UserInterface_CheckboxFromRegion(r);
}
void (*var_sg_UserInterface_CheckboxSetState)(guicheckbox chk, bool val);
void sg_UserInterface_CheckboxSetState(guicheckbox chk, bool val)
{
	var_sg_UserInterface_CheckboxSetState(chk,val != 0);
}
void (*var_sg_UserInterface_CheckboxSetStateFromRegion)(region r, bool val);
void sg_UserInterface_CheckboxSetStateFromRegion(region r, bool val)
{
	var_sg_UserInterface_CheckboxSetStateFromRegion(r,val != 0);
}
void (*var_sg_UserInterface_CheckboxSetStateOnPanel)(panel pnl, const char *id, bool val);
void sg_UserInterface_CheckboxSetStateOnPanel(panel pnl, const char *id, bool val)
{
	var_sg_UserInterface_CheckboxSetStateOnPanel(pnl,id,val != 0);
}
bool (*var_sg_UserInterface_CheckboxState)(const char *s);
bool sg_UserInterface_CheckboxState(const char *s)
{
	return var_sg_UserInterface_CheckboxState(s);
}
bool (*var_sg_UserInterface_CheckboxStateFromCheckbox)(guicheckbox chk);
bool sg_UserInterface_CheckboxStateFromCheckbox(guicheckbox chk)
{
	return var_sg_UserInterface_CheckboxStateFromCheckbox(chk);
}
bool (*var_sg_UserInterface_CheckboxStateFromRegion)(region r);
bool sg_UserInterface_CheckboxStateFromRegion(region r)
{
	return var_sg_UserInterface_CheckboxStateFromRegion(r);
}
bool (*var_sg_UserInterface_CheckboxStateOnPanel)(panel p, const char *s);
bool sg_UserInterface_CheckboxStateOnPanel(panel p, const char *s)
{
	return var_sg_UserInterface_CheckboxStateOnPanel(p,s);
}
void (*var_sg_UserInterface_DeactivatePanel)(panel p);
void sg_UserInterface_DeactivatePanel(panel p)
{
	var_sg_UserInterface_DeactivatePanel(p);
}
void (*var_sg_UserInterface_DeactivateTextBox)();
void sg_UserInterface_DeactivateTextBox()
{
	var_sg_UserInterface_DeactivateTextBox();
}
bool (*var_sg_UserInterface_DialogCancelled)();
bool sg_UserInterface_DialogCancelled()
{
	return var_sg_UserInterface_DialogCancelled();
}
bool (*var_sg_UserInterface_DialogComplete)();
bool sg_UserInterface_DialogComplete()
{
	return var_sg_UserInterface_DialogComplete();
}
void (*var_sg_UserInterface_DialogPath)(char *result);
void sg_UserInterface_DialogPath(char *result)
{
	var_sg_UserInterface_DialogPath(result);
}
void (*var_sg_UserInterface_DialogSetPath)(const char *fullname);
void sg_UserInterface_DialogSetPath(const char *fullname)
{
	var_sg_UserInterface_DialogSetPath(fullname);
}
void (*var_sg_UserInterface_DrawGUIAsVectors)(bool b);
void sg_UserInterface_DrawGUIAsVectors(bool b)
{
	var_sg_UserInterface_DrawGUIAsVectors(b != 0);
}
void (*var_sg_UserInterface_DrawInterface)();
void sg_UserInterface_DrawInterface()
{
	var_sg_UserInterface_DrawInterface();
}
void (*var_sg_UserInterface_FinishReadingText)();
void sg_UserInterface_FinishReadingText()
{
	var_sg_UserInterface_FinishReadingText();
}
void (*var_sg_UserInterface_FreePanel)(panel *pnl);
void sg_UserInterface_FreePanel(panel *pnl)
{
	var_sg_UserInterface_FreePanel(pnl);
}
bool (*var_sg_UserInterface_GUIClicked)();
bool sg_UserInterface_GUIClicked()
{
	return var_sg_UserInterface_GUIClicked();
}
void (*var_sg_UserInterface_GUISetActiveTextbox)(guitextbox t);
void sg_UserInterface_GUISetActiveTextbox(guitextbox t)
{
	var_sg_UserInterface_GUISetActiveTextbox(t);
}
void (*var_sg_UserInterface_GUISetActiveTextboxFromRegion)(region r);
void sg_UserInterface_GUISetActiveTextboxFromRegion(region r)
{
	var_sg_UserInterface_GUISetActiveTextboxFromRegion(r);
}
void (*var_sg_UserInterface_GUISetActiveTextboxNamed)(const char *name);
void sg_UserInterface_GUISetActiveTextboxNamed(const char *name)
{
	var_sg_UserInterface_GUISetActiveTextboxNamed(name);
}
void (*var_sg_UserInterface_GUISetBackgroundColor)(color c);
void sg_UserInterface_GUISetBackgroundColor(color c)
{
	var_sg_UserInterface_GUISetBackgroundColor(c);
}
void (*var_sg_UserInterface_GUISetBackgroundColorInactive)(color c);
void sg_UserInterface_GUISetBackgroundColorInactive(color c)
{
	var_sg_UserInterface_GUISetBackgroundColorInactive(c);
}
void (*var_sg_UserInterface_GUISetForegroundColor)(color c);
void sg_UserInterface_GUISetForegroundColor(color c)
{
	var_sg_UserInterface_GUISetForegroundColor(c);
}
void (*var_sg_UserInterface_GUISetForegroundColorInactive)(color c);
void sg_UserInterface_GUISetForegroundColorInactive(color c)
{
	var_sg_UserInterface_GUISetForegroundColorInactive(c);
}
guitextbox (*var_sg_UserInterface_GUITextBoxOfTextEntered)();
guitextbox sg_UserInterface_GUITextBoxOfTextEntered()
{
	return var_sg_UserInterface_GUITextBoxOfTextEntered();
}
bool (*var_sg_UserInterface_GUITextEntryComplete)();
bool sg_UserInterface_GUITextEntryComplete()
{
	return var_sg_UserInterface_GUITextEntryComplete();
}
region (*var_sg_UserInterface_GlobalRegionWithID)(const char *ID);
region sg_UserInterface_GlobalRegionWithID(const char *ID)
{
	return var_sg_UserInterface_GlobalRegionWithID(ID);
}
bool (*var_sg_UserInterface_HasPanel)(const char *name);
bool sg_UserInterface_HasPanel(const char *name)
{
	return var_sg_UserInterface_HasPanel(name);
}
void (*var_sg_UserInterface_HidePanel)(panel p);
void sg_UserInterface_HidePanel(panel p)
{
	var_sg_UserInterface_HidePanel(p);
}
void (*var_sg_UserInterface_HidePanelNamed)(const char *name);
void sg_UserInterface_HidePanelNamed(const char *name)
{
	var_sg_UserInterface_HidePanelNamed(name);
}
int32_t (*var_sg_UserInterface_IndexOfLastUpdatedTextBox)();
int32_t sg_UserInterface_IndexOfLastUpdatedTextBox()
{
	return var_sg_UserInterface_IndexOfLastUpdatedTextBox();
}
bool (*var_sg_UserInterface_IsDragging)();
bool sg_UserInterface_IsDragging()
{
	return var_sg_UserInterface_IsDragging();
}
font_alignment (*var_sg_UserInterface_LabelAlignementFromRegion)(region r);
font_alignment sg_UserInterface_LabelAlignementFromRegion(region r)
{
	return var_sg_UserInterface_LabelAlignementFromRegion(r);
}
font_alignment (*var_sg_UserInterface_LabelAlignment)(guilabel lbl);
font_alignment sg_UserInterface_LabelAlignment(guilabel lbl)
{
	return var_sg_UserInterface_LabelAlignment(lbl);
}
font (*var_sg_UserInterface_LabelFont)(guilabel l);
font sg_UserInterface_LabelFont(guilabel l)
{
	return var_sg_UserInterface_LabelFont(l);
}
guilabel (*var_sg_UserInterface_LabelFromRegion)(region r);
guilabel sg_UserInterface_LabelFromRegion(region r)
{
	return var_sg_UserInterface_LabelFromRegion(r);
}
font (*var_sg_UserInterface_LabelFromRegionGetFont)(region r);
font sg_UserInterface_LabelFromRegionGetFont(region r)
{
	return var_sg_UserInterface_LabelFromRegionGetFont(r);
}
void (*var_sg_UserInterface_LabelFromRegionSetText)(region r, const char *newString);
void sg_UserInterface_LabelFromRegionSetText(region r, const char *newString)
{
	var_sg_UserInterface_LabelFromRegionSetText(r,newString);
}
void (*var_sg_UserInterface_LabelOnPanelWithIdSetText)(panel pnl, const char *id, const char *newString);
void sg_UserInterface_LabelOnPanelWithIdSetText(panel pnl, const char *id, const char *newString)
{
	var_sg_UserInterface_LabelOnPanelWithIdSetText(pnl,id,newString);
}
void (*var_sg_UserInterface_LabelSetFont)(guilabel l, const char *s);
void sg_UserInterface_LabelSetFont(guilabel l, const char *s)
{
	var_sg_UserInterface_LabelSetFont(l,s);
}
void (*var_sg_UserInterface_LabelSetText)(guilabel lb, const char *newString);
void sg_UserInterface_LabelSetText(guilabel lb, const char *newString)
{
	var_sg_UserInterface_LabelSetText(lb,newString);
}
void (*var_sg_UserInterface_LabelText)(guilabel lb, char *result);
void sg_UserInterface_LabelText(guilabel lb, char *result)
{
	var_sg_UserInterface_LabelText(lb,result);
}
void (*var_sg_UserInterface_LabelTextFromRegion)(region r, char *result);
void sg_UserInterface_LabelTextFromRegion(region r, char *result)
{
	var_sg_UserInterface_LabelTextFromRegion(r,result);
}
void (*var_sg_UserInterface_LabelTextOnPanelWithId)(panel pnl, const char *id, char *result);
void sg_UserInterface_LabelTextOnPanelWithId(panel pnl, const char *id, char *result)
{
	var_sg_UserInterface_LabelTextOnPanelWithId(pnl,id,result);
}
void (*var_sg_UserInterface_LabelTextWithId)(const char *id, char *result);
void sg_UserInterface_LabelTextWithId(const char *id, char *result)
{
	var_sg_UserInterface_LabelTextWithId(id,result);
}
void (*var_sg_UserInterface_LabelWithIdSetText)(const char *id, const char *newString);
void sg_UserInterface_LabelWithIdSetText(const char *id, const char *newString)
{
	var_sg_UserInterface_LabelWithIdSetText(id,newString);
}
int32_t (*var_sg_UserInterface_ListActiveItemIndex)(guilist lst);
int32_t sg_UserInterface_ListActiveItemIndex(guilist lst)
{
	return var_sg_UserInterface_ListActiveItemIndex(lst);
}
int32_t (*var_sg_UserInterface_ListActiveItemIndexFromRegion)(region r);
int32_t sg_UserInterface_ListActiveItemIndexFromRegion(region r)
{
	return var_sg_UserInterface_ListActiveItemIndexFromRegion(r);
}
int32_t (*var_sg_UserInterface_ListActiveItemIndexOnPanelWithId)(panel pnl, const char *id);
int32_t sg_UserInterface_ListActiveItemIndexOnPanelWithId(panel pnl, const char *id)
{
	return var_sg_UserInterface_ListActiveItemIndexOnPanelWithId(pnl,id);
}
int32_t (*var_sg_UserInterface_ListActiveItemIndexWithId)(const char *id);
int32_t sg_UserInterface_ListActiveItemIndexWithId(const char *id)
{
	return var_sg_UserInterface_ListActiveItemIndexWithId(id);
}
void (*var_sg_UserInterface_ListActiveItemText)(guilist list, char *result);
void sg_UserInterface_ListActiveItemText(guilist list, char *result)
{
	var_sg_UserInterface_ListActiveItemText(list,result);
}
void (*var_sg_UserInterface_ListActiveItemTextFromRegion)(region r, char *result);
void sg_UserInterface_ListActiveItemTextFromRegion(region r, char *result)
{
	var_sg_UserInterface_ListActiveItemTextFromRegion(r,result);
}
void (*var_sg_UserInterface_ListActiveItemTextOnPanelWithId)(panel pnl, const char *ID, char *result);
void sg_UserInterface_ListActiveItemTextOnPanelWithId(panel pnl, const char *ID, char *result)
{
	var_sg_UserInterface_ListActiveItemTextOnPanelWithId(pnl,ID,result);
}
void (*var_sg_UserInterface_ListAddBitmapAndTextItem)(guilist lst, bitmap img, const char *text);
void sg_UserInterface_ListAddBitmapAndTextItem(guilist lst, bitmap img, const char *text)
{
	var_sg_UserInterface_ListAddBitmapAndTextItem(lst,img,text);
}
void (*var_sg_UserInterface_ListAddBitmapAndTextItemFromRegion)(region r, bitmap img, const char *text);
void sg_UserInterface_ListAddBitmapAndTextItemFromRegion(region r, bitmap img, const char *text)
{
	var_sg_UserInterface_ListAddBitmapAndTextItemFromRegion(r,img,text);
}
void (*var_sg_UserInterface_ListAddItemBitmap)(panel pnl, const char *id, bitmap img);
void sg_UserInterface_ListAddItemBitmap(panel pnl, const char *id, bitmap img)
{
	var_sg_UserInterface_ListAddItemBitmap(pnl,id,img);
}
void (*var_sg_UserInterface_ListAddItemByBitmapFromRegion)(region r, bitmap img);
void sg_UserInterface_ListAddItemByBitmapFromRegion(region r, bitmap img)
{
	var_sg_UserInterface_ListAddItemByBitmapFromRegion(r,img);
}
void (*var_sg_UserInterface_ListAddItemByTextFromRegion)(region r, const char *text);
void sg_UserInterface_ListAddItemByTextFromRegion(region r, const char *text)
{
	var_sg_UserInterface_ListAddItemByTextFromRegion(r,text);
}
void (*var_sg_UserInterface_ListAddItemWithCell)(guilist lst, const bitmap_cell *img);
void sg_UserInterface_ListAddItemWithCell(guilist lst, const bitmap_cell *img)
{
	var_sg_UserInterface_ListAddItemWithCell(lst,img);
}
void (*var_sg_UserInterface_ListAddItemWithCellAndText)(guilist lst, const bitmap_cell *img, const char *text);
void sg_UserInterface_ListAddItemWithCellAndText(guilist lst, const bitmap_cell *img, const char *text)
{
	var_sg_UserInterface_ListAddItemWithCellAndText(lst,img,text);
}
void (*var_sg_UserInterface_ListAddItemWithCellAndTextFromRegion)(region r, const bitmap_cell *img, const char *text);
void sg_UserInterface_ListAddItemWithCellAndTextFromRegion(region r, const bitmap_cell *img, const char *text)
{
	var_sg_UserInterface_ListAddItemWithCellAndTextFromRegion(r,img,text);
}
void (*var_sg_UserInterface_ListAddItemWithCellFromRegion)(region r, const bitmap_cell *img);
void sg_UserInterface_ListAddItemWithCellFromRegion(region r, const bitmap_cell *img)
{
	var_sg_UserInterface_ListAddItemWithCellFromRegion(r,img);
}
int32_t (*var_sg_UserInterface_ListBitmapCellIndex)(guilist lst, const bitmap_cell *img);
int32_t sg_UserInterface_ListBitmapCellIndex(guilist lst, const bitmap_cell *img)
{
	return var_sg_UserInterface_ListBitmapCellIndex(lst,img);
}
int32_t (*var_sg_UserInterface_ListBitmapIndex)(guilist lst, bitmap img);
int32_t sg_UserInterface_ListBitmapIndex(guilist lst, bitmap img)
{
	return var_sg_UserInterface_ListBitmapIndex(lst,img);
}
void (*var_sg_UserInterface_ListClearItems)(guilist lst);
void sg_UserInterface_ListClearItems(guilist lst)
{
	var_sg_UserInterface_ListClearItems(lst);
}
void (*var_sg_UserInterface_ListClearItemsFromRegion)(region r);
void sg_UserInterface_ListClearItemsFromRegion(region r)
{
	var_sg_UserInterface_ListClearItemsFromRegion(r);
}
void (*var_sg_UserInterface_ListClearItemsGivenPanelWithId)(panel pnl, const char *id);
void sg_UserInterface_ListClearItemsGivenPanelWithId(panel pnl, const char *id)
{
	var_sg_UserInterface_ListClearItemsGivenPanelWithId(pnl,id);
}
font (*var_sg_UserInterface_ListFont)(guilist lst);
font sg_UserInterface_ListFont(guilist lst)
{
	return var_sg_UserInterface_ListFont(lst);
}
font_alignment (*var_sg_UserInterface_ListFontAlignment)(guilist lst);
font_alignment sg_UserInterface_ListFontAlignment(guilist lst)
{
	return var_sg_UserInterface_ListFontAlignment(lst);
}
font_alignment (*var_sg_UserInterface_ListFontAlignmentFromRegion)(region r);
font_alignment sg_UserInterface_ListFontAlignmentFromRegion(region r)
{
	return var_sg_UserInterface_ListFontAlignmentFromRegion(r);
}
font (*var_sg_UserInterface_ListFontFromRegion)(region r);
font sg_UserInterface_ListFontFromRegion(region r)
{
	return var_sg_UserInterface_ListFontFromRegion(r);
}
guilist (*var_sg_UserInterface_ListFromRegion)(region r);
guilist sg_UserInterface_ListFromRegion(region r)
{
	return var_sg_UserInterface_ListFromRegion(r);
}
int32_t (*var_sg_UserInterface_ListItemCount)(guilist lst);
int32_t sg_UserInterface_ListItemCount(guilist lst)
{
	return var_sg_UserInterface_ListItemCount(lst);
}
int32_t (*var_sg_UserInterface_ListItemCountFromRegion)(region r);
int32_t sg_UserInterface_ListItemCountFromRegion(region r)
{
	return var_sg_UserInterface_ListItemCountFromRegion(r);
}
int32_t (*var_sg_UserInterface_ListItemCountOnPanelWithId)(panel pnl, const char *id);
int32_t sg_UserInterface_ListItemCountOnPanelWithId(panel pnl, const char *id)
{
	return var_sg_UserInterface_ListItemCountOnPanelWithId(pnl,id);
}
int32_t (*var_sg_UserInterface_ListItemCountWithId)(const char *id);
int32_t sg_UserInterface_ListItemCountWithId(const char *id)
{
	return var_sg_UserInterface_ListItemCountWithId(id);
}
void (*var_sg_UserInterface_ListItemText)(guilist lst, int32_t idx, char *result);
void sg_UserInterface_ListItemText(guilist lst, int32_t idx, char *result)
{
	var_sg_UserInterface_ListItemText(lst,idx,result);
}
void (*var_sg_UserInterface_ListItemTextFromId)(const char *id, int32_t idx, char *result);
void sg_UserInterface_ListItemTextFromId(const char *id, int32_t idx, char *result)
{
	var_sg_UserInterface_ListItemTextFromId(id,idx,result);
}
void (*var_sg_UserInterface_ListItemTextFromRegion)(region r, int32_t idx, char *result);
void sg_UserInterface_ListItemTextFromRegion(region r, int32_t idx, char *result)
{
	var_sg_UserInterface_ListItemTextFromRegion(r,idx,result);
}
void (*var_sg_UserInterface_ListItemTextOnPanelWithId)(panel pnl, const char *id, int32_t idx, char *result);
void sg_UserInterface_ListItemTextOnPanelWithId(panel pnl, const char *id, int32_t idx, char *result)
{
	var_sg_UserInterface_ListItemTextOnPanelWithId(pnl,id,idx,result);
}
int32_t (*var_sg_UserInterface_ListLargestStartIndex)(guilist lst);
int32_t sg_UserInterface_ListLargestStartIndex(guilist lst)
{
	return var_sg_UserInterface_ListLargestStartIndex(lst);
}
void (*var_sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem)(panel pnl, const char *id, bitmap img, const char *text);
void sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem(panel pnl, const char *id, bitmap img, const char *text)
{
	var_sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem(pnl,id,img,text);
}
void (*var_sg_UserInterface_ListOnPanelWithIdAddItemWithCell)(panel pnl, const char *id, const bitmap_cell *img);
void sg_UserInterface_ListOnPanelWithIdAddItemWithCell(panel pnl, const char *id, const bitmap_cell *img)
{
	var_sg_UserInterface_ListOnPanelWithIdAddItemWithCell(pnl,id,img);
}
void (*var_sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText)(panel pnl, const char *id, const bitmap_cell *img, const char *text);
void sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText(panel pnl, const char *id, const bitmap_cell *img, const char *text)
{
	var_sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText(pnl,id,img,text);
}
void (*var_sg_UserInterface_ListRemoveActiveItemFromId)(const char *id);
void sg_UserInterface_ListRemoveActiveItemFromId(const char *id)
{
	var_sg_UserInterface_ListRemoveActiveItemFromId(id);
}
void (*var_sg_UserInterface_ListRemoveActiveItemFromRegion)(region r);
void sg_UserInterface_ListRemoveActiveItemFromRegion(region r)
{
	var_sg_UserInterface_ListRemoveActiveItemFromRegion(r);
}
void (*var_sg_UserInterface_ListRemoveActiveItemOnPanelWithId)(panel pnl, const char *id);
void sg_UserInterface_ListRemoveActiveItemOnPanelWithId(panel pnl, const char *id)
{
	var_sg_UserInterface_ListRemoveActiveItemOnPanelWithId(pnl,id);
}
void (*var_sg_UserInterface_ListRemoveItem)(guilist lst, int32_t idx);
void sg_UserInterface_ListRemoveItem(guilist lst, int32_t idx)
{
	var_sg_UserInterface_ListRemoveItem(lst,idx);
}
void (*var_sg_UserInterface_ListRemoveItemFromWithId)(const char *id, int32_t idx);
void sg_UserInterface_ListRemoveItemFromWithId(const char *id, int32_t idx)
{
	var_sg_UserInterface_ListRemoveItemFromWithId(id,idx);
}
void (*var_sg_UserInterface_ListRemoveItemOnPanelWithId)(panel pnl, const char *id, int32_t idx);
void sg_UserInterface_ListRemoveItemOnPanelWithId(panel pnl, const char *id, int32_t idx)
{
	var_sg_UserInterface_ListRemoveItemOnPanelWithId(pnl,id,idx);
}
int32_t (*var_sg_UserInterface_ListScrollIncrement)(guilist lst);
int32_t sg_UserInterface_ListScrollIncrement(guilist lst)
{
	return var_sg_UserInterface_ListScrollIncrement(lst);
}
void (*var_sg_UserInterface_ListSet)(panel pnl, const char *id, int32_t idx);
void sg_UserInterface_ListSet(panel pnl, const char *id, int32_t idx)
{
	var_sg_UserInterface_ListSet(pnl,id,idx);
}
void (*var_sg_UserInterface_ListSetActiveItemIndex)(guilist lst, int32_t idx);
void sg_UserInterface_ListSetActiveItemIndex(guilist lst, int32_t idx)
{
	var_sg_UserInterface_ListSetActiveItemIndex(lst,idx);
}
void (*var_sg_UserInterface_ListSetActiveItemIndexWithId)(const char *id, int32_t idx);
void sg_UserInterface_ListSetActiveItemIndexWithId(const char *id, int32_t idx)
{
	var_sg_UserInterface_ListSetActiveItemIndexWithId(id,idx);
}
void (*var_sg_UserInterface_ListSetFont)(guilist lst, font f);
void sg_UserInterface_ListSetFont(guilist lst, font f)
{
	var_sg_UserInterface_ListSetFont(lst,f);
}
void (*var_sg_UserInterface_ListSetFontAlignment)(guilist lst, font_alignment align);
void sg_UserInterface_ListSetFontAlignment(guilist lst, font_alignment align)
{
	var_sg_UserInterface_ListSetFontAlignment(lst,align);
}
void (*var_sg_UserInterface_ListSetFontAlignmentFromRegion)(region r, font_alignment align);
void sg_UserInterface_ListSetFontAlignmentFromRegion(region r, font_alignment align)
{
	var_sg_UserInterface_ListSetFontAlignmentFromRegion(r,align);
}
void (*var_sg_UserInterface_ListSetStartingAt)(guilist lst, int32_t idx);
void sg_UserInterface_ListSetStartingAt(guilist lst, int32_t idx)
{
	var_sg_UserInterface_ListSetStartingAt(lst,idx);
}
void (*var_sg_UserInterface_ListSetStartingAtFromRegion)(region r, int32_t idx);
void sg_UserInterface_ListSetStartingAtFromRegion(region r, int32_t idx)
{
	var_sg_UserInterface_ListSetStartingAtFromRegion(r,idx);
}
int32_t (*var_sg_UserInterface_ListStartAt)(guilist lst);
int32_t sg_UserInterface_ListStartAt(guilist lst)
{
	return var_sg_UserInterface_ListStartAt(lst);
}
int32_t (*var_sg_UserInterface_ListStartingAtFromRegion)(region r);
int32_t sg_UserInterface_ListStartingAtFromRegion(region r)
{
	return var_sg_UserInterface_ListStartingAtFromRegion(r);
}
int32_t (*var_sg_UserInterface_ListTextIndex)(guilist lst, const char *value);
int32_t sg_UserInterface_ListTextIndex(guilist lst, const char *value)
{
	return var_sg_UserInterface_ListTextIndex(lst,value);
}
void (*var_sg_UserInterface_ListWithIDAddBitmapWithTextItem)(const char *id, bitmap img, const char *text);
void sg_UserInterface_ListWithIDAddBitmapWithTextItem(const char *id, bitmap img, const char *text)
{
	var_sg_UserInterface_ListWithIDAddBitmapWithTextItem(id,img,text);
}
void (*var_sg_UserInterface_ListWithIdActiveItemText)(const char *ID, char *result);
void sg_UserInterface_ListWithIdActiveItemText(const char *ID, char *result)
{
	var_sg_UserInterface_ListWithIdActiveItemText(ID,result);
}
void (*var_sg_UserInterface_ListWithIdAddItemWithCell)(const char *id, const bitmap_cell *img);
void sg_UserInterface_ListWithIdAddItemWithCell(const char *id, const bitmap_cell *img)
{
	var_sg_UserInterface_ListWithIdAddItemWithCell(id,img);
}
void (*var_sg_UserInterface_ListWithIdAddItemWithCellAndText)(const char *id, const bitmap_cell *img, const char *text);
void sg_UserInterface_ListWithIdAddItemWithCellAndText(const char *id, const bitmap_cell *img, const char *text)
{
	var_sg_UserInterface_ListWithIdAddItemWithCellAndText(id,img,text);
}
void (*var_sg_UserInterface_ListclearItemsWithId)(const char *id);
void sg_UserInterface_ListclearItemsWithId(const char *id)
{
	var_sg_UserInterface_ListclearItemsWithId(id);
}
panel (*var_sg_UserInterface_LoadPanel)(const char *filename);
panel sg_UserInterface_LoadPanel(const char *filename)
{
	return var_sg_UserInterface_LoadPanel(filename);
}
panel (*var_sg_UserInterface_LoadPanelNamed)(const char *name, const char *filename);
panel sg_UserInterface_LoadPanelNamed(const char *name, const char *filename)
{
	return var_sg_UserInterface_LoadPanelNamed(name,filename);
}
void (*var_sg_UserInterface_MovePanel)(panel p, const vector *mvmt);
void sg_UserInterface_MovePanel(panel p, const vector *mvmt)
{
	var_sg_UserInterface_MovePanel(p,mvmt);
}
panel (*var_sg_UserInterface_NewPanel)(const char *pnlName);
panel sg_UserInterface_NewPanel(const char *pnlName)
{
	return var_sg_UserInterface_NewPanel(pnlName);
}
bool (*var_sg_UserInterface_PanelActive)(panel pnl);
bool sg_UserInterface_PanelActive(panel pnl)
{
	return var_sg_UserInterface_PanelActive(pnl);
}
panel (*var_sg_UserInterface_PanelAtPoint)(const point2d *pt);
panel sg_UserInterface_PanelAtPoint(const point2d *pt)
{
	return var_sg_UserInterface_PanelAtPoint(pt);
}
panel (*var_sg_UserInterface_PanelClicked)();
panel sg_UserInterface_PanelClicked()
{
	return var_sg_UserInterface_PanelClicked();
}
bool (*var_sg_UserInterface_PanelDraggable)(panel p);
bool sg_UserInterface_PanelDraggable(panel p)
{
	return var_sg_UserInterface_PanelDraggable(p);
}
void (*var_sg_UserInterface_PanelFilename)(panel pnl, char *result);
void sg_UserInterface_PanelFilename(panel pnl, char *result)
{
	var_sg_UserInterface_PanelFilename(pnl,result);
}
int32_t (*var_sg_UserInterface_PanelHeight)(panel p);
int32_t sg_UserInterface_PanelHeight(panel p)
{
	return var_sg_UserInterface_PanelHeight(p);
}
bool (*var_sg_UserInterface_PanelIsDragging)(panel pnl);
bool sg_UserInterface_PanelIsDragging(panel pnl)
{
	return var_sg_UserInterface_PanelIsDragging(pnl);
}
void (*var_sg_UserInterface_PanelName)(panel pnl, char *result);
void sg_UserInterface_PanelName(panel pnl, char *result)
{
	var_sg_UserInterface_PanelName(pnl,result);
}
panel (*var_sg_UserInterface_PanelNamed)(const char *name);
panel sg_UserInterface_PanelNamed(const char *name)
{
	return var_sg_UserInterface_PanelNamed(name);
}
int32_t (*var_sg_UserInterface_PanelNamedHeight)(const char *name);
int32_t sg_UserInterface_PanelNamedHeight(const char *name)
{
	return var_sg_UserInterface_PanelNamedHeight(name);
}
int32_t (*var_sg_UserInterface_PanelNamedWidth)(const char *name);
int32_t sg_UserInterface_PanelNamedWidth(const char *name)
{
	return var_sg_UserInterface_PanelNamedWidth(name);
}
void (*var_sg_UserInterface_PanelSetDraggable)(panel p, bool b);
void sg_UserInterface_PanelSetDraggable(panel p, bool b)
{
	var_sg_UserInterface_PanelSetDraggable(p,b != 0);
}
bool (*var_sg_UserInterface_PanelVisible)(panel p);
bool sg_UserInterface_PanelVisible(panel p)
{
	return var_sg_UserInterface_PanelVisible(p);
}
bool (*var_sg_UserInterface_PanelWasClicked)(panel pnl);
bool sg_UserInterface_PanelWasClicked(panel pnl)
{
	return var_sg_UserInterface_PanelWasClicked(pnl);
}
int32_t (*var_sg_UserInterface_PanelWidth)(panel p);
int32_t sg_UserInterface_PanelWidth(panel p)
{
	return var_sg_UserInterface_PanelWidth(p);
}
float (*var_sg_UserInterface_PanelX)(panel p);
float sg_UserInterface_PanelX(panel p)
{
	return var_sg_UserInterface_PanelX(p);
}
float (*var_sg_UserInterface_PanelY)(panel p);
float sg_UserInterface_PanelY(panel p)
{
	return var_sg_UserInterface_PanelY(p);
}
bool (*var_sg_UserInterface_PointInRegion)(const point2d *pt, panel p);
bool sg_UserInterface_PointInRegion(const point2d *pt, panel p)
{
	return var_sg_UserInterface_PointInRegion(pt,p);
}
bool (*var_sg_UserInterface_PointInRegionWithKind)(const point2d *pt, panel p, guielement_kind kind);
bool sg_UserInterface_PointInRegionWithKind(const point2d *pt, panel p, guielement_kind kind)
{
	return var_sg_UserInterface_PointInRegionWithKind(pt,p,kind);
}
guiradio_group (*var_sg_UserInterface_RadioGroupFromId)(const char *id);
guiradio_group sg_UserInterface_RadioGroupFromId(const char *id)
{
	return var_sg_UserInterface_RadioGroupFromId(id);
}
guiradio_group (*var_sg_UserInterface_RadioGroupFromRegion)(region r);
guiradio_group sg_UserInterface_RadioGroupFromRegion(region r)
{
	return var_sg_UserInterface_RadioGroupFromRegion(r);
}
guiradio_group (*var_sg_UserInterface_RadioGroupOnPanelWidthId)(panel pnl, const char *id);
guiradio_group sg_UserInterface_RadioGroupOnPanelWidthId(panel pnl, const char *id)
{
	return var_sg_UserInterface_RadioGroupOnPanelWidthId(pnl,id);
}
bool (*var_sg_UserInterface_RegionActive)(region forRegion);
bool sg_UserInterface_RegionActive(region forRegion)
{
	return var_sg_UserInterface_RegionActive(forRegion);
}
region (*var_sg_UserInterface_RegionAtPoint)(panel p, const point2d *pt);
region sg_UserInterface_RegionAtPoint(panel p, const point2d *pt)
{
	return var_sg_UserInterface_RegionAtPoint(p,pt);
}
region (*var_sg_UserInterface_RegionClicked)();
region sg_UserInterface_RegionClicked()
{
	return var_sg_UserInterface_RegionClicked();
}
void (*var_sg_UserInterface_RegionClickedID)(char *result);
void sg_UserInterface_RegionClickedID(char *result)
{
	var_sg_UserInterface_RegionClickedID(result);
}
int32_t (*var_sg_UserInterface_RegionHeight)(region r);
int32_t sg_UserInterface_RegionHeight(region r)
{
	return var_sg_UserInterface_RegionHeight(r);
}
void (*var_sg_UserInterface_RegionID)(region r, char *result);
void sg_UserInterface_RegionID(region r, char *result)
{
	var_sg_UserInterface_RegionID(r,result);
}
region (*var_sg_UserInterface_RegionOfLastUpdatedTextBox)();
region sg_UserInterface_RegionOfLastUpdatedTextBox()
{
	return var_sg_UserInterface_RegionOfLastUpdatedTextBox();
}
panel (*var_sg_UserInterface_RegionPanel)(region r);
panel sg_UserInterface_RegionPanel(region r)
{
	return var_sg_UserInterface_RegionPanel(r);
}
int32_t (*var_sg_UserInterface_RegionWidth)(region r);
int32_t sg_UserInterface_RegionWidth(region r)
{
	return var_sg_UserInterface_RegionWidth(r);
}
region (*var_sg_UserInterface_RegionWithID)(panel pnl, const char *ID);
region sg_UserInterface_RegionWithID(panel pnl, const char *ID)
{
	return var_sg_UserInterface_RegionWithID(pnl,ID);
}
float (*var_sg_UserInterface_RegionX)(region r);
float sg_UserInterface_RegionX(region r)
{
	return var_sg_UserInterface_RegionX(r);
}
float (*var_sg_UserInterface_RegionY)(region r);
float sg_UserInterface_RegionY(region r)
{
	return var_sg_UserInterface_RegionY(r);
}
void (*var_sg_UserInterface_RegisterEventCallback)(region r, guievent_callback callback);
void sg_UserInterface_RegisterEventCallback(region r, guievent_callback callback)
{
	var_sg_UserInterface_RegisterEventCallback(r,callback);
}
void (*var_sg_UserInterface_ReleaseAllPanels)();
void sg_UserInterface_ReleaseAllPanels()
{
	var_sg_UserInterface_ReleaseAllPanels();
}
void (*var_sg_UserInterface_ReleasePanel)(const char *name);
void sg_UserInterface_ReleasePanel(const char *name)
{
	var_sg_UserInterface_ReleasePanel(name);
}
void (*var_sg_UserInterface_SelectRadioButton)(region r);
void sg_UserInterface_SelectRadioButton(region r)
{
	var_sg_UserInterface_SelectRadioButton(r);
}
void (*var_sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex)(guiradio_group rGroup, int32_t idx);
void sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex(guiradio_group rGroup, int32_t idx)
{
	var_sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex(rGroup,idx);
}
void (*var_sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion)(guiradio_group rGroup, region r);
void sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion(guiradio_group rGroup, region r)
{
	var_sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion(rGroup,r);
}
void (*var_sg_UserInterface_SelectRadioButtonOnPanelWithId)(panel pnl, const char *id);
void sg_UserInterface_SelectRadioButtonOnPanelWithId(panel pnl, const char *id)
{
	var_sg_UserInterface_SelectRadioButtonOnPanelWithId(pnl,id);
}
void (*var_sg_UserInterface_SelectRadioButtonWithID)(const char *id);
void sg_UserInterface_SelectRadioButtonWithID(const char *id)
{
	var_sg_UserInterface_SelectRadioButtonWithID(id);
}
void (*var_sg_UserInterface_SetLabelAlignment)(guilabel tb, font_alignment align);
void sg_UserInterface_SetLabelAlignment(guilabel tb, font_alignment align)
{
	var_sg_UserInterface_SetLabelAlignment(tb,align);
}
void (*var_sg_UserInterface_SetLabelAlignmentFromRegion)(region r, font_alignment align);
void sg_UserInterface_SetLabelAlignmentFromRegion(region r, font_alignment align)
{
	var_sg_UserInterface_SetLabelAlignmentFromRegion(r,align);
}
void (*var_sg_UserInterface_SetRegionActive)(region forRegion, bool b);
void sg_UserInterface_SetRegionActive(region forRegion, bool b)
{
	var_sg_UserInterface_SetRegionActive(forRegion,b != 0);
}
void (*var_sg_UserInterface_ShowOpenDialog)();
void sg_UserInterface_ShowOpenDialog()
{
	var_sg_UserInterface_ShowOpenDialog();
}
void (*var_sg_UserInterface_ShowOpenDialogWithType)(file_dialog_select_type select);
void sg_UserInterface_ShowOpenDialogWithType(file_dialog_select_type select)
{
	var_sg_UserInterface_ShowOpenDialogWithType(select);
}
void (*var_sg_UserInterface_ShowPanel)(panel p);
void sg_UserInterface_ShowPanel(panel p)
{
	var_sg_UserInterface_ShowPanel(p);
}
void (*var_sg_UserInterface_ShowPanelDialog)(panel p);
void sg_UserInterface_ShowPanelDialog(panel p)
{
	var_sg_UserInterface_ShowPanelDialog(p);
}
void (*var_sg_UserInterface_ShowPanelNamed)(const char *name);
void sg_UserInterface_ShowPanelNamed(const char *name)
{
	var_sg_UserInterface_ShowPanelNamed(name);
}
void (*var_sg_UserInterface_ShowSaveDialog)();
void sg_UserInterface_ShowSaveDialog()
{
	var_sg_UserInterface_ShowSaveDialog();
}
void (*var_sg_UserInterface_ShowSaveDialogWithType)(file_dialog_select_type select);
void sg_UserInterface_ShowSaveDialogWithType(file_dialog_select_type select)
{
	var_sg_UserInterface_ShowSaveDialogWithType(select);
}
font_alignment (*var_sg_UserInterface_TextBoxAlignmentFromRegion)(region r);
font_alignment sg_UserInterface_TextBoxAlignmentFromRegion(region r)
{
	return var_sg_UserInterface_TextBoxAlignmentFromRegion(r);
}
font (*var_sg_UserInterface_TextBoxFont)(guitextbox tb);
font sg_UserInterface_TextBoxFont(guitextbox tb)
{
	return var_sg_UserInterface_TextBoxFont(tb);
}
font (*var_sg_UserInterface_TextBoxFontFromRegion)(region r);
font sg_UserInterface_TextBoxFontFromRegion(region r)
{
	return var_sg_UserInterface_TextBoxFontFromRegion(r);
}
guitextbox (*var_sg_UserInterface_TextBoxFromID)(const char *id);
guitextbox sg_UserInterface_TextBoxFromID(const char *id)
{
	return var_sg_UserInterface_TextBoxFromID(id);
}
void (*var_sg_UserInterface_TextBoxSetAlignmentFromRegion)(region r, font_alignment align);
void sg_UserInterface_TextBoxSetAlignmentFromRegion(region r, font_alignment align)
{
	var_sg_UserInterface_TextBoxSetAlignmentFromRegion(r,align);
}
void (*var_sg_UserInterface_TextBoxText)(guitextbox tb, char *result);
void sg_UserInterface_TextBoxText(guitextbox tb, char *result)
{
	var_sg_UserInterface_TextBoxText(tb,result);
}
font_alignment (*var_sg_UserInterface_TextboxAlignment)(guitextbox tb);
font_alignment sg_UserInterface_TextboxAlignment(guitextbox tb)
{
	return var_sg_UserInterface_TextboxAlignment(tb);
}
guitextbox (*var_sg_UserInterface_TextboxFromRegion)(region r);
guitextbox sg_UserInterface_TextboxFromRegion(region r)
{
	return var_sg_UserInterface_TextboxFromRegion(r);
}
void (*var_sg_UserInterface_TextboxSetAlignment)(guitextbox tb, font_alignment align);
void sg_UserInterface_TextboxSetAlignment(guitextbox tb, font_alignment align)
{
	var_sg_UserInterface_TextboxSetAlignment(tb,align);
}
void (*var_sg_UserInterface_TextboxSetFont)(guitextbox Tb, font f);
void sg_UserInterface_TextboxSetFont(guitextbox Tb, font f)
{
	var_sg_UserInterface_TextboxSetFont(Tb,f);
}
void (*var_sg_UserInterface_TextboxSetText)(guitextbox tb, const char *s);
void sg_UserInterface_TextboxSetText(guitextbox tb, const char *s)
{
	var_sg_UserInterface_TextboxSetText(tb,s);
}
void (*var_sg_UserInterface_TextboxSetTextFromId)(const char *id, const char *s);
void sg_UserInterface_TextboxSetTextFromId(const char *id, const char *s)
{
	var_sg_UserInterface_TextboxSetTextFromId(id,s);
}
void (*var_sg_UserInterface_TextboxSetTextFromRegion)(region r, const char *s);
void sg_UserInterface_TextboxSetTextFromRegion(region r, const char *s)
{
	var_sg_UserInterface_TextboxSetTextFromRegion(r,s);
}
void (*var_sg_UserInterface_TextboxSetTextOnPanelAndId)(panel pnl, const char *id, const char *s);
void sg_UserInterface_TextboxSetTextOnPanelAndId(panel pnl, const char *id, const char *s)
{
	var_sg_UserInterface_TextboxSetTextOnPanelAndId(pnl,id,s);
}
void (*var_sg_UserInterface_TextboxSetTextToInt)(guitextbox tb, int32_t i);
void sg_UserInterface_TextboxSetTextToInt(guitextbox tb, int32_t i)
{
	var_sg_UserInterface_TextboxSetTextToInt(tb,i);
}
void (*var_sg_UserInterface_TextboxSetTextToIntFromRegion)(region r, int32_t i);
void sg_UserInterface_TextboxSetTextToIntFromRegion(region r, int32_t i)
{
	var_sg_UserInterface_TextboxSetTextToIntFromRegion(r,i);
}
void (*var_sg_UserInterface_TextboxSetTextToIntOnPanelWithId)(panel pnl, const char *id, int32_t i);
void sg_UserInterface_TextboxSetTextToIntOnPanelWithId(panel pnl, const char *id, int32_t i)
{
	var_sg_UserInterface_TextboxSetTextToIntOnPanelWithId(pnl,id,i);
}
void (*var_sg_UserInterface_TextboxSetTextToIntWithId)(const char *id, int32_t i);
void sg_UserInterface_TextboxSetTextToIntWithId(const char *id, int32_t i)
{
	var_sg_UserInterface_TextboxSetTextToIntWithId(id,i);
}
void (*var_sg_UserInterface_TextboxSetTextToSingle)(guitextbox tb, float single);
void sg_UserInterface_TextboxSetTextToSingle(guitextbox tb, float single)
{
	var_sg_UserInterface_TextboxSetTextToSingle(tb,single);
}
void (*var_sg_UserInterface_TextboxSetTextToSingleFromId)(const char *id, float single);
void sg_UserInterface_TextboxSetTextToSingleFromId(const char *id, float single)
{
	var_sg_UserInterface_TextboxSetTextToSingleFromId(id,single);
}
void (*var_sg_UserInterface_TextboxSetTextToSingleFromRegion)(region r, float single);
void sg_UserInterface_TextboxSetTextToSingleFromRegion(region r, float single)
{
	var_sg_UserInterface_TextboxSetTextToSingleFromRegion(r,single);
}
void (*var_sg_UserInterface_TextboxSetTextToSingleOnPanel)(panel pnl, const char *id, float single);
void sg_UserInterface_TextboxSetTextToSingleOnPanel(panel pnl, const char *id, float single)
{
	var_sg_UserInterface_TextboxSetTextToSingleOnPanel(pnl,id,single);
}
void (*var_sg_UserInterface_TextboxTextFromRegion)(region r, char *result);
void sg_UserInterface_TextboxTextFromRegion(region r, char *result)
{
	var_sg_UserInterface_TextboxTextFromRegion(r,result);
}
void (*var_sg_UserInterface_TextboxTextOnPanelWithId)(panel pnl, const char *id, char *result);
void sg_UserInterface_TextboxTextOnPanelWithId(panel pnl, const char *id, char *result)
{
	var_sg_UserInterface_TextboxTextOnPanelWithId(pnl,id,result);
}
void (*var_sg_UserInterface_TextboxTextWithId)(const char *id, char *result);
void sg_UserInterface_TextboxTextWithId(const char *id, char *result)
{
	var_sg_UserInterface_TextboxTextWithId(id,result);
}
void (*var_sg_UserInterface_ToggleActivatePanel)(panel p);
void sg_UserInterface_ToggleActivatePanel(panel p)
{
	var_sg_UserInterface_ToggleActivatePanel(p);
}
void (*var_sg_UserInterface_ToggleCheckboxState)(guicheckbox c);
void sg_UserInterface_ToggleCheckboxState(guicheckbox c)
{
	var_sg_UserInterface_ToggleCheckboxState(c);
}
void (*var_sg_UserInterface_ToggleCheckboxStateFromID)(const char *id);
void sg_UserInterface_ToggleCheckboxStateFromID(const char *id)
{
	var_sg_UserInterface_ToggleCheckboxStateFromID(id);
}
void (*var_sg_UserInterface_ToggleCheckboxStateOnPanel)(panel pnl, const char *id);
void sg_UserInterface_ToggleCheckboxStateOnPanel(panel pnl, const char *id)
{
	var_sg_UserInterface_ToggleCheckboxStateOnPanel(pnl,id);
}
void (*var_sg_UserInterface_ToggleRegionActive)(region forRegion);
void sg_UserInterface_ToggleRegionActive(region forRegion)
{
	var_sg_UserInterface_ToggleRegionActive(forRegion);
}
void (*var_sg_UserInterface_ToggleShowPanel)(panel p);
void sg_UserInterface_ToggleShowPanel(panel p)
{
	var_sg_UserInterface_ToggleShowPanel(p);
}
void (*var_sg_UserInterface_UpdateInterface)();
void sg_UserInterface_UpdateInterface()
{
	var_sg_UserInterface_UpdateInterface();
}
void (*var_sg_Utils_CalculateFramerate)(char *average, char *highest, char *lowest, color *textColor);
void sg_Utils_CalculateFramerate(char *average, char *highest, char *lowest, color *textColor)
{
	var_sg_Utils_CalculateFramerate(average,highest,lowest,textColor);
}
void (*var_sg_Utils_Delay)(uint32_t time);
void sg_Utils_Delay(uint32_t time)
{
	var_sg_Utils_Delay(time);
}
void (*var_sg_Utils_ExceptionMessage)(char *result);
void sg_Utils_ExceptionMessage(char *result)
{
	var_sg_Utils_ExceptionMessage(result);
}
bool (*var_sg_Utils_ExceptionOccured)();
bool sg_Utils_ExceptionOccured()
{
	return var_sg_Utils_ExceptionOccured();
}
int32_t (*var_sg_Utils_GetFramerate)();
int32_t sg_Utils_GetFramerate()
{
	return var_sg_Utils_GetFramerate();
}
uint32_t (*var_sg_Utils_GetTicks)();
uint32_t sg_Utils_GetTicks()
{
	return var_sg_Utils_GetTicks();
}
float (*var_sg_Utils_Rnd)();
float sg_Utils_Rnd()
{
	return var_sg_Utils_Rnd();
}
int32_t (*var_sg_Utils_RndUpto)(int32_t ubound);
int32_t sg_Utils_RndUpto(int32_t ubound)
{
	return var_sg_Utils_RndUpto(ubound);
}
void (*var_sg_Utils_SwinGameVersion)(char *result);
void sg_Utils_SwinGameVersion(char *result)
{
	var_sg_Utils_SwinGameVersion(result);
}

struct DLLLoader
{
	DLLLoader()
	{
		LibraryHandle = LoadLibrary( "SGSDK.dll" );

		var_sg_Animations_AnimationCurrentCell = (int32_t (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationCurrentCell" );
		var_sg_Animations_AnimationCurrentVector = (vector (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationCurrentVector" );
		var_sg_Animations_AnimationEnded = (bool (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationEnded" );
		var_sg_Animations_AnimationEnteredFrame = (bool (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationEnteredFrame" );
		var_sg_Animations_AnimationFrameTime = (float (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationFrameTime" );
		var_sg_Animations_AnimationIndex = (int32_t (__cdecl *)(animation_script temp, const char *name)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationIndex" );
		var_sg_Animations_AnimationName = (void (__cdecl *)(animation_script temp, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationName" );
		var_sg_Animations_AnimationScriptName = (void (__cdecl *)(animation_script script, char *result)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationScriptName" );
		var_sg_Animations_AnimationScriptNamed = (animation_script (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Animations_AnimationScriptNamed" );
		var_sg_Animations_AssignAnimation = (void (__cdecl *)(animation anim, int32_t idx, animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_AssignAnimation" );
		var_sg_Animations_AssignAnimationNamed = (void (__cdecl *)(animation anim, const char *name, animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_AssignAnimationNamed" );
		var_sg_Animations_AssignAnimationNamedWithSound = (void (__cdecl *)(animation anim, const char *name, animation_script script, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_AssignAnimationNamedWithSound" );
		var_sg_Animations_AssignAnimationWithSound = (void (__cdecl *)(animation anim, int32_t idx, animation_script script, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_AssignAnimationWithSound" );
		var_sg_Animations_CreateAnimation = (animation (__cdecl *)(int32_t identifier, animation_script script, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_CreateAnimation" );
		var_sg_Animations_CreateAnimationNamed = (animation (__cdecl *)(const char *identifier, animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_CreateAnimationNamed" );
		var_sg_Animations_CreateAnimationNamedWithSound = (animation (__cdecl *)(const char *identifier, animation_script script, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_CreateAnimationNamedWithSound" );
		var_sg_Animations_CreateAnimationWithSound = (animation (__cdecl *)(int32_t identifier, animation_script script)) GetProcAddress( LibraryHandle, "sg_Animations_CreateAnimationWithSound" );
		var_sg_Animations_DrawAnimation = (void (__cdecl *)(animation ani, bitmap bmp, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimation" );
		var_sg_Animations_DrawAnimationAtPoint = (void (__cdecl *)(animation ani, bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimationAtPoint" );
		var_sg_Animations_DrawAnimationOnScreen = (void (__cdecl *)(animation ani, bitmap bmp, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimationOnScreen" );
		var_sg_Animations_DrawAnimationOnScreenAtPt = (void (__cdecl *)(animation ani, bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimationOnScreenAtPt" );
		var_sg_Animations_DrawAnimationOntoDest = (void (__cdecl *)(bitmap dest, animation ani, bitmap bmp, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimationOntoDest" );
		var_sg_Animations_DrawAnimationOntoDestAtPt = (void (__cdecl *)(bitmap dest, animation ani, bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Animations_DrawAnimationOntoDestAtPt" );
		var_sg_Animations_FreeAnimation = (void (__cdecl *)(animation *ani)) GetProcAddress( LibraryHandle, "sg_Animations_FreeAnimation" );
		var_sg_Animations_FreeAnimationScript = (void (__cdecl *)(animation_script *scriptToFree)) GetProcAddress( LibraryHandle, "sg_Animations_FreeAnimationScript" );
		var_sg_Animations_HasAnimationScript = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Animations_HasAnimationScript" );
		var_sg_Animations_LoadAnimationScript = (animation_script (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Animations_LoadAnimationScript" );
		var_sg_Animations_LoadAnimationScriptNamed = (animation_script (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Animations_LoadAnimationScriptNamed" );
		var_sg_Animations_ReleaseAllAnimationScripts = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Animations_ReleaseAllAnimationScripts" );
		var_sg_Animations_ReleaseAnimationScript = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Animations_ReleaseAnimationScript" );
		var_sg_Animations_ResetAnimationWithSound = (void (__cdecl *)(animation anim, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_ResetAnimationWithSound" );
		var_sg_Animations_RestartAnimation = (void (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_RestartAnimation" );
		var_sg_Animations_UpdateAnimation = (void (__cdecl *)(animation anim)) GetProcAddress( LibraryHandle, "sg_Animations_UpdateAnimation" );
		var_sg_Animations_UpdateAnimationPct = (void (__cdecl *)(animation anim, float pct)) GetProcAddress( LibraryHandle, "sg_Animations_UpdateAnimationPct" );
		var_sg_Animations_UpdateAnimationPctAndSound = (void (__cdecl *)(animation anim, float pct, bool withSound)) GetProcAddress( LibraryHandle, "sg_Animations_UpdateAnimationPctAndSound" );
		var_sg_Arduino_ArduinoDeviceNamed = (arduino_device (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoDeviceNamed" );
		var_sg_Arduino_ArduinoHasData = (bool (__cdecl *)(arduino_device dev)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoHasData" );
		var_sg_Arduino_ArduinoReadByte = (unsigned char (__cdecl *)(arduino_device dev)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoReadByte" );
		var_sg_Arduino_ArduinoReadByteTimeout = (unsigned char (__cdecl *)(arduino_device dev, int32_t timeout)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoReadByteTimeout" );
		var_sg_Arduino_ArduinoReadLine = (void (__cdecl *)(arduino_device dev, char *result)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoReadLine" );
		var_sg_Arduino_ArduinoReadLineTimeout = (void (__cdecl *)(arduino_device dev, int32_t timeout, char *result)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoReadLineTimeout" );
		var_sg_Arduino_ArduinoSendByte = (void (__cdecl *)(arduino_device dev, unsigned char value)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoSendByte" );
		var_sg_Arduino_ArduinoSendString = (void (__cdecl *)(arduino_device dev, const char *value)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoSendString" );
		var_sg_Arduino_ArduinoSendStringLine = (void (__cdecl *)(arduino_device dev, const char *value)) GetProcAddress( LibraryHandle, "sg_Arduino_ArduinoSendStringLine" );
		var_sg_Arduino_CreateArduinoDevice = (arduino_device (__cdecl *)(const char *port, int32_t baud)) GetProcAddress( LibraryHandle, "sg_Arduino_CreateArduinoDevice" );
		var_sg_Arduino_CreateArduinoNamed = (arduino_device (__cdecl *)(const char *name, const char *port, int32_t baud)) GetProcAddress( LibraryHandle, "sg_Arduino_CreateArduinoNamed" );
		var_sg_Arduino_FreeArduinoDevice = (void (__cdecl *)(arduino_device *dev)) GetProcAddress( LibraryHandle, "sg_Arduino_FreeArduinoDevice" );
		var_sg_Arduino_HasArduinoDevice = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Arduino_HasArduinoDevice" );
		var_sg_Arduino_ReleaseAllArduinoDevices = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Arduino_ReleaseAllArduinoDevices" );
		var_sg_Arduino_ReleaseArduinoDevice = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Arduino_ReleaseArduinoDevice" );
		var_sg_Audio_AudioReady = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_AudioReady" );
		var_sg_Audio_CloseAudio = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_CloseAudio" );
		var_sg_Audio_FadeMusicIn = (void (__cdecl *)(music mus, int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicIn" );
		var_sg_Audio_FadeMusicInWithLoops = (void (__cdecl *)(music mus, int32_t loops, int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicInWithLoops" );
		var_sg_Audio_FadeMusicNamedIn = (void (__cdecl *)(const char *name, int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicNamedIn" );
		var_sg_Audio_FadeMusicNamedInWithLoops = (void (__cdecl *)(const char *name, int32_t loops, int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicNamedInWithLoops" );
		var_sg_Audio_FadeMusicOut = (void (__cdecl *)(int32_t ms)) GetProcAddress( LibraryHandle, "sg_Audio_FadeMusicOut" );
		var_sg_Audio_FreeMusic = (void (__cdecl *)(music *mus)) GetProcAddress( LibraryHandle, "sg_Audio_FreeMusic" );
		var_sg_Audio_FreeSoundEffect = (void (__cdecl *)(sound_effect *effect)) GetProcAddress( LibraryHandle, "sg_Audio_FreeSoundEffect" );
		var_sg_Audio_HasMusic = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_HasMusic" );
		var_sg_Audio_HasSoundEffect = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_HasSoundEffect" );
		var_sg_Audio_LoadMusic = (music (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Audio_LoadMusic" );
		var_sg_Audio_LoadMusicNamed = (music (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Audio_LoadMusicNamed" );
		var_sg_Audio_LoadSoundEffect = (sound_effect (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Audio_LoadSoundEffect" );
		var_sg_Audio_LoadSoundEffectNamed = (sound_effect (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Audio_LoadSoundEffectNamed" );
		var_sg_Audio_MusicFilename = (void (__cdecl *)(music mus, char *result)) GetProcAddress( LibraryHandle, "sg_Audio_MusicFilename" );
		var_sg_Audio_MusicName = (void (__cdecl *)(music mus, char *result)) GetProcAddress( LibraryHandle, "sg_Audio_MusicName" );
		var_sg_Audio_MusicNamed = (music (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_MusicNamed" );
		var_sg_Audio_MusicPlaying = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_MusicPlaying" );
		var_sg_Audio_MusicVolume = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_MusicVolume" );
		var_sg_Audio_OpenAudio = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_OpenAudio" );
		var_sg_Audio_PauseMusic = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_PauseMusic" );
		var_sg_Audio_PlayMusicNamedWithLoops = (void (__cdecl *)(const char *name, int32_t loops)) GetProcAddress( LibraryHandle, "sg_Audio_PlayMusicNamedWithLoops" );
		var_sg_Audio_PlayMusicWithLoops = (void (__cdecl *)(music mus, int32_t loops)) GetProcAddress( LibraryHandle, "sg_Audio_PlayMusicWithLoops" );
		var_sg_Audio_PlaySoundEffectNamedWithLoopAndVolume = (void (__cdecl *)(const char *name, int32_t loops, float vol)) GetProcAddress( LibraryHandle, "sg_Audio_PlaySoundEffectNamedWithLoopAndVolume" );
		var_sg_Audio_PlaySoundEffectWithLoopAndVolume = (void (__cdecl *)(sound_effect effect, int32_t loops, float vol)) GetProcAddress( LibraryHandle, "sg_Audio_PlaySoundEffectWithLoopAndVolume" );
		var_sg_Audio_ReleaseAllMusic = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_ReleaseAllMusic" );
		var_sg_Audio_ReleaseAllSoundEffects = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_ReleaseAllSoundEffects" );
		var_sg_Audio_ReleaseMusic = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_ReleaseMusic" );
		var_sg_Audio_ReleaseSoundEffect = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_ReleaseSoundEffect" );
		var_sg_Audio_ResumeMusic = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_ResumeMusic" );
		var_sg_Audio_SetMusicVolume = (void (__cdecl *)(float value)) GetProcAddress( LibraryHandle, "sg_Audio_SetMusicVolume" );
		var_sg_Audio_SoundEffectFilename = (void (__cdecl *)(sound_effect effect, char *result)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectFilename" );
		var_sg_Audio_SoundEffectName = (void (__cdecl *)(sound_effect effect, char *result)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectName" );
		var_sg_Audio_SoundEffectNamed = (sound_effect (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectNamed" );
		var_sg_Audio_SoundEffectNamedPlaying = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectNamedPlaying" );
		var_sg_Audio_SoundEffectPlaying = (bool (__cdecl *)(sound_effect effect)) GetProcAddress( LibraryHandle, "sg_Audio_SoundEffectPlaying" );
		var_sg_Audio_StopMusic = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_StopMusic" );
		var_sg_Audio_StopSoundEffect = (void (__cdecl *)(sound_effect effect)) GetProcAddress( LibraryHandle, "sg_Audio_StopSoundEffect" );
		var_sg_Audio_StopSoundEffectNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Audio_StopSoundEffectNamed" );
		var_sg_Audio_TryOpenAudio = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Audio_TryOpenAudio" );
		var_sg_Camera_CameraPos = (point2d (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Camera_CameraPos" );
		var_sg_Camera_CameraScreenRect = (rectangle (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Camera_CameraScreenRect" );
		var_sg_Camera_CameraX = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Camera_CameraX" );
		var_sg_Camera_CameraY = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Camera_CameraY" );
		var_sg_Camera_CenterCameraOn = (void (__cdecl *)(sprite s, const vector *offset)) GetProcAddress( LibraryHandle, "sg_Camera_CenterCameraOn" );
		var_sg_Camera_CenterCameraOnCharacter = (void (__cdecl *)(character c, const vector *offset)) GetProcAddress( LibraryHandle, "sg_Camera_CenterCameraOnCharacter" );
		var_sg_Camera_CenterCameraOnWithXYOffset = (void (__cdecl *)(sprite s, int32_t offsetX, int32_t offsetY)) GetProcAddress( LibraryHandle, "sg_Camera_CenterCameraOnWithXYOffset" );
		var_sg_Camera_MoveCameraBy = (void (__cdecl *)(const vector *offset)) GetProcAddress( LibraryHandle, "sg_Camera_MoveCameraBy" );
		var_sg_Camera_MoveCameraByXY = (void (__cdecl *)(float dx, float dy)) GetProcAddress( LibraryHandle, "sg_Camera_MoveCameraByXY" );
		var_sg_Camera_MoveCameraTo = (void (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Camera_MoveCameraTo" );
		var_sg_Camera_MoveCameraToXY = (void (__cdecl *)(float x, float y)) GetProcAddress( LibraryHandle, "sg_Camera_MoveCameraToXY" );
		var_sg_Camera_PointOnScreen = (bool (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Camera_PointOnScreen" );
		var_sg_Camera_RectOnScreen = (bool (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Camera_RectOnScreen" );
		var_sg_Camera_SetCameraPos = (void (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Camera_SetCameraPos" );
		var_sg_Camera_SetCameraX = (void (__cdecl *)(float x)) GetProcAddress( LibraryHandle, "sg_Camera_SetCameraX" );
		var_sg_Camera_SetCameraY = (void (__cdecl *)(float y)) GetProcAddress( LibraryHandle, "sg_Camera_SetCameraY" );
		var_sg_Camera_ToScreen = (point2d (__cdecl *)(const point2d *worldPoint)) GetProcAddress( LibraryHandle, "sg_Camera_ToScreen" );
		var_sg_Camera_ToScreenRect = (rectangle (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Camera_ToScreenRect" );
		var_sg_Camera_ToScreenX = (int32_t (__cdecl *)(float worldX)) GetProcAddress( LibraryHandle, "sg_Camera_ToScreenX" );
		var_sg_Camera_ToScreenY = (int32_t (__cdecl *)(float worldY)) GetProcAddress( LibraryHandle, "sg_Camera_ToScreenY" );
		var_sg_Camera_ToWorld = (point2d (__cdecl *)(const point2d *screenPoint)) GetProcAddress( LibraryHandle, "sg_Camera_ToWorld" );
		var_sg_Camera_ToWorldX = (float (__cdecl *)(int32_t screenX)) GetProcAddress( LibraryHandle, "sg_Camera_ToWorldX" );
		var_sg_Camera_ToWorldY = (float (__cdecl *)(int32_t screenY)) GetProcAddress( LibraryHandle, "sg_Camera_ToWorldY" );
		var_sg_Characters_CharacterAngleAt = (direction_angles (__cdecl *)(character c, int32_t index)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterAngleAt" );
		var_sg_Characters_CharacterAngleMaxAt = (int32_t (__cdecl *)(character c, int32_t index)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterAngleMaxAt" );
		var_sg_Characters_CharacterAngleMinAt = (int32_t (__cdecl *)(character c, int32_t index)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterAngleMinAt" );
		var_sg_Characters_CharacterAnglesLength = (int32_t (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterAnglesLength" );
		var_sg_Characters_CharacterCharacterName = (void (__cdecl *)(character c, char *result)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterCharacterName" );
		var_sg_Characters_CharacterCurrentDirection = (int32_t (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterCurrentDirection" );
		var_sg_Characters_CharacterCurrentState = (int32_t (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterCurrentState" );
		var_sg_Characters_CharacterDirectionCount = (int32_t (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterDirectionCount" );
		var_sg_Characters_CharacterDirections = (void (__cdecl *)(character c, string_array result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterDirections" );
		var_sg_Characters_CharacterFilename = (void (__cdecl *)(character c, char *result)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterFilename" );
		var_sg_Characters_CharacterName = (void (__cdecl *)(character c, char *result)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterName" );
		var_sg_Characters_CharacterNamed = (character (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterNamed" );
		var_sg_Characters_CharacterSetCurrentDirection = (void (__cdecl *)(character c, int32_t direction)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterSetCurrentDirection" );
		var_sg_Characters_CharacterSetCurrentState = (void (__cdecl *)(character c, int32_t state)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterSetCurrentState" );
		var_sg_Characters_CharacterSetName = (void (__cdecl *)(character c, const char *name)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterSetName" );
		var_sg_Characters_CharacterSetType = (void (__cdecl *)(character c, const char *name)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterSetType" );
		var_sg_Characters_CharacterSetValue = (void (__cdecl *)(character c, int32_t idx, float val)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterSetValue" );
		var_sg_Characters_CharacterSetValueByName = (void (__cdecl *)(character c, const char *name, float val)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterSetValueByName" );
		var_sg_Characters_CharacterShownLayersAt = (bool (__cdecl *)(character c, int32_t index)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterShownLayersAt" );
		var_sg_Characters_CharacterSprite = (sprite (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterSprite" );
		var_sg_Characters_CharacterStateCount = (int32_t (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterStateCount" );
		var_sg_Characters_CharacterStates = (void (__cdecl *)(character c, string_array result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterStates" );
		var_sg_Characters_CharacterType = (void (__cdecl *)(character c, char *result)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterType" );
		var_sg_Characters_CharacterValueAt = (float (__cdecl *)(character c, int32_t index)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterValueAt" );
		var_sg_Characters_CharacterValueCount = (int32_t (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterValueCount" );
		var_sg_Characters_CharacterValueNames = (void (__cdecl *)(character c, string_array result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Characters_CharacterValueNames" );
		var_sg_Characters_DrawCharacter = (void (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_DrawCharacter" );
		var_sg_Characters_DrawCharacterSprite = (void (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_DrawCharacterSprite" );
		var_sg_Characters_DrawCharacterWithStationary = (void (__cdecl *)(character c, int32_t stationaryState, int32_t state)) GetProcAddress( LibraryHandle, "sg_Characters_DrawCharacterWithStationary" );
		var_sg_Characters_FreeCharacter = (void (__cdecl *)(character *c)) GetProcAddress( LibraryHandle, "sg_Characters_FreeCharacter" );
		var_sg_Characters_HasCharacter = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Characters_HasCharacter" );
		var_sg_Characters_LoadCharacter = (character (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Characters_LoadCharacter" );
		var_sg_Characters_LoadCharacterNamed = (character (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Characters_LoadCharacterNamed" );
		var_sg_Characters_ReleaseAllCharacters = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Characters_ReleaseAllCharacters" );
		var_sg_Characters_ReleaseCharacter = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Characters_ReleaseCharacter" );
		var_sg_Characters_SetActiveLayer = (void (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_SetActiveLayer" );
		var_sg_Characters_ToggleLayerVisibility = (void (__cdecl *)(character c, int32_t index)) GetProcAddress( LibraryHandle, "sg_Characters_ToggleLayerVisibility" );
		var_sg_Characters_UpdateDirectionAnimation = (bool (__cdecl *)(character c)) GetProcAddress( LibraryHandle, "sg_Characters_UpdateDirectionAnimation" );
		var_sg_Characters_UpdateDirectionAnimationWithStationary = (bool (__cdecl *)(character c, int32_t state, int32_t newState)) GetProcAddress( LibraryHandle, "sg_Characters_UpdateDirectionAnimationWithStationary" );
		var_sg_Geometry_AddVectors = (vector (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_AddVectors" );
		var_sg_Geometry_ApplyMatrix = (void (__cdecl *)(const matrix2d  *m, triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_ApplyMatrix" );
		var_sg_Geometry_ApplyMatrixToPoints = (void (__cdecl *)(const matrix2d  *m, point2d *pts, int32_t pts_len)) GetProcAddress( LibraryHandle, "sg_Geometry_ApplyMatrixToPoints" );
		var_sg_Geometry_CalculateAngle = (float (__cdecl *)(float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Geometry_CalculateAngle" );
		var_sg_Geometry_CalculateAngleBetween = (float (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_CalculateAngleBetween" );
		var_sg_Geometry_CalculateAngleBetweenSprites = (float (__cdecl *)(sprite s1, sprite s2)) GetProcAddress( LibraryHandle, "sg_Geometry_CalculateAngleBetweenSprites" );
		var_sg_Geometry_CalculateAngleBetweenVectors = (float (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_CalculateAngleBetweenVectors" );
		var_sg_Geometry_CircleAt = (circle (__cdecl *)(const point2d *pt, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleAt" );
		var_sg_Geometry_CircleCenterPoint = (point2d (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleCenterPoint" );
		var_sg_Geometry_CircleFromXY = (circle (__cdecl *)(float x, float y, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleFromXY" );
		var_sg_Geometry_CircleRadius = (int32_t (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleRadius" );
		var_sg_Geometry_CircleWithinRect = (bool (__cdecl *)(const circle *c, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleWithinRect" );
		var_sg_Geometry_CircleX = (float (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleX" );
		var_sg_Geometry_CircleY = (float (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CircleY" );
		var_sg_Geometry_ClosestPointOnCircle = (point2d (__cdecl *)(const point2d *fromPt, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnCircle" );
		var_sg_Geometry_ClosestPointOnLine = (point2d (__cdecl *)(const point2d *fromPt, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnLine" );
		var_sg_Geometry_ClosestPointOnLineFromCircle = (point2d (__cdecl *)(const circle *c, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnLineFromCircle" );
		var_sg_Geometry_ClosestPointOnLineXY = (point2d (__cdecl *)(float x, float y, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnLineXY" );
		var_sg_Geometry_ClosestPointOnLinesFromCircle = (point2d (__cdecl *)(const circle *c, const lines_array lines, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnLinesFromCircle" );
		var_sg_Geometry_ClosestPointOnRectFromCircle = (point2d (__cdecl *)(const circle *c, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_ClosestPointOnRectFromCircle" );
		var_sg_Geometry_Cosine = (float (__cdecl *)(float angle)) GetProcAddress( LibraryHandle, "sg_Geometry_Cosine" );
		var_sg_Geometry_CreateCircle = (circle (__cdecl *)(const point2d *pt, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateCircle" );
		var_sg_Geometry_CreateCircleFromXY = (circle (__cdecl *)(float x, float y, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateCircleFromXY" );
		var_sg_Geometry_CreateLine = (line_segment (__cdecl *)(float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLine" );
		var_sg_Geometry_CreateLineAsVector = (vector (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLineAsVector" );
		var_sg_Geometry_CreateLineFromVector = (line_segment (__cdecl *)(const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLineFromVector" );
		var_sg_Geometry_CreateLinePointToPoint = (line_segment (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLinePointToPoint" );
		var_sg_Geometry_CreateLineVectorWithStartPoint = (line_segment (__cdecl *)(const point2d *pt, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLineVectorWithStartPoint" );
		var_sg_Geometry_CreateLineVectorWithStartXY = (line_segment (__cdecl *)(float x, float y, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateLineVectorWithStartXY" );
		var_sg_Geometry_CreateRectangle = (rectangle (__cdecl *)(float x, float y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangle" );
		var_sg_Geometry_CreateRectangleAtPoint = (rectangle (__cdecl *)(const point2d *pt, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleAtPoint" );
		var_sg_Geometry_CreateRectangleCircle = (rectangle (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleCircle" );
		var_sg_Geometry_CreateRectangleForPoints = (rectangle (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleForPoints" );
		var_sg_Geometry_CreateRectangleLine = (rectangle (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleLine" );
		var_sg_Geometry_CreateRectangleLines = (rectangle (__cdecl *)(const lines_array lines, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleLines" );
		var_sg_Geometry_CreateRectangleTriangle = (rectangle (__cdecl *)(const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateRectangleTriangle" );
		var_sg_Geometry_CreateTriangle = (triangle  (__cdecl *)(float ax, float ay, float bx, float by, float cx, float cy)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateTriangle" );
		var_sg_Geometry_CreateTrianglePoints = (triangle  (__cdecl *)(const point2d *a, const point2d *b, const point2d *c)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateTrianglePoints" );
		var_sg_Geometry_CreateVectorFromAngle = (vector (__cdecl *)(float angle, float magnitude)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromAngle" );
		var_sg_Geometry_CreateVectorFromPointPtToRectangle = (vector (__cdecl *)(const point2d *pt, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromPointPtToRectangle" );
		var_sg_Geometry_CreateVectorFromPointToRect = (vector (__cdecl *)(float x, float y, float rectX, float rectY, int32_t rectWidth, int32_t rectHeight)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromPointToRect" );
		var_sg_Geometry_CreateVectorFromPointToRectangle = (vector (__cdecl *)(float x, float y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromPointToRectangle" );
		var_sg_Geometry_CreateVectorFromPoints = (vector (__cdecl *)(const point2d *p1, const point2d *p2)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorFromPoints" );
		var_sg_Geometry_CreateVectorToPoint = (vector (__cdecl *)(const point2d *p1)) GetProcAddress( LibraryHandle, "sg_Geometry_CreateVectorToPoint" );
		var_sg_Geometry_DistantPointOnCircle = (point2d (__cdecl *)(const point2d *pt, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_DistantPointOnCircle" );
		var_sg_Geometry_DistantPointOnCircleHeading = (bool (__cdecl *)(const point2d *pt, const circle *c, const vector *heading, point2d *oppositePt)) GetProcAddress( LibraryHandle, "sg_Geometry_DistantPointOnCircleHeading" );
		var_sg_Geometry_DotProduct = (float (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_DotProduct" );
		var_sg_Geometry_FixRect = (void (__cdecl *)(float *x, float *y, int32_t *width, int32_t *height)) GetProcAddress( LibraryHandle, "sg_Geometry_FixRect" );
		var_sg_Geometry_FixRectangle = (void (__cdecl *)(rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_FixRectangle" );
		var_sg_Geometry_IdentityMatrix = (matrix2d  (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Geometry_IdentityMatrix" );
		var_sg_Geometry_InsetRectangle = (rectangle (__cdecl *)(const rectangle *rect, int32_t insetAmount)) GetProcAddress( LibraryHandle, "sg_Geometry_InsetRectangle" );
		var_sg_Geometry_Intersection = (rectangle (__cdecl *)(const rectangle *rect1, const rectangle *rect2)) GetProcAddress( LibraryHandle, "sg_Geometry_Intersection" );
		var_sg_Geometry_InvertVector = (vector (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_InvertVector" );
		var_sg_Geometry_LimitVector = (vector (__cdecl *)(const vector *v, float limit)) GetProcAddress( LibraryHandle, "sg_Geometry_LimitVector" );
		var_sg_Geometry_LineAsVector = (vector (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_LineAsVector" );
		var_sg_Geometry_LineCircleHit = (bool (__cdecl *)(const circle *c, const vector *velocity, const lines_array lines, line_segment *found, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Geometry_LineCircleHit" );
		var_sg_Geometry_LineFrom = (line_segment (__cdecl *)(float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFrom" );
		var_sg_Geometry_LineFromPointToPoint = (line_segment (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFromPointToPoint" );
		var_sg_Geometry_LineFromVector = (line_segment (__cdecl *)(const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFromVector" );
		var_sg_Geometry_LineFromVectorWithStartPoint = (line_segment (__cdecl *)(const point2d *pt, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFromVectorWithStartPoint" );
		var_sg_Geometry_LineFromVectorWithStartXY = (line_segment (__cdecl *)(float x, float y, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_LineFromVectorWithStartXY" );
		var_sg_Geometry_LineIntersectionPoint = (bool (__cdecl *)(const line_segment *line1, const line_segment *line2, point2d *pt)) GetProcAddress( LibraryHandle, "sg_Geometry_LineIntersectionPoint" );
		var_sg_Geometry_LineIntersectsCircle = (bool (__cdecl *)(const line_segment *l, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_LineIntersectsCircle" );
		var_sg_Geometry_LineIntersectsLines = (bool (__cdecl *)(const line_segment *line, const lines_array lines, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Geometry_LineIntersectsLines" );
		var_sg_Geometry_LineIntersectsRect = (bool (__cdecl *)(const line_segment *line, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_LineIntersectsRect" );
		var_sg_Geometry_LineMagnitudeSq = (float (__cdecl *)(float x1, float y1, float x2, float y2)) GetProcAddress( LibraryHandle, "sg_Geometry_LineMagnitudeSq" );
		var_sg_Geometry_LineMagnitudeSqFromLine = (float (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_LineMagnitudeSqFromLine" );
		var_sg_Geometry_LineMidPoint = (point2d (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_LineMidPoint" );
		var_sg_Geometry_LineNormal = (vector (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_LineNormal" );
		var_sg_Geometry_LineSegmentsIntersect = (bool (__cdecl *)(const line_segment *line1, const line_segment *line2)) GetProcAddress( LibraryHandle, "sg_Geometry_LineSegmentsIntersect" );
		var_sg_Geometry_LineToString = (void (__cdecl *)(const line_segment *ln, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_LineToString" );
		var_sg_Geometry_LinesFromRect = (void (__cdecl *)(const rectangle *rect, lines_array result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Geometry_LinesFromRect" );
		var_sg_Geometry_LinesFromTriangle = (void (__cdecl *)(const triangle  *tri, lines_array result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Geometry_LinesFromTriangle" );
		var_sg_Geometry_LinesRectIntersect = (bool (__cdecl *)(const lines_array lines, const rectangle *r, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Geometry_LinesRectIntersect" );
		var_sg_Geometry_MatrixMultiply = (matrix2d  (__cdecl *)(const matrix2d  *m1, const matrix2d  *m2)) GetProcAddress( LibraryHandle, "sg_Geometry_MatrixMultiply" );
		var_sg_Geometry_MatrixMultiplyVector = (vector (__cdecl *)(const matrix2d  *m, const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_MatrixMultiplyVector" );
		var_sg_Geometry_MatrixToString = (void (__cdecl *)(const matrix2d  *m, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_MatrixToString" );
		var_sg_Geometry_PointAdd = (point2d (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_PointAdd" );
		var_sg_Geometry_PointAt = (point2d (__cdecl *)(float x, float y)) GetProcAddress( LibraryHandle, "sg_Geometry_PointAt" );
		var_sg_Geometry_PointAtStartWithOffset = (point2d (__cdecl *)(const point2d *startPoint, const vector *offset)) GetProcAddress( LibraryHandle, "sg_Geometry_PointAtStartWithOffset" );
		var_sg_Geometry_PointInCircle = (bool (__cdecl *)(const point2d *pt, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInCircle" );
		var_sg_Geometry_PointInRect = (bool (__cdecl *)(const point2d *pt, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInRect" );
		var_sg_Geometry_PointInRectXY = (bool (__cdecl *)(const point2d *pt, float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInRectXY" );
		var_sg_Geometry_PointInTriangle = (bool (__cdecl *)(const point2d *pt, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_PointInTriangle" );
		var_sg_Geometry_PointLineDistance = (float (__cdecl *)(const point2d *pt, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_PointLineDistance" );
		var_sg_Geometry_PointOnLine = (bool (__cdecl *)(const point2d *pt, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_PointOnLine" );
		var_sg_Geometry_PointOnPoint = (bool (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_PointOnPoint" );
		var_sg_Geometry_PointPointDistance = (float (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_PointPointDistance" );
		var_sg_Geometry_PointToString = (void (__cdecl *)(const point2d *pt, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_PointToString" );
		var_sg_Geometry_PointXYInCircle = (bool (__cdecl *)(float ptX, float ptY, float cX, float cY, float radius)) GetProcAddress( LibraryHandle, "sg_Geometry_PointXYInCircle" );
		var_sg_Geometry_PointXYInRect = (bool (__cdecl *)(float x, float y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_PointXYInRect" );
		var_sg_Geometry_PointXYInRectXY = (bool (__cdecl *)(float ptX, float ptY, float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_Geometry_PointXYInRectXY" );
		var_sg_Geometry_PointXYLineDistance = (float (__cdecl *)(float x, float y, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_PointXYLineDistance" );
		var_sg_Geometry_PointsFromLine = (void (__cdecl *)(const line_segment *line, point2d *result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Geometry_PointsFromLine" );
		var_sg_Geometry_PointsFromRect = (void (__cdecl *)(const rectangle *rect, point2d *result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Geometry_PointsFromRect" );
		var_sg_Geometry_RandomScreenPoint = (point2d (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Geometry_RandomScreenPoint" );
		var_sg_Geometry_RayCircleIntersectDistance = (float (__cdecl *)(const point2d *ray_origin, const vector *ray_heading, const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_RayCircleIntersectDistance" );
		var_sg_Geometry_RayIntersectionPoint = (bool (__cdecl *)(const point2d *fromPt, const vector *heading, const line_segment *line, point2d *pt)) GetProcAddress( LibraryHandle, "sg_Geometry_RayIntersectionPoint" );
		var_sg_Geometry_RectangleAfterMove = (rectangle (__cdecl *)(const rectangle *rect, const vector *mv)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleAfterMove" );
		var_sg_Geometry_RectangleAtPoint = (rectangle (__cdecl *)(const point2d *pt, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleAtPoint" );
		var_sg_Geometry_RectangleBottom = (float (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleBottom" );
		var_sg_Geometry_RectangleBottomLeft = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleBottomLeft" );
		var_sg_Geometry_RectangleBottomRight = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleBottomRight" );
		var_sg_Geometry_RectangleCenter = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenter" );
		var_sg_Geometry_RectangleCenterBottom = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenterBottom" );
		var_sg_Geometry_RectangleCenterLeft = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenterLeft" );
		var_sg_Geometry_RectangleCenterRight = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenterRight" );
		var_sg_Geometry_RectangleCenterTop = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleCenterTop" );
		var_sg_Geometry_RectangleForPoints = (rectangle (__cdecl *)(const point2d *pt1, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleForPoints" );
		var_sg_Geometry_RectangleFrom = (rectangle (__cdecl *)(float x, float y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFrom" );
		var_sg_Geometry_RectangleFromCircle = (rectangle (__cdecl *)(const circle *c)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFromCircle" );
		var_sg_Geometry_RectangleFromLine = (rectangle (__cdecl *)(const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFromLine" );
		var_sg_Geometry_RectangleFromLines = (rectangle (__cdecl *)(const lines_array lines, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFromLines" );
		var_sg_Geometry_RectangleFromTriangle = (rectangle (__cdecl *)(const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleFromTriangle" );
		var_sg_Geometry_RectangleLeft = (float (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleLeft" );
		var_sg_Geometry_RectangleOffset = (rectangle (__cdecl *)(const rectangle *rect, const vector *vec)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleOffset" );
		var_sg_Geometry_RectangleRight = (float (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleRight" );
		var_sg_Geometry_RectangleToString = (void (__cdecl *)(const rectangle *rect, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleToString" );
		var_sg_Geometry_RectangleTop = (float (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleTop" );
		var_sg_Geometry_RectangleTopLeft = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleTopLeft" );
		var_sg_Geometry_RectangleTopRight = (point2d (__cdecl *)(const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_RectangleTopRight" );
		var_sg_Geometry_RectanglesIntersect = (bool (__cdecl *)(const rectangle *rect1, const rectangle *rect2)) GetProcAddress( LibraryHandle, "sg_Geometry_RectanglesIntersect" );
		var_sg_Geometry_RotationMatrix = (matrix2d  (__cdecl *)(float deg)) GetProcAddress( LibraryHandle, "sg_Geometry_RotationMatrix" );
		var_sg_Geometry_ScaleMatrix = (matrix2d  (__cdecl *)(float scale)) GetProcAddress( LibraryHandle, "sg_Geometry_ScaleMatrix" );
		var_sg_Geometry_ScaleMatrixByPoint = (matrix2d  (__cdecl *)(const point2d *scale)) GetProcAddress( LibraryHandle, "sg_Geometry_ScaleMatrixByPoint" );
		var_sg_Geometry_ScaleRotateTranslateMatrix = (matrix2d  (__cdecl *)(const point2d *scale, float deg, const point2d *translate)) GetProcAddress( LibraryHandle, "sg_Geometry_ScaleRotateTranslateMatrix" );
		var_sg_Geometry_Sine = (float (__cdecl *)(float angle)) GetProcAddress( LibraryHandle, "sg_Geometry_Sine" );
		var_sg_Geometry_SubtractVectors = (vector (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_SubtractVectors" );
		var_sg_Geometry_Tangent = (float (__cdecl *)(float angle)) GetProcAddress( LibraryHandle, "sg_Geometry_Tangent" );
		var_sg_Geometry_TangentPoints = (bool (__cdecl *)(const point2d *fromPt, const circle *c, point2d *p1, point2d *p2)) GetProcAddress( LibraryHandle, "sg_Geometry_TangentPoints" );
		var_sg_Geometry_TranslationMatrix = (matrix2d  (__cdecl *)(float dx, float dy)) GetProcAddress( LibraryHandle, "sg_Geometry_TranslationMatrix" );
		var_sg_Geometry_TranslationMatrixPt = (matrix2d  (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Geometry_TranslationMatrixPt" );
		var_sg_Geometry_TriangleBarycenter = (point2d (__cdecl *)(const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleBarycenter" );
		var_sg_Geometry_TriangleFrom = (triangle  (__cdecl *)(float ax, float ay, float bx, float by, float cx, float cy)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleFrom" );
		var_sg_Geometry_TriangleFromPoints = (triangle  (__cdecl *)(const point2d *a, const point2d *b, const point2d *c)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleFromPoints" );
		var_sg_Geometry_TriangleRectangleIntersect = (bool (__cdecl *)(const triangle  *tri, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleRectangleIntersect" );
		var_sg_Geometry_TriangleToString = (void (__cdecl *)(const triangle  *tri, char *result)) GetProcAddress( LibraryHandle, "sg_Geometry_TriangleToString" );
		var_sg_Geometry_TrianglesRectangleIntersect = (bool (__cdecl *)(const triangle_array tri, const rectangle *rect, int32_t tri_len)) GetProcAddress( LibraryHandle, "sg_Geometry_TrianglesRectangleIntersect" );
		var_sg_Geometry_UnitVector = (vector (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_UnitVector" );
		var_sg_Geometry_VectorAngle = (float (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorAngle" );
		var_sg_Geometry_VectorFromAngle = (vector (__cdecl *)(float angle, float magnitude)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromAngle" );
		var_sg_Geometry_VectorFromPointPtToRectangle = (vector (__cdecl *)(const point2d *pt, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromPointPtToRectangle" );
		var_sg_Geometry_VectorFromPointToRect = (vector (__cdecl *)(float x, float y, float rectX, float rectY, int32_t rectWidth, int32_t rectHeight)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromPointToRect" );
		var_sg_Geometry_VectorFromPointToRectangle = (vector (__cdecl *)(float x, float y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromPointToRectangle" );
		var_sg_Geometry_VectorFromPoints = (vector (__cdecl *)(const point2d *p1, const point2d *p2)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorFromPoints" );
		var_sg_Geometry_VectorInRect = (bool (__cdecl *)(const vector *v, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorInRect" );
		var_sg_Geometry_VectorInRectXY = (bool (__cdecl *)(const vector *v, float x, float y, float w, float h)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorInRectXY" );
		var_sg_Geometry_VectorIsZero = (bool (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorIsZero" );
		var_sg_Geometry_VectorMagnitude = (float (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorMagnitude" );
		var_sg_Geometry_VectorMagnitudeSq = (float (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorMagnitudeSq" );
		var_sg_Geometry_VectorMultiply = (vector (__cdecl *)(const vector *v, float s)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorMultiply" );
		var_sg_Geometry_VectorNormal = (vector (__cdecl *)(const vector *v)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorNormal" );
		var_sg_Geometry_VectorOutOfCircleFromCircle = (vector (__cdecl *)(const circle *src, const circle *bounds, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfCircleFromCircle" );
		var_sg_Geometry_VectorOutOfCircleFromPoint = (vector (__cdecl *)(const point2d *pt, const circle *c, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfCircleFromPoint" );
		var_sg_Geometry_VectorOutOfRectFromCircle = (vector (__cdecl *)(const circle *c, const rectangle *rect, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfRectFromCircle" );
		var_sg_Geometry_VectorOutOfRectFromPoint = (vector (__cdecl *)(const point2d *pt, const rectangle *rect, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfRectFromPoint" );
		var_sg_Geometry_VectorOutOfRectFromRect = (vector (__cdecl *)(const rectangle *src, const rectangle *bounds, const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOutOfRectFromRect" );
		var_sg_Geometry_VectorOverLinesFromCircle = (vector (__cdecl *)(const circle *c, const lines_array lines, const vector *velocity, int32_t *maxIdx, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOverLinesFromCircle" );
		var_sg_Geometry_VectorOverLinesFromLines = (vector (__cdecl *)(const lines_array srcLines, const lines_array boundLines, const vector *velocity, int32_t *maxIdx, int32_t srcLines_len, int32_t boundLines_len)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorOverLinesFromLines" );
		var_sg_Geometry_VectorTo = (vector (__cdecl *)(float x, float y, bool invertY)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorTo" );
		var_sg_Geometry_VectorToPoint = (vector (__cdecl *)(const point2d *p1)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorToPoint" );
		var_sg_Geometry_VectorsEqual = (bool (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorsEqual" );
		var_sg_Geometry_VectorsNotEqual = (bool (__cdecl *)(const vector *v1, const vector *v2)) GetProcAddress( LibraryHandle, "sg_Geometry_VectorsNotEqual" );
		var_sg_Geometry_WidestPoints = (void (__cdecl *)(const circle *c, const vector *along, point2d *pt1, point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Geometry_WidestPoints" );
		var_sg_Graphics_BlueOf = (unsigned char (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_BlueOf" );
		var_sg_Graphics_BrightnessOf = (float (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_BrightnessOf" );
		var_sg_Graphics_ChangeScreenSize = (void (__cdecl *)(int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_ChangeScreenSize" );
		var_sg_Graphics_ClearScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ClearScreen" );
		var_sg_Graphics_ClearScreenTo = (void (__cdecl *)(color toColor)) GetProcAddress( LibraryHandle, "sg_Graphics_ClearScreenTo" );
		var_sg_Graphics_ColorComponents = (void (__cdecl *)(color c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a)) GetProcAddress( LibraryHandle, "sg_Graphics_ColorComponents" );
		var_sg_Graphics_ColorFromBitmap = (color (__cdecl *)(bitmap bmp, color apiColor)) GetProcAddress( LibraryHandle, "sg_Graphics_ColorFromBitmap" );
		var_sg_Graphics_ColorToString = (void (__cdecl *)(color c, char *result)) GetProcAddress( LibraryHandle, "sg_Graphics_ColorToString" );
		var_sg_Graphics_CurrentBmpClip = (rectangle (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Graphics_CurrentBmpClip" );
		var_sg_Graphics_CurrentScreenClip = (rectangle (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_CurrentScreenClip" );
		var_sg_Graphics_DrawHorizontalLine = (void (__cdecl *)(color clr, float y, float x1, float x2)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawHorizontalLine" );
		var_sg_Graphics_DrawHorizontalLineOnScreen = (void (__cdecl *)(color clr, int32_t y, int32_t x1, int32_t x2)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawHorizontalLineOnScreen" );
		var_sg_Graphics_DrawHorizontalLineOnto = (void (__cdecl *)(bitmap dest, color clr, int32_t y, int32_t x1, int32_t x2)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawHorizontalLineOnto" );
		var_sg_Graphics_DrawLine = (void (__cdecl *)(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLine" );
		var_sg_Graphics_DrawLineOnScreen = (void (__cdecl *)(color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineOnScreen" );
		var_sg_Graphics_DrawLineOnto = (void (__cdecl *)(bitmap dest, color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineOnto" );
		var_sg_Graphics_DrawLinePts = (void (__cdecl *)(color clr, const point2d *startPt, const point2d *endPt)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLinePts" );
		var_sg_Graphics_DrawLinePtsOnScreen = (void (__cdecl *)(color clr, const point2d *startPt, const point2d *endPt)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLinePtsOnScreen" );
		var_sg_Graphics_DrawLinePtsOnto = (void (__cdecl *)(bitmap dest, color clr, const point2d *startPt, const point2d *endPt)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLinePtsOnto" );
		var_sg_Graphics_DrawLineSegment = (void (__cdecl *)(color clr, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineSegment" );
		var_sg_Graphics_DrawLineSegmentOnScreen = (void (__cdecl *)(color clr, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineSegmentOnScreen" );
		var_sg_Graphics_DrawLineSegmentOnto = (void (__cdecl *)(bitmap dest, color clr, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineSegmentOnto" );
		var_sg_Graphics_DrawLineSegments = (void (__cdecl *)(color clr, const lines_array lines, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawLineSegments" );
		var_sg_Graphics_DrawOrFillCircle = (void (__cdecl *)(color clr, bool filled, float xc, float yc, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircle" );
		var_sg_Graphics_DrawOrFillCircleAtPoint = (void (__cdecl *)(color clr, bool filled, const point2d *position, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircleAtPoint" );
		var_sg_Graphics_DrawOrFillCircleAtPointOnScreen = (void (__cdecl *)(color clr, bool filled, const point2d *position, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircleAtPointOnScreen" );
		var_sg_Graphics_DrawOrFillCircleAtPointOnto = (void (__cdecl *)(bitmap dest, color clr, bool filled, const point2d *point, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircleAtPointOnto" );
		var_sg_Graphics_DrawOrFillCircleOnScreen = (void (__cdecl *)(color clr, bool filled, float xc, float yc, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircleOnScreen" );
		var_sg_Graphics_DrawOrFillCircleOnto = (void (__cdecl *)(bitmap dest, color clr, bool filled, float xc, float yc, int32_t radius)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircleOnto" );
		var_sg_Graphics_DrawOrFillCircleStruct = (void (__cdecl *)(color clr, bool filled, const circle *c)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircleStruct" );
		var_sg_Graphics_DrawOrFillCircleStructOnScreen = (void (__cdecl *)(color clr, bool filled, const circle *c)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircleStructOnScreen" );
		var_sg_Graphics_DrawOrFillCircleStructOnto = (void (__cdecl *)(bitmap dest, color clr, bool filled, const circle *c)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillCircleStructOnto" );
		var_sg_Graphics_DrawOrFillEllipse = (void (__cdecl *)(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillEllipse" );
		var_sg_Graphics_DrawOrFillEllipseInRect = (void (__cdecl *)(color clr, bool filled, const rectangle *source)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillEllipseInRect" );
		var_sg_Graphics_DrawOrFillEllipseInRectOnScreen = (void (__cdecl *)(color clr, bool filled, const rectangle *source)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillEllipseInRectOnScreen" );
		var_sg_Graphics_DrawOrFillEllipseInRectOnto = (void (__cdecl *)(bitmap dest, color clr, bool filled, const rectangle *source)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillEllipseInRectOnto" );
		var_sg_Graphics_DrawOrFillEllipseOnScreen = (void (__cdecl *)(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillEllipseOnScreen" );
		var_sg_Graphics_DrawOrFillEllipseOnto = (void (__cdecl *)(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillEllipseOnto" );
		var_sg_Graphics_DrawOrFillRectangle = (void (__cdecl *)(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillRectangle" );
		var_sg_Graphics_DrawOrFillRectangleOnScreen = (void (__cdecl *)(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillRectangleOnScreen" );
		var_sg_Graphics_DrawOrFillRectangleOnto = (void (__cdecl *)(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillRectangleOnto" );
		var_sg_Graphics_DrawOrFillRectangleStruct = (void (__cdecl *)(color clr, bool filled, const rectangle *source)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillRectangleStruct" );
		var_sg_Graphics_DrawOrFillRectangleStructOnScreen = (void (__cdecl *)(color clr, bool filled, const rectangle *source)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillRectangleStructOnScreen" );
		var_sg_Graphics_DrawOrFillRectangleStructOnto = (void (__cdecl *)(bitmap dest, color clr, bool filled, const rectangle *source)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillRectangleStructOnto" );
		var_sg_Graphics_DrawOrFillTriangleStruct = (void (__cdecl *)(color clr, bool filled, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillTriangleStruct" );
		var_sg_Graphics_DrawOrFillTriangleStructOnScreen = (void (__cdecl *)(color clr, bool filled, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillTriangleStructOnScreen" );
		var_sg_Graphics_DrawOrFillTriangleStructOnto = (void (__cdecl *)(bitmap dest, color clr, bool filled, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawOrFillTriangleStructOnto" );
		var_sg_Graphics_DrawPixel = (void (__cdecl *)(color clr, float x, float y)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixel" );
		var_sg_Graphics_DrawPixelAtPoint = (void (__cdecl *)(color clr, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixelAtPoint" );
		var_sg_Graphics_DrawPixelAtPointOnScreen = (void (__cdecl *)(color clr, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixelAtPointOnScreen" );
		var_sg_Graphics_DrawPixelAtPointOnto = (void (__cdecl *)(bitmap dest, color clr, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixelAtPointOnto" );
		var_sg_Graphics_DrawPixelOnScreen = (void (__cdecl *)(color clr, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixelOnScreen" );
		var_sg_Graphics_DrawPixelOnto = (void (__cdecl *)(bitmap dest, color clr, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawPixelOnto" );
		var_sg_Graphics_DrawTriangle = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2, float x3, float y3)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawTriangle" );
		var_sg_Graphics_DrawTriangleOnScreen = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2, float x3, float y3)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawTriangleOnScreen" );
		var_sg_Graphics_DrawTriangleOnto = (void (__cdecl *)(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawTriangleOnto" );
		var_sg_Graphics_DrawVerticalLine = (void (__cdecl *)(color clr, float x, float y1, float y2)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawVerticalLine" );
		var_sg_Graphics_DrawVerticalLineOnScreen = (void (__cdecl *)(color clr, int32_t x, int32_t y1, int32_t y2)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawVerticalLineOnScreen" );
		var_sg_Graphics_DrawVerticalLineOnto = (void (__cdecl *)(bitmap dest, color clr, int32_t x, int32_t y1, int32_t y2)) GetProcAddress( LibraryHandle, "sg_Graphics_DrawVerticalLineOnto" );
		var_sg_Graphics_FillTriangle = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2, float x3, float y3)) GetProcAddress( LibraryHandle, "sg_Graphics_FillTriangle" );
		var_sg_Graphics_FillTriangleOnScreen = (void (__cdecl *)(color clr, float x1, float y1, float x2, float y2, float x3, float y3)) GetProcAddress( LibraryHandle, "sg_Graphics_FillTriangleOnScreen" );
		var_sg_Graphics_FillTriangleOnto = (void (__cdecl *)(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3)) GetProcAddress( LibraryHandle, "sg_Graphics_FillTriangleOnto" );
		var_sg_Graphics_GetPixel = (color (__cdecl *)(bitmap bmp, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Graphics_GetPixel" );
		var_sg_Graphics_GetPixelFromScreen = (color (__cdecl *)(int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Graphics_GetPixelFromScreen" );
		var_sg_Graphics_GreenOf = (unsigned char (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_GreenOf" );
		var_sg_Graphics_HSBColor = (color (__cdecl *)(float hue, float saturation, float brightness)) GetProcAddress( LibraryHandle, "sg_Graphics_HSBColor" );
		var_sg_Graphics_HSBValuesOf = (void (__cdecl *)(color c, float *h, float *s, float *b)) GetProcAddress( LibraryHandle, "sg_Graphics_HSBValuesOf" );
		var_sg_Graphics_HueOf = (float (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_HueOf" );
		var_sg_Graphics_OpenGraphicsWindow = (void (__cdecl *)(const char *caption, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Graphics_OpenGraphicsWindow" );
		var_sg_Graphics_PopClipBmp = (void (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Graphics_PopClipBmp" );
		var_sg_Graphics_PopClipScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_PopClipScreen" );
		var_sg_Graphics_PushClipRect = (void (__cdecl *)(const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_PushClipRect" );
		var_sg_Graphics_PushClipRectForBitmap = (void (__cdecl *)(bitmap bmp, const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_PushClipRectForBitmap" );
		var_sg_Graphics_PushClipXY = (void (__cdecl *)(int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Graphics_PushClipXY" );
		var_sg_Graphics_PutPixel = (void (__cdecl *)(bitmap bmp, color value, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Graphics_PutPixel" );
		var_sg_Graphics_RGBAColor = (color (__cdecl *)(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha)) GetProcAddress( LibraryHandle, "sg_Graphics_RGBAColor" );
		var_sg_Graphics_RGBAFloatColor = (color (__cdecl *)(float r, float g, float b, float a)) GetProcAddress( LibraryHandle, "sg_Graphics_RGBAFloatColor" );
		var_sg_Graphics_RGBFloatColor = (color (__cdecl *)(float r, float g, float b)) GetProcAddress( LibraryHandle, "sg_Graphics_RGBFloatColor" );
		var_sg_Graphics_RandomColor = (color (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_RandomColor" );
		var_sg_Graphics_RandomRGBColor = (color (__cdecl *)(unsigned char alpha)) GetProcAddress( LibraryHandle, "sg_Graphics_RandomRGBColor" );
		var_sg_Graphics_RedOf = (unsigned char (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_RedOf" );
		var_sg_Graphics_RefreshScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_RefreshScreen" );
		var_sg_Graphics_RefreshScreenRestrictFPS = (void (__cdecl *)(uint32_t TargetFPS)) GetProcAddress( LibraryHandle, "sg_Graphics_RefreshScreenRestrictFPS" );
		var_sg_Graphics_ResetClip = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ResetClip" );
		var_sg_Graphics_ResetClipForBitmap = (void (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Graphics_ResetClipForBitmap" );
		var_sg_Graphics_SaturationOf = (float (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_SaturationOf" );
		var_sg_Graphics_ScreenHeight = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ScreenHeight" );
		var_sg_Graphics_ScreenWidth = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ScreenWidth" );
		var_sg_Graphics_SetBmpClip = (void (__cdecl *)(bitmap bmp, const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_SetBmpClip" );
		var_sg_Graphics_SetBmpClipXY = (void (__cdecl *)(bitmap bmp, int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Graphics_SetBmpClipXY" );
		var_sg_Graphics_SetClip = (void (__cdecl *)(const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Graphics_SetClip" );
		var_sg_Graphics_SetClipXY = (void (__cdecl *)(int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Graphics_SetClipXY" );
		var_sg_Graphics_SetIcon = (void (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Graphics_SetIcon" );
		var_sg_Graphics_ShowSwinGameSplashScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ShowSwinGameSplashScreen" );
		var_sg_Graphics_TakeScreenshot = (void (__cdecl *)(const char *basename)) GetProcAddress( LibraryHandle, "sg_Graphics_TakeScreenshot" );
		var_sg_Graphics_ToggleFullScreen = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ToggleFullScreen" );
		var_sg_Graphics_ToggleWindowBorder = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Graphics_ToggleWindowBorder" );
		var_sg_Graphics_TransparencyOf = (unsigned char (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_Graphics_TransparencyOf" );
		var_sg_Images_BitmapCellCircle = (circle (__cdecl *)(bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellCircle" );
		var_sg_Images_BitmapCellCircleXY = (circle (__cdecl *)(bitmap bmp, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellCircleXY" );
		var_sg_Images_BitmapCellColumns = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellColumns" );
		var_sg_Images_BitmapCellCount = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellCount" );
		var_sg_Images_BitmapCellHeight = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellHeight" );
		var_sg_Images_BitmapCellOf = (bitmap_cell (__cdecl *)(bitmap bmp, int32_t cell)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellOf" );
		var_sg_Images_BitmapCellRectangle = (rectangle (__cdecl *)(const point2d *pt, bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellRectangle" );
		var_sg_Images_BitmapCellRectangleAtOrigin = (rectangle (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellRectangleAtOrigin" );
		var_sg_Images_BitmapCellRectangleXY = (rectangle (__cdecl *)(float x, float y, bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellRectangleXY" );
		var_sg_Images_BitmapCellRows = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellRows" );
		var_sg_Images_BitmapCellWidth = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCellWidth" );
		var_sg_Images_BitmapCircle = (circle (__cdecl *)(bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCircle" );
		var_sg_Images_BitmapCircleXY = (circle (__cdecl *)(bitmap bmp, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_BitmapCircleXY" );
		var_sg_Images_BitmapFilename = (void (__cdecl *)(bitmap bmp, char *result)) GetProcAddress( LibraryHandle, "sg_Images_BitmapFilename" );
		var_sg_Images_BitmapHeight = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapHeight" );
		var_sg_Images_BitmapHeightForCell = (int32_t (__cdecl *)(const bitmap_cell *bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapHeightForCell" );
		var_sg_Images_BitmapName = (void (__cdecl *)(bitmap bmp, char *result)) GetProcAddress( LibraryHandle, "sg_Images_BitmapName" );
		var_sg_Images_BitmapNamed = (bitmap (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Images_BitmapNamed" );
		var_sg_Images_BitmapRectAtOrigin = (rectangle (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapRectAtOrigin" );
		var_sg_Images_BitmapRectXY = (rectangle (__cdecl *)(float x, float y, bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapRectXY" );
		var_sg_Images_BitmapRectangleOfCell = (rectangle (__cdecl *)(bitmap src, int32_t cell)) GetProcAddress( LibraryHandle, "sg_Images_BitmapRectangleOfCell" );
		var_sg_Images_BitmapSetCellDetails = (void (__cdecl *)(bitmap bmp, int32_t width, int32_t height, int32_t columns, int32_t rows, int32_t count)) GetProcAddress( LibraryHandle, "sg_Images_BitmapSetCellDetails" );
		var_sg_Images_BitmapWidth = (int32_t (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapWidth" );
		var_sg_Images_BitmapWidthForCell = (int32_t (__cdecl *)(const bitmap_cell *bmp)) GetProcAddress( LibraryHandle, "sg_Images_BitmapWidthForCell" );
		var_sg_Images_BitmapsInterchangable = (bool (__cdecl *)(bitmap bmp1, bitmap bmp2)) GetProcAddress( LibraryHandle, "sg_Images_BitmapsInterchangable" );
		var_sg_Images_ClearSurface = (void (__cdecl *)(bitmap dest, color toColor)) GetProcAddress( LibraryHandle, "sg_Images_ClearSurface" );
		var_sg_Images_ClearSurfaceToBlack = (void (__cdecl *)(bitmap dest)) GetProcAddress( LibraryHandle, "sg_Images_ClearSurfaceToBlack" );
		var_sg_Images_CombineIntoGrid = (bitmap (__cdecl *)(const bitmap *bitmaps, int32_t cols, int32_t bitmaps_len)) GetProcAddress( LibraryHandle, "sg_Images_CombineIntoGrid" );
		var_sg_Images_CreateBitmap = (bitmap (__cdecl *)(int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Images_CreateBitmap" );
		var_sg_Images_CreateBitmapNamed = (bitmap (__cdecl *)(const char *name, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Images_CreateBitmapNamed" );
		var_sg_Images_DrawBitmap = (void (__cdecl *)(bitmap src, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmap" );
		var_sg_Images_DrawBitmapAtPoint = (void (__cdecl *)(bitmap src, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapAtPoint" );
		var_sg_Images_DrawBitmapAtPointOnScreen = (void (__cdecl *)(bitmap src, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapAtPointOnScreen" );
		var_sg_Images_DrawBitmapAtPointOnto = (void (__cdecl *)(bitmap dest, bitmap src, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapAtPointOnto" );
		var_sg_Images_DrawBitmapCell = (void (__cdecl *)(const bitmap_cell *src, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapCell" );
		var_sg_Images_DrawBitmapCellAtPoint = (void (__cdecl *)(const bitmap_cell *src, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapCellAtPoint" );
		var_sg_Images_DrawBitmapCellAtPointOnScreen = (void (__cdecl *)(const bitmap_cell *src, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapCellAtPointOnScreen" );
		var_sg_Images_DrawBitmapCellAtPointOnto = (void (__cdecl *)(bitmap dest, const bitmap_cell *src, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapCellAtPointOnto" );
		var_sg_Images_DrawBitmapCellOnScreen = (void (__cdecl *)(const bitmap_cell *src, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapCellOnScreen" );
		var_sg_Images_DrawBitmapCellOnto = (void (__cdecl *)(bitmap dest, const bitmap_cell *src, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapCellOnto" );
		var_sg_Images_DrawBitmapNamed = (void (__cdecl *)(const char *name, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapNamed" );
		var_sg_Images_DrawBitmapNamedAtPoint = (void (__cdecl *)(const char *name, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapNamedAtPoint" );
		var_sg_Images_DrawBitmapOnScreen = (void (__cdecl *)(bitmap src, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapOnScreen" );
		var_sg_Images_DrawBitmapOnto = (void (__cdecl *)(bitmap dest, bitmap src, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapOnto" );
		var_sg_Images_DrawBitmapPart = (void (__cdecl *)(bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPart" );
		var_sg_Images_DrawBitmapPartFromRect = (void (__cdecl *)(bitmap src, const rectangle *source, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPartFromRect" );
		var_sg_Images_DrawBitmapPartFromRectAtPoint = (void (__cdecl *)(bitmap src, const rectangle *source, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPartFromRectAtPoint" );
		var_sg_Images_DrawBitmapPartFromRectAtPointOnScreen = (void (__cdecl *)(bitmap src, const rectangle *source, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPartFromRectAtPointOnScreen" );
		var_sg_Images_DrawBitmapPartFromRectAtPointOnto = (void (__cdecl *)(bitmap dest, bitmap src, const rectangle *source, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPartFromRectAtPointOnto" );
		var_sg_Images_DrawBitmapPartFromRectOnScreen = (void (__cdecl *)(bitmap src, const rectangle *source, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPartFromRectOnScreen" );
		var_sg_Images_DrawBitmapPartFromRectOnto = (void (__cdecl *)(bitmap dest, bitmap src, const rectangle *source, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPartFromRectOnto" );
		var_sg_Images_DrawBitmapPartOnScreen = (void (__cdecl *)(bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPartOnScreen" );
		var_sg_Images_DrawBitmapPartOnto = (void (__cdecl *)(bitmap dest, bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_DrawBitmapPartOnto" );
		var_sg_Images_DrawCell = (void (__cdecl *)(bitmap src, int32_t cell, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawCell" );
		var_sg_Images_DrawCellOnScreen = (void (__cdecl *)(bitmap src, int32_t cell, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawCellOnScreen" );
		var_sg_Images_DrawCellOnScreenXY = (void (__cdecl *)(bitmap src, int32_t cell, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawCellOnScreenXY" );
		var_sg_Images_DrawCellOnto = (void (__cdecl *)(bitmap dest, bitmap src, int32_t cell, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Images_DrawCellOnto" );
		var_sg_Images_DrawCellOntoXY = (void (__cdecl *)(bitmap dest, bitmap src, int32_t cell, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawCellOntoXY" );
		var_sg_Images_DrawCellXY = (void (__cdecl *)(bitmap src, int32_t cell, float x, float y)) GetProcAddress( LibraryHandle, "sg_Images_DrawCellXY" );
		var_sg_Images_FreeBitmap = (void (__cdecl *)(bitmap *bitmapToFree)) GetProcAddress( LibraryHandle, "sg_Images_FreeBitmap" );
		var_sg_Images_HasBitmap = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Images_HasBitmap" );
		var_sg_Images_LoadBitmap = (bitmap (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_Images_LoadBitmap" );
		var_sg_Images_LoadBitmapNamed = (bitmap (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_Images_LoadBitmapNamed" );
		var_sg_Images_LoadBitmapWithTransparentColor = (bitmap (__cdecl *)(const char *filename, bool transparent, color transparentColor)) GetProcAddress( LibraryHandle, "sg_Images_LoadBitmapWithTransparentColor" );
		var_sg_Images_LoadTransparentBitmapNamed = (bitmap (__cdecl *)(const char *name, const char *filename, color transparentColor)) GetProcAddress( LibraryHandle, "sg_Images_LoadTransparentBitmapNamed" );
		var_sg_Images_MakeOpaque = (void (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_MakeOpaque" );
		var_sg_Images_MakeTransparent = (void (__cdecl *)(bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Images_MakeTransparent" );
		var_sg_Images_OptimiseBitmap = (void (__cdecl *)(bitmap surface)) GetProcAddress( LibraryHandle, "sg_Images_OptimiseBitmap" );
		var_sg_Images_PixelDrawnAtPoint = (bool (__cdecl *)(bitmap bmp, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Images_PixelDrawnAtPoint" );
		var_sg_Images_ReleaseAllBitmaps = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Images_ReleaseAllBitmaps" );
		var_sg_Images_ReleaseBitmap = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Images_ReleaseBitmap" );
		var_sg_Images_RotateScaleBitmap = (bitmap (__cdecl *)(bitmap src, float degRot, float scale)) GetProcAddress( LibraryHandle, "sg_Images_RotateScaleBitmap" );
		var_sg_Images_SameBitmapCell = (bool (__cdecl *)(const bitmap_cell *bmp1, const bitmap_cell *bmp2)) GetProcAddress( LibraryHandle, "sg_Images_SameBitmapCell" );
		var_sg_Images_SaveBitmap = (void (__cdecl *)(bitmap src, const char *filepath)) GetProcAddress( LibraryHandle, "sg_Images_SaveBitmap" );
		var_sg_Images_SaveToPNG = (void (__cdecl *)(bitmap bmp, const char *filename)) GetProcAddress( LibraryHandle, "sg_Images_SaveToPNG" );
		var_sg_Images_SetOpacity = (void (__cdecl *)(bitmap bmp, float pct)) GetProcAddress( LibraryHandle, "sg_Images_SetOpacity" );
		var_sg_Images_SetTransparentColor = (void (__cdecl *)(bitmap src, color clr)) GetProcAddress( LibraryHandle, "sg_Images_SetTransparentColor" );
		var_sg_Images_SetupBitmapForCollisions = (void (__cdecl *)(bitmap src)) GetProcAddress( LibraryHandle, "sg_Images_SetupBitmapForCollisions" );
		var_sg_Input_AnyKeyPressed = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_AnyKeyPressed" );
		var_sg_Input_DeviceMovedInXAxis = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_DeviceMovedInXAxis" );
		var_sg_Input_DeviceMovedInYAxis = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_DeviceMovedInYAxis" );
		var_sg_Input_DeviceMovedInZAxis = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_DeviceMovedInZAxis" );
		var_sg_Input_EndReadingText = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Input_EndReadingText" );
		var_sg_Input_FingersOnScreen = (void (__cdecl *)(finger_array result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Input_FingersOnScreen" );
		var_sg_Input_GetAccelerometerThreshold = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_GetAccelerometerThreshold" );
		var_sg_Input_HideKeyboard = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_HideKeyboard" );
		var_sg_Input_HideMouse = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_HideMouse" );
		var_sg_Input_KeyDown = (bool (__cdecl *)(key_code key)) GetProcAddress( LibraryHandle, "sg_Input_KeyDown" );
		var_sg_Input_KeyName = (void (__cdecl *)(key_code key, char *result)) GetProcAddress( LibraryHandle, "sg_Input_KeyName" );
		var_sg_Input_KeyReleased = (bool (__cdecl *)(key_code key)) GetProcAddress( LibraryHandle, "sg_Input_KeyReleased" );
		var_sg_Input_KeyTyped = (bool (__cdecl *)(key_code key)) GetProcAddress( LibraryHandle, "sg_Input_KeyTyped" );
		var_sg_Input_KeyUp = (bool (__cdecl *)(key_code key)) GetProcAddress( LibraryHandle, "sg_Input_KeyUp" );
		var_sg_Input_KeyboardShown = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_KeyboardShown" );
		var_sg_Input_MouseClicked = (bool (__cdecl *)(mouse_button button)) GetProcAddress( LibraryHandle, "sg_Input_MouseClicked" );
		var_sg_Input_MouseDown = (bool (__cdecl *)(mouse_button button)) GetProcAddress( LibraryHandle, "sg_Input_MouseDown" );
		var_sg_Input_MouseMovement = (vector (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MouseMovement" );
		var_sg_Input_MousePosition = (point2d (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MousePosition" );
		var_sg_Input_MousePositionAsVector = (vector (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MousePositionAsVector" );
		var_sg_Input_MouseShown = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MouseShown" );
		var_sg_Input_MouseUp = (bool (__cdecl *)(mouse_button button)) GetProcAddress( LibraryHandle, "sg_Input_MouseUp" );
		var_sg_Input_MouseX = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MouseX" );
		var_sg_Input_MouseY = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_MouseY" );
		var_sg_Input_MoveMouse = (void (__cdecl *)(unsigned char x, unsigned char y)) GetProcAddress( LibraryHandle, "sg_Input_MoveMouse" );
		var_sg_Input_MoveMouseToPoint = (void (__cdecl *)(const point2d *point)) GetProcAddress( LibraryHandle, "sg_Input_MoveMouseToPoint" );
		var_sg_Input_NumberOfFingersOnScreen = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_NumberOfFingersOnScreen" );
		var_sg_Input_ProcessEvents = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ProcessEvents" );
		var_sg_Input_ReadingText = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ReadingText" );
		var_sg_Input_ScreenTouched = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ScreenTouched" );
		var_sg_Input_SetAccelerometerThreshold = (void (__cdecl *)(float value)) GetProcAddress( LibraryHandle, "sg_Input_SetAccelerometerThreshold" );
		var_sg_Input_SetMouseVisible = (void (__cdecl *)(bool show)) GetProcAddress( LibraryHandle, "sg_Input_SetMouseVisible" );
		var_sg_Input_ShowKeyboard = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ShowKeyboard" );
		var_sg_Input_ShowMouse = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ShowMouse" );
		var_sg_Input_StartReadingText = (void (__cdecl *)(color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingText" );
		var_sg_Input_StartReadingTextWithText = (void (__cdecl *)(const char *text, color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithText" );
		var_sg_Input_StartReadingTextWithTextAndColorInArea = (void (__cdecl *)(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithTextAndColorInArea" );
		var_sg_Input_StartReadingTextWithTextAtPt = (void (__cdecl *)(const char *text, color textColor, int32_t maxLength, font theFont, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithTextAtPt" );
		var_sg_Input_StartReadingTextWithTextInArea = (void (__cdecl *)(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithTextInArea" );
		var_sg_Input_StartReadingTextWithinArea = (void (__cdecl *)(color textColor, int32_t maxLength, font theFont, const rectangle *area)) GetProcAddress( LibraryHandle, "sg_Input_StartReadingTextWithinArea" );
		var_sg_Input_TextEntryCancelled = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_TextEntryCancelled" );
		var_sg_Input_TextReadAsASCII = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Input_TextReadAsASCII" );
		var_sg_Input_ToggleKeyboard = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_ToggleKeyboard" );
		var_sg_Input_WindowCloseRequested = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Input_WindowCloseRequested" );
		var_sg_Networking_AcceptTCPConnection = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_AcceptTCPConnection" );
		var_sg_Networking_BroadcastTCPMessage = (void (__cdecl *)(const char *aMsg)) GetProcAddress( LibraryHandle, "sg_Networking_BroadcastTCPMessage" );
		var_sg_Networking_BroadcastUDPMessage = (void (__cdecl *)(const char *aMsg)) GetProcAddress( LibraryHandle, "sg_Networking_BroadcastUDPMessage" );
		var_sg_Networking_ClearMessageQueue = (void (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_ClearMessageQueue" );
		var_sg_Networking_CloseAllConnections = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_CloseAllConnections" );
		var_sg_Networking_CloseAllSockets = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_CloseAllSockets" );
		var_sg_Networking_CloseAllTCPHostSockets = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_CloseAllTCPHostSockets" );
		var_sg_Networking_CloseAllUDPSockets = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_CloseAllUDPSockets" );
		var_sg_Networking_CloseConnection = (bool (__cdecl *)(connection *aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_CloseConnection" );
		var_sg_Networking_CloseTCPHostSocket = (bool (__cdecl *)(int32_t aPort)) GetProcAddress( LibraryHandle, "sg_Networking_CloseTCPHostSocket" );
		var_sg_Networking_CloseUDPSocket = (bool (__cdecl *)(int32_t aPort)) GetProcAddress( LibraryHandle, "sg_Networking_CloseUDPSocket" );
		var_sg_Networking_ConnectionCount = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionCount" );
		var_sg_Networking_ConnectionIP = (uint32_t (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionIP" );
		var_sg_Networking_ConnectionPort = (int32_t (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionPort" );
		var_sg_Networking_ConnectionQueueSize = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_ConnectionQueueSize" );
		var_sg_Networking_CreateTCPConnection = (connection (__cdecl *)(const char *aIP, int32_t aPort)) GetProcAddress( LibraryHandle, "sg_Networking_CreateTCPConnection" );
		var_sg_Networking_CreateTCPHost = (bool (__cdecl *)(int32_t aPort)) GetProcAddress( LibraryHandle, "sg_Networking_CreateTCPHost" );
		var_sg_Networking_CreateUDPConnection = (connection (__cdecl *)(const char *aDestIP, int32_t aDestPort, int32_t aInPort)) GetProcAddress( LibraryHandle, "sg_Networking_CreateUDPConnection" );
		var_sg_Networking_CreateUDPHost = (int32_t (__cdecl *)(int32_t aPort)) GetProcAddress( LibraryHandle, "sg_Networking_CreateUDPHost" );
		var_sg_Networking_DecToHex = (void (__cdecl *)(uint32_t aDec, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_DecToHex" );
		var_sg_Networking_EnqueueMessage = (void (__cdecl *)(const char *aMsg, connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_EnqueueMessage" );
		var_sg_Networking_EnqueueNewConnection = (void (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_EnqueueNewConnection" );
		var_sg_Networking_FetchConnection = (connection (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_FetchConnection" );
		var_sg_Networking_FreeConnection = (void (__cdecl *)(connection *aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_FreeConnection" );
		var_sg_Networking_HexStrToIPv4 = (void (__cdecl *)(const char *aHex, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_HexStrToIPv4" );
		var_sg_Networking_HexToDecString = (void (__cdecl *)(const char *aHex, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_HexToDecString" );
		var_sg_Networking_IPv4ToDec = (uint32_t (__cdecl *)(const char *aIP)) GetProcAddress( LibraryHandle, "sg_Networking_IPv4ToDec" );
		var_sg_Networking_MessageCount = (int32_t (__cdecl *)(connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_MessageCount" );
		var_sg_Networking_MyIP = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Networking_MyIP" );
		var_sg_Networking_ReadLastMessage = (void (__cdecl *)(connection aConnection, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_ReadLastMessage" );
		var_sg_Networking_ReadMessage = (void (__cdecl *)(connection aConnection, char *result)) GetProcAddress( LibraryHandle, "sg_Networking_ReadMessage" );
		var_sg_Networking_ReleaseAllConnections = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_ReleaseAllConnections" );
		var_sg_Networking_RetreiveConnection = (connection (__cdecl *)(int32_t aConnectionAt)) GetProcAddress( LibraryHandle, "sg_Networking_RetreiveConnection" );
		var_sg_Networking_SendTCPMessage = (connection (__cdecl *)(const char *aMsg, connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_SendTCPMessage" );
		var_sg_Networking_SendUDPMessage = (bool (__cdecl *)(const char *aMsg, connection aConnection)) GetProcAddress( LibraryHandle, "sg_Networking_SendUDPMessage" );
		var_sg_Networking_TCPMessageReceived = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_TCPMessageReceived" );
		var_sg_Networking_UDPMessageReceived = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Networking_UDPMessageReceived" );
		var_sg_Physics_BitmapAtPointsCollision = (bool (__cdecl *)(bitmap bmp1, const point2d *pt1, bitmap bmp2, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapAtPointsCollision" );
		var_sg_Physics_BitmapCollision = (bool (__cdecl *)(bitmap bmp1, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapCollision" );
		var_sg_Physics_BitmapPartAtPtRectCollision = (bool (__cdecl *)(bitmap bmp, const point2d *pt, const rectangle *part, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPartAtPtRectCollision" );
		var_sg_Physics_BitmapPartPointCollision = (bool (__cdecl *)(bitmap bmp, int32_t x, int32_t y, const rectangle *part, float ptX, float ptY)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPartPointCollision" );
		var_sg_Physics_BitmapPartPointXYCollision = (bool (__cdecl *)(bitmap bmp, int32_t x, int32_t y, const rectangle *part, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPartPointXYCollision" );
		var_sg_Physics_BitmapPartRectCollision = (bool (__cdecl *)(bitmap bmp, int32_t x, int32_t y, const rectangle *part, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPartRectCollision" );
		var_sg_Physics_BitmapPointCollision = (bool (__cdecl *)(bitmap bmp, int32_t x, int32_t y, float ptX, float ptY)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPointCollision" );
		var_sg_Physics_BitmapPointPtCollision = (bool (__cdecl *)(bitmap bmp, int32_t x, int32_t y, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapPointPtCollision" );
		var_sg_Physics_BitmapRectCollision = (bool (__cdecl *)(bitmap bmp, int32_t x, int32_t y, int32_t rectX, int32_t rectY, int32_t rectWidth, int32_t rectHeight)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapRectCollision" );
		var_sg_Physics_BitmapRectangleCollision = (bool (__cdecl *)(bitmap bmp, int32_t x, int32_t y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapRectangleCollision" );
		var_sg_Physics_BitmapsPartsCollision = (bool (__cdecl *)(bitmap bmp1, const point2d *pt1, const rectangle *part1, bitmap bmp2, const point2d *pt2, const rectangle *part2)) GetProcAddress( LibraryHandle, "sg_Physics_BitmapsPartsCollision" );
		var_sg_Physics_CellBitmapCollision = (bool (__cdecl *)(bitmap bmp1, int32_t cell, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2)) GetProcAddress( LibraryHandle, "sg_Physics_CellBitmapCollision" );
		var_sg_Physics_CellBitmapCollisionAtPt = (bool (__cdecl *)(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Physics_CellBitmapCollisionAtPt" );
		var_sg_Physics_CellBitmapPartCollision = (bool (__cdecl *)(bitmap bmp1, int32_t cell, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2, const rectangle *part)) GetProcAddress( LibraryHandle, "sg_Physics_CellBitmapPartCollision" );
		var_sg_Physics_CellBitmapPartCollisionAtPt = (bool (__cdecl *)(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2, const rectangle *part)) GetProcAddress( LibraryHandle, "sg_Physics_CellBitmapPartCollisionAtPt" );
		var_sg_Physics_CellCollision = (bool (__cdecl *)(bitmap bmp1, int32_t cell1, int32_t x1, int32_t y1, bitmap bmp2, int32_t cell2, int32_t x2, int32_t y2)) GetProcAddress( LibraryHandle, "sg_Physics_CellCollision" );
		var_sg_Physics_CellCollisionAtPt = (bool (__cdecl *)(bitmap bmp1, int32_t cell1, const point2d *pt1, bitmap bmp2, int32_t cell2, const point2d *pt2)) GetProcAddress( LibraryHandle, "sg_Physics_CellCollisionAtPt" );
		var_sg_Physics_CellRectCollision = (bool (__cdecl *)(bitmap bmp, int32_t cell, int32_t x, int32_t y, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_CellRectCollision" );
		var_sg_Physics_CellRectCollisionAtPt = (bool (__cdecl *)(bitmap bmp, int32_t cell, const point2d *pt, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_CellRectCollisionAtPt" );
		var_sg_Physics_CircleCircleCollision = (bool (__cdecl *)(const circle *c1, const circle *c2)) GetProcAddress( LibraryHandle, "sg_Physics_CircleCircleCollision" );
		var_sg_Physics_CircleLinesCollision = (bool (__cdecl *)(const circle *c, const lines_array lines, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Physics_CircleLinesCollision" );
		var_sg_Physics_CircleRectCollision = (bool (__cdecl *)(const circle *c, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_CircleRectCollision" );
		var_sg_Physics_CircleTriangleCollision = (bool (__cdecl *)(const circle *c, const triangle  *tri)) GetProcAddress( LibraryHandle, "sg_Physics_CircleTriangleCollision" );
		var_sg_Physics_CollideCircleCircle = (void (__cdecl *)(sprite s, const circle *c)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircleCircle" );
		var_sg_Physics_CollideCircleLine = (void (__cdecl *)(sprite s, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircleLine" );
		var_sg_Physics_CollideCircleLines = (void (__cdecl *)(sprite s, const lines_array lines, int32_t lines_len)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircleLines" );
		var_sg_Physics_CollideCircleRectangle = (void (__cdecl *)(sprite s, const rectangle *rect)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircleRectangle" );
		var_sg_Physics_CollideCircles = (void (__cdecl *)(sprite s1, sprite s2)) GetProcAddress( LibraryHandle, "sg_Physics_CollideCircles" );
		var_sg_Physics_RectLineCollision = (bool (__cdecl *)(const rectangle *rect, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Physics_RectLineCollision" );
		var_sg_Physics_SideForCollisionTest = (collision_side (__cdecl *)(const vector *velocity)) GetProcAddress( LibraryHandle, "sg_Physics_SideForCollisionTest" );
		var_sg_Physics_SpriteBitmapAtPointCollision = (bool (__cdecl *)(sprite s, bitmap bmp, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteBitmapAtPointCollision" );
		var_sg_Physics_SpriteBitmapCollision = (bool (__cdecl *)(sprite s, bitmap bmp, float x, float y)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteBitmapCollision" );
		var_sg_Physics_SpriteCircleLineCollision = (bool (__cdecl *)(sprite s, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteCircleLineCollision" );
		var_sg_Physics_SpriteCollision = (bool (__cdecl *)(sprite s1, sprite s2)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteCollision" );
		var_sg_Physics_SpriteRectCollision = (bool (__cdecl *)(sprite s, float x, float y, int32_t width, int32_t height)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteRectCollision" );
		var_sg_Physics_SpriteRectLineCollision = (bool (__cdecl *)(sprite s, const line_segment *line)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteRectLineCollision" );
		var_sg_Physics_SpriteRectangleCollision = (bool (__cdecl *)(sprite s, const rectangle *r)) GetProcAddress( LibraryHandle, "sg_Physics_SpriteRectangleCollision" );
		var_sg_Physics_TriangleLineCollision = (bool (__cdecl *)(const triangle  *tri, const line_segment *ln)) GetProcAddress( LibraryHandle, "sg_Physics_TriangleLineCollision" );
		var_sg_Resources_AppPath = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Resources_AppPath" );
		var_sg_Resources_FilenameToResource = (void (__cdecl *)(const char *name, resource_kind kind, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_FilenameToResource" );
		var_sg_Resources_HasResourceBundle = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Resources_HasResourceBundle" );
		var_sg_Resources_LoadResourceBundle = (void (__cdecl *)(const char *name, bool showProgress)) GetProcAddress( LibraryHandle, "sg_Resources_LoadResourceBundle" );
		var_sg_Resources_LoadResourceBundleNamed = (void (__cdecl *)(const char *name, const char *filename, bool showProgress)) GetProcAddress( LibraryHandle, "sg_Resources_LoadResourceBundleNamed" );
		var_sg_Resources_PathToOtherResource = (void (__cdecl *)(const char *filename, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToOtherResource" );
		var_sg_Resources_PathToOtherResourceWithBase = (void (__cdecl *)(const char *path, const char *filename, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToOtherResourceWithBase" );
		var_sg_Resources_PathToResource = (void (__cdecl *)(const char *filename, resource_kind kind, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResource" );
		var_sg_Resources_PathToResourceWithBase = (void (__cdecl *)(const char *path, const char *filename, resource_kind kind, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResourceWithBase" );
		var_sg_Resources_PathToResourceWithSubPaths = (void (__cdecl *)(const char *filename, resource_kind kind, const string_array subPaths, char *result, int32_t subPaths_len)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResourceWithSubPaths" );
		var_sg_Resources_PathToResourseInSubdir = (void (__cdecl *)(const char *filename, const char *subdir, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResourseInSubdir" );
		var_sg_Resources_PathToResourseKindInSubdir = (void (__cdecl *)(const char *filename, resource_kind kind, const char *subdir, char *result)) GetProcAddress( LibraryHandle, "sg_Resources_PathToResourseKindInSubdir" );
		var_sg_Resources_RegisterFreeNotifier = (void (__cdecl *)(free_notifier  fn)) GetProcAddress( LibraryHandle, "sg_Resources_RegisterFreeNotifier" );
		var_sg_Resources_ReleaseAllResources = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Resources_ReleaseAllResources" );
		var_sg_Resources_ReleaseResourceBundle = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Resources_ReleaseResourceBundle" );
		var_sg_Resources_SetAppPath = (void (__cdecl *)(const char *path)) GetProcAddress( LibraryHandle, "sg_Resources_SetAppPath" );
		var_sg_Resources_SetAppPathWithExe = (void (__cdecl *)(const char *path, bool withExe)) GetProcAddress( LibraryHandle, "sg_Resources_SetAppPathWithExe" );
		var_sg_Sprites_CenterPoint = (point2d (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_CenterPoint" );
		var_sg_Sprites_CreateBasicSprite = (sprite (__cdecl *)(bitmap layer)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateBasicSprite" );
		var_sg_Sprites_CreateBasicSpriteNamed = (sprite (__cdecl *)(const char *name, bitmap layer)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateBasicSpriteNamed" );
		var_sg_Sprites_CreateBasicSpritePt = (sprite (__cdecl *)(bitmap layer, point2d pt)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateBasicSpritePt" );
		var_sg_Sprites_CreateBasicSpriteXY = (sprite (__cdecl *)(bitmap layer, float x, float y)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateBasicSpriteXY" );
		var_sg_Sprites_CreateLayeredSprite = (sprite (__cdecl *)(const bitmap *layers, int32_t layers_len)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateLayeredSprite" );
		var_sg_Sprites_CreateLayeredSpriteNamed = (sprite (__cdecl *)(const char *name, const bitmap *layers, int32_t layers_len)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateLayeredSpriteNamed" );
		var_sg_Sprites_CreateLayeredSpriteWithAnimationScript = (sprite (__cdecl *)(const bitmap *layers, animation_script ani, int32_t layers_len)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateLayeredSpriteWithAnimationScript" );
		var_sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed = (sprite (__cdecl *)(const char *name, const bitmap *layers, animation_script ani, int32_t layers_len)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed" );
		var_sg_Sprites_CreateLayeredSpriteWithLayerNames = (sprite (__cdecl *)(const bitmap *layers, const string_array layerNames, int32_t layers_len, int32_t layerNames_len)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateLayeredSpriteWithLayerNames" );
		var_sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript = (sprite (__cdecl *)(const bitmap *layers, const string_array layerNames, animation_script ani, int32_t layers_len, int32_t layerNames_len)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript" );
		var_sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed = (sprite (__cdecl *)(const char *name, const bitmap *layers, const string_array layerNames, animation_script ani, int32_t layers_len, int32_t layerNames_len)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed" );
		var_sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed = (sprite (__cdecl *)(const char *name, const bitmap *layers, const string_array layerNames, int32_t layers_len, int32_t layerNames_len)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed" );
		var_sg_Sprites_CreateSpriteWithAnimation = (sprite (__cdecl *)(bitmap layer, animation_script ani)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithAnimation" );
		var_sg_Sprites_CreateSpriteWithAnimationNamed = (sprite (__cdecl *)(const char *name, bitmap layer, animation_script ani)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithAnimationNamed" );
		var_sg_Sprites_CreateSpriteWithAnimationPt = (sprite (__cdecl *)(bitmap layer, animation_script ani, point2d pt)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithAnimationPt" );
		var_sg_Sprites_CreateSpriteWithAnimationXY = (sprite (__cdecl *)(bitmap layer, animation_script ani, float x, float y)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithAnimationXY" );
		var_sg_Sprites_CreateSpriteWithLayer = (sprite (__cdecl *)(bitmap layer, const char *layerName)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithLayer" );
		var_sg_Sprites_CreateSpriteWithLayerAndAnimation = (sprite (__cdecl *)(bitmap layer, const char *layerName, animation_script ani)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithLayerAndAnimation" );
		var_sg_Sprites_CreateSpriteWithLayerAndAnimationNamed = (sprite (__cdecl *)(const char *name, bitmap layer, const char *layerName, animation_script ani)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithLayerAndAnimationNamed" );
		var_sg_Sprites_CreateSpriteWithLayerNamed = (sprite (__cdecl *)(const char *name, bitmap layer, const char *layerName)) GetProcAddress( LibraryHandle, "sg_Sprites_CreateSpriteWithLayerNamed" );
		var_sg_Sprites_DrawSpriteOffsetPoint = (void (__cdecl *)(sprite s, const point2d *position)) GetProcAddress( LibraryHandle, "sg_Sprites_DrawSpriteOffsetPoint" );
		var_sg_Sprites_DrawSpriteOffsetXY = (void (__cdecl *)(sprite s, int32_t xOffset, int32_t yOffset)) GetProcAddress( LibraryHandle, "sg_Sprites_DrawSpriteOffsetXY" );
		var_sg_Sprites_FreeSprite = (void (__cdecl *)(sprite *s)) GetProcAddress( LibraryHandle, "sg_Sprites_FreeSprite" );
		var_sg_Sprites_HasSprite = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_HasSprite" );
		var_sg_Sprites_MoveSpritePct = (void (__cdecl *)(sprite s, float pct)) GetProcAddress( LibraryHandle, "sg_Sprites_MoveSpritePct" );
		var_sg_Sprites_MoveSpriteTo = (void (__cdecl *)(sprite s, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Sprites_MoveSpriteTo" );
		var_sg_Sprites_MoveSpriteVecPct = (void (__cdecl *)(sprite s, const vector *distance, float pct)) GetProcAddress( LibraryHandle, "sg_Sprites_MoveSpriteVecPct" );
		var_sg_Sprites_ReleaseAllSprites = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Sprites_ReleaseAllSprites" );
		var_sg_Sprites_ReleaseSprite = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_ReleaseSprite" );
		var_sg_Sprites_ReplayAnimationWithSound = (void (__cdecl *)(sprite s, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_ReplayAnimationWithSound" );
		var_sg_Sprites_SpriteAddLayer = (int32_t (__cdecl *)(sprite s, bitmap newLayer, const char *layerName)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAddLayer" );
		var_sg_Sprites_SpriteAddToVelocity = (void (__cdecl *)(sprite s, const vector *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAddToVelocity" );
		var_sg_Sprites_SpriteAddValue = (void (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAddValue" );
		var_sg_Sprites_SpriteAddValueWithInitialValue = (void (__cdecl *)(sprite s, const char *name, float initVal)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAddValueWithInitialValue" );
		var_sg_Sprites_SpriteAnimationHasEnded = (bool (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteAnimationHasEnded" );
		var_sg_Sprites_SpriteBringLayerForward = (void (__cdecl *)(sprite s, int32_t visibleLayer)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteBringLayerForward" );
		var_sg_Sprites_SpriteBringLayerToFront = (void (__cdecl *)(sprite s, int32_t visibleLayer)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteBringLayerToFront" );
		var_sg_Sprites_SpriteCircle = (circle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCircle" );
		var_sg_Sprites_SpriteCollisionBitmap = (bitmap (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCollisionBitmap" );
		var_sg_Sprites_SpriteCollisionCircle = (circle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCollisionCircle" );
		var_sg_Sprites_SpriteCollisionKind = (collision_test_kind (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCollisionKind" );
		var_sg_Sprites_SpriteCollisionRectangle = (rectangle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCollisionRectangle" );
		var_sg_Sprites_SpriteCurrentCell = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCurrentCell" );
		var_sg_Sprites_SpriteCurrentCellRectangle = (rectangle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteCurrentCellRectangle" );
		var_sg_Sprites_SpriteDX = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteDX" );
		var_sg_Sprites_SpriteDY = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteDY" );
		var_sg_Sprites_SpriteHeading = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteHeading" );
		var_sg_Sprites_SpriteHeight = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteHeight" );
		var_sg_Sprites_SpriteHideLayer = (void (__cdecl *)(sprite s, int32_t id)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteHideLayer" );
		var_sg_Sprites_SpriteHideLayerNamed = (void (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteHideLayerNamed" );
		var_sg_Sprites_SpriteLayerAtIdx = (bitmap (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerAtIdx" );
		var_sg_Sprites_SpriteLayerCircle = (circle (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerCircle" );
		var_sg_Sprites_SpriteLayerCount = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerCount" );
		var_sg_Sprites_SpriteLayerHeight = (int32_t (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerHeight" );
		var_sg_Sprites_SpriteLayerIndex = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerIndex" );
		var_sg_Sprites_SpriteLayerName = (void (__cdecl *)(sprite s, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerName" );
		var_sg_Sprites_SpriteLayerNamed = (bitmap (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamed" );
		var_sg_Sprites_SpriteLayerNamedCircle = (circle (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamedCircle" );
		var_sg_Sprites_SpriteLayerNamedHeight = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamedHeight" );
		var_sg_Sprites_SpriteLayerNamedRectangle = (rectangle (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamedRectangle" );
		var_sg_Sprites_SpriteLayerNamedWidth = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerNamedWidth" );
		var_sg_Sprites_SpriteLayerOffset = (point2d (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerOffset" );
		var_sg_Sprites_SpriteLayerOffsetNamed = (point2d (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerOffsetNamed" );
		var_sg_Sprites_SpriteLayerOffsets = (void (__cdecl *)(sprite s, point2d *result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerOffsets" );
		var_sg_Sprites_SpriteLayerRectangle = (rectangle (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerRectangle" );
		var_sg_Sprites_SpriteLayerWidth = (int32_t (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayerWidth" );
		var_sg_Sprites_SpriteLayers = (void (__cdecl *)(sprite s, bitmap *result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteLayers" );
		var_sg_Sprites_SpriteMass = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteMass" );
		var_sg_Sprites_SpriteName = (void (__cdecl *)(sprite sprt, char *result)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteName" );
		var_sg_Sprites_SpriteNamed = (sprite (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteNamed" );
		var_sg_Sprites_SpriteOffscreen = (bool (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteOffscreen" );
		var_sg_Sprites_SpriteOnScreenAt = (bool (__cdecl *)(sprite s, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteOnScreenAt" );
		var_sg_Sprites_SpriteOnScreenAtPoint = (bool (__cdecl *)(sprite s, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteOnScreenAtPoint" );
		var_sg_Sprites_SpritePosition = (point2d (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpritePosition" );
		var_sg_Sprites_SpriteReplayAnimation = (void (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteReplayAnimation" );
		var_sg_Sprites_SpriteRotation = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteRotation" );
		var_sg_Sprites_SpriteScale = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteScale" );
		var_sg_Sprites_SpriteScreenRectangle = (rectangle (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteScreenRectangle" );
		var_sg_Sprites_SpriteSendLayerBackward = (void (__cdecl *)(sprite s, int32_t visibleLayer)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSendLayerBackward" );
		var_sg_Sprites_SpriteSendLayerToBack = (void (__cdecl *)(sprite s, int32_t visibleLayer)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSendLayerToBack" );
		var_sg_Sprites_SpriteSetCollisionBitmap = (void (__cdecl *)(sprite s, bitmap bmp)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetCollisionBitmap" );
		var_sg_Sprites_SpriteSetCollisionKind = (void (__cdecl *)(sprite s, collision_test_kind value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetCollisionKind" );
		var_sg_Sprites_SpriteSetDX = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetDX" );
		var_sg_Sprites_SpriteSetDY = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetDY" );
		var_sg_Sprites_SpriteSetHeading = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetHeading" );
		var_sg_Sprites_SpriteSetLayerOffset = (void (__cdecl *)(sprite s, int32_t idx, const point2d *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetLayerOffset" );
		var_sg_Sprites_SpriteSetLayerOffsetNamed = (void (__cdecl *)(sprite s, const char *name, const point2d *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetLayerOffsetNamed" );
		var_sg_Sprites_SpriteSetLayerOffsets = (void (__cdecl *)(sprite s, const point2d *values, int32_t values_len)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetLayerOffsets" );
		var_sg_Sprites_SpriteSetMass = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetMass" );
		var_sg_Sprites_SpriteSetPosition = (void (__cdecl *)(sprite s, const point2d *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetPosition" );
		var_sg_Sprites_SpriteSetRotation = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetRotation" );
		var_sg_Sprites_SpriteSetScale = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetScale" );
		var_sg_Sprites_SpriteSetSpeed = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetSpeed" );
		var_sg_Sprites_SpriteSetValue = (void (__cdecl *)(sprite s, int32_t idx, float val)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetValue" );
		var_sg_Sprites_SpriteSetValueNamed = (void (__cdecl *)(sprite s, const char *name, float val)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetValueNamed" );
		var_sg_Sprites_SpriteSetVelocity = (void (__cdecl *)(sprite s, const vector *value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetVelocity" );
		var_sg_Sprites_SpriteSetX = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetX" );
		var_sg_Sprites_SpriteSetY = (void (__cdecl *)(sprite s, float value)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSetY" );
		var_sg_Sprites_SpriteShowLayer = (int32_t (__cdecl *)(sprite s, int32_t id)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteShowLayer" );
		var_sg_Sprites_SpriteShowLayerNamed = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteShowLayerNamed" );
		var_sg_Sprites_SpriteSpeed = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteSpeed" );
		var_sg_Sprites_SpriteStartAnimation = (void (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStartAnimation" );
		var_sg_Sprites_SpriteStartAnimationNamed = (void (__cdecl *)(sprite s, const char *named)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStartAnimationNamed" );
		var_sg_Sprites_SpriteStartAnimationNamedWithSound = (void (__cdecl *)(sprite s, const char *named, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStartAnimationNamedWithSound" );
		var_sg_Sprites_SpriteStartAnimationWithSound = (void (__cdecl *)(sprite s, int32_t idx, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteStartAnimationWithSound" );
		var_sg_Sprites_SpriteToggleLayerNamedVisible = (void (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteToggleLayerNamedVisible" );
		var_sg_Sprites_SpriteToggleLayerVisible = (void (__cdecl *)(sprite s, int32_t id)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteToggleLayerVisible" );
		var_sg_Sprites_SpriteValue = (float (__cdecl *)(sprite s, int32_t index)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteValue" );
		var_sg_Sprites_SpriteValueCount = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteValueCount" );
		var_sg_Sprites_SpriteValueNamed = (float (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteValueNamed" );
		var_sg_Sprites_SpriteValueNames = (void (__cdecl *)(sprite s, string_array result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteValueNames" );
		var_sg_Sprites_SpriteVelocity = (vector (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVelocity" );
		var_sg_Sprites_SpriteVisibleIndexOfLayer = (int32_t (__cdecl *)(sprite s, int32_t id)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleIndexOfLayer" );
		var_sg_Sprites_SpriteVisibleIndexOfLayerNamed = (int32_t (__cdecl *)(sprite s, const char *name)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleIndexOfLayerNamed" );
		var_sg_Sprites_SpriteVisibleLayer = (int32_t (__cdecl *)(sprite s, int32_t idx)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleLayer" );
		var_sg_Sprites_SpriteVisibleLayerCount = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleLayerCount" );
		var_sg_Sprites_SpriteVisibleLayerIds = (void (__cdecl *)(sprite s, int32_t *result, int32_t result_len)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteVisibleLayerIds" );
		var_sg_Sprites_SpriteWidth = (int32_t (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteWidth" );
		var_sg_Sprites_SpriteX = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteX" );
		var_sg_Sprites_SpriteY = (float (__cdecl *)(sprite s)) GetProcAddress( LibraryHandle, "sg_Sprites_SpriteY" );
		var_sg_Sprites_UpdateSpriteAnimationPctWithSound = (void (__cdecl *)(sprite s, float pct, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_UpdateSpriteAnimationPctWithSound" );
		var_sg_Sprites_UpdateSpritePctWithSound = (void (__cdecl *)(sprite s, float pct, bool withSound)) GetProcAddress( LibraryHandle, "sg_Sprites_UpdateSpritePctWithSound" );
		var_sg_Sprites_VectorFromCenterSpriteToPoint = (vector (__cdecl *)(sprite s, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Sprites_VectorFromCenterSpriteToPoint" );
		var_sg_Sprites_VectorFromTo = (vector (__cdecl *)(sprite s1, sprite s2)) GetProcAddress( LibraryHandle, "sg_Sprites_VectorFromTo" );
		var_sg_Text_DrawFramerate = (void (__cdecl *)(int32_t x, int32_t y, font font)) GetProcAddress( LibraryHandle, "sg_Text_DrawFramerate" );
		var_sg_Text_DrawFramerateFontNamed = (void (__cdecl *)(int32_t x, int32_t y, const char *name)) GetProcAddress( LibraryHandle, "sg_Text_DrawFramerateFontNamed" );
		var_sg_Text_DrawFramerateFontNamedSize = (void (__cdecl *)(int32_t x, int32_t y, const char *name, int32_t size)) GetProcAddress( LibraryHandle, "sg_Text_DrawFramerateFontNamedSize" );
		var_sg_Text_DrawFramerateWithSimpleFont = (void (__cdecl *)(int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Text_DrawFramerateWithSimpleFont" );
		var_sg_Text_DrawSimpleText = (void (__cdecl *)(const char *theText, color textColor, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawSimpleText" );
		var_sg_Text_DrawSimpleTextOnBitmap = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawSimpleTextOnBitmap" );
		var_sg_Text_DrawSimpleTextOnScreen = (void (__cdecl *)(const char *theText, color textColor, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawSimpleTextOnScreen" );
		var_sg_Text_DrawSimpleTextPt = (void (__cdecl *)(const char *theText, color textColor, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawSimpleTextPt" );
		var_sg_Text_DrawText = (void (__cdecl *)(const char *theText, color textColor, font theFont, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawText" );
		var_sg_Text_DrawTextAtPoint = (void (__cdecl *)(const char *theText, color textColor, font theFont, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextAtPoint" );
		var_sg_Text_DrawTextAtPointWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, const char *name, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextAtPointWithFontNamed" );
		var_sg_Text_DrawTextAtPointWithFontNamedAndSize = (void (__cdecl *)(const char *theText, color textColor, const char *name, int32_t size, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextAtPointWithFontNamedAndSize" );
		var_sg_Text_DrawTextLines = (void (__cdecl *)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, float x, float y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLines" );
		var_sg_Text_DrawTextLinesInRect = (void (__cdecl *)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRect" );
		var_sg_Text_DrawTextLinesInRectOnBitmap = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRectOnBitmap" );
		var_sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed" );
		var_sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize" );
		var_sg_Text_DrawTextLinesInRectOnScreen = (void (__cdecl *)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRectOnScreen" );
		var_sg_Text_DrawTextLinesInRectOnScreenWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRectOnScreenWithFontNamed" );
		var_sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize" );
		var_sg_Text_DrawTextLinesInRectWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRectWithFontNamed" );
		var_sg_Text_DrawTextLinesInRectWithFontNamedAndSize = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesInRectWithFontNamedAndSize" );
		var_sg_Text_DrawTextLinesOnBitmap = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, color backColor, font theFont, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesOnBitmap" );
		var_sg_Text_DrawTextLinesOnBitmapWithFontNamed = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, color backColor, const char *name, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesOnBitmapWithFontNamed" );
		var_sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize" );
		var_sg_Text_DrawTextLinesOnScreen = (void (__cdecl *)(const char *theText, color textColor, color backColor, font theFont, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesOnScreen" );
		var_sg_Text_DrawTextLinesOnScreenWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesOnScreenWithFontNamed" );
		var_sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize" );
		var_sg_Text_DrawTextLinesWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, font_alignment align, float x, float y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesWithFontNamed" );
		var_sg_Text_DrawTextLinesWithFontNamedAndSize = (void (__cdecl *)(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, float x, float y, int32_t w, int32_t h)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextLinesWithFontNamedAndSize" );
		var_sg_Text_DrawTextOnBitmap = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, font theFont, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnBitmap" );
		var_sg_Text_DrawTextOnBitmapAtPoint = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, font theFont, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnBitmapAtPoint" );
		var_sg_Text_DrawTextOnBitmapAtPointWithFontNamed = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, const char *name, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnBitmapAtPointWithFontNamed" );
		var_sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, const char *name, int32_t size, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize" );
		var_sg_Text_DrawTextOnBitmapWithFontNamed = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, const char *name, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnBitmapWithFontNamed" );
		var_sg_Text_DrawTextOnBitmapWithFontNamedAndSize = (void (__cdecl *)(bitmap dest, const char *theText, color textColor, const char *name, int32_t size, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnBitmapWithFontNamedAndSize" );
		var_sg_Text_DrawTextOnScreen = (void (__cdecl *)(const char *theText, color textColor, font theFont, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnScreen" );
		var_sg_Text_DrawTextOnScreenAtPoint = (void (__cdecl *)(const char *theText, color textColor, font theFont, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnScreenAtPoint" );
		var_sg_Text_DrawTextOnScreenAtPointWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, const char *name, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnScreenAtPointWithFontNamed" );
		var_sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize = (void (__cdecl *)(const char *theText, color textColor, const char *name, int32_t size, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize" );
		var_sg_Text_DrawTextOnScreenWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, const char *name, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnScreenWithFontNamed" );
		var_sg_Text_DrawTextOnScreenWithFontNamedAndSize = (void (__cdecl *)(const char *theText, color textColor, const char *name, int32_t size, int32_t x, int32_t y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextOnScreenWithFontNamedAndSize" );
		var_sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize = (bitmap (__cdecl *)(font font, const char *str, color clrFg, color backgroundColor)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize" );
		var_sg_Text_DrawTextWithFontNamed = (void (__cdecl *)(const char *theText, color textColor, const char *name, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextWithFontNamed" );
		var_sg_Text_DrawTextWithFontNamedSize = (void (__cdecl *)(const char *theText, color textColor, const char *name, int32_t size, float x, float y)) GetProcAddress( LibraryHandle, "sg_Text_DrawTextWithFontNamedSize" );
		var_sg_Text_FontFontStyle = (font_style (__cdecl *)(font font)) GetProcAddress( LibraryHandle, "sg_Text_FontFontStyle" );
		var_sg_Text_FontNameFor = (void (__cdecl *)(const char *fontName, int32_t size, char *result)) GetProcAddress( LibraryHandle, "sg_Text_FontNameFor" );
		var_sg_Text_FontNamed = (font (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Text_FontNamed" );
		var_sg_Text_FontNamedWithSize = (font (__cdecl *)(const char *name, int32_t size)) GetProcAddress( LibraryHandle, "sg_Text_FontNamedWithSize" );
		var_sg_Text_FontSetStyle = (void (__cdecl *)(font font, font_style value)) GetProcAddress( LibraryHandle, "sg_Text_FontSetStyle" );
		var_sg_Text_FreeFont = (void (__cdecl *)(font *fontToFree)) GetProcAddress( LibraryHandle, "sg_Text_FreeFont" );
		var_sg_Text_HasFont = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Text_HasFont" );
		var_sg_Text_LoadFont = (font (__cdecl *)(const char *fontName, int32_t size)) GetProcAddress( LibraryHandle, "sg_Text_LoadFont" );
		var_sg_Text_LoadFontNamed = (font (__cdecl *)(const char *name, const char *filename, int32_t size)) GetProcAddress( LibraryHandle, "sg_Text_LoadFontNamed" );
		var_sg_Text_ReleaseAllFonts = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Text_ReleaseAllFonts" );
		var_sg_Text_ReleaseFont = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Text_ReleaseFont" );
		var_sg_Text_TextAlignmentFrom = (font_alignment (__cdecl *)(const char *str)) GetProcAddress( LibraryHandle, "sg_Text_TextAlignmentFrom" );
		var_sg_Text_TextHeight = (int32_t (__cdecl *)(font theFont, const char *theText)) GetProcAddress( LibraryHandle, "sg_Text_TextHeight" );
		var_sg_Text_TextWidth = (int32_t (__cdecl *)(font theFont, const char *theText)) GetProcAddress( LibraryHandle, "sg_Text_TextWidth" );
		var_sg_Timers_CreateTimer = (timer (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Timers_CreateTimer" );
		var_sg_Timers_CreateTimerNamed = (timer (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_CreateTimerNamed" );
		var_sg_Timers_FreeTimer = (void (__cdecl *)(timer *toFree)) GetProcAddress( LibraryHandle, "sg_Timers_FreeTimer" );
		var_sg_Timers_PauseTimer = (void (__cdecl *)(timer toPause)) GetProcAddress( LibraryHandle, "sg_Timers_PauseTimer" );
		var_sg_Timers_ReleaseAllTimers = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Timers_ReleaseAllTimers" );
		var_sg_Timers_ReleaseTimer = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_ReleaseTimer" );
		var_sg_Timers_ResetTimer = (void (__cdecl *)(timer tmr)) GetProcAddress( LibraryHandle, "sg_Timers_ResetTimer" );
		var_sg_Timers_ResumeTimer = (void (__cdecl *)(timer toUnpause)) GetProcAddress( LibraryHandle, "sg_Timers_ResumeTimer" );
		var_sg_Timers_StartTimer = (void (__cdecl *)(timer toStart)) GetProcAddress( LibraryHandle, "sg_Timers_StartTimer" );
		var_sg_Timers_StopTimer = (void (__cdecl *)(timer toStop)) GetProcAddress( LibraryHandle, "sg_Timers_StopTimer" );
		var_sg_Timers_TimerNamed = (timer (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_Timers_TimerNamed" );
		var_sg_Timers_TimerTicks = (uint32_t (__cdecl *)(timer toGet)) GetProcAddress( LibraryHandle, "sg_Timers_TimerTicks" );
		var_sg_UserInterface_ActivatePanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActivatePanel" );
		var_sg_UserInterface_ActiveRadioButton = (region (__cdecl *)(guiradio_group grp)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButton" );
		var_sg_UserInterface_ActiveRadioButtonIndex = (int32_t (__cdecl *)(guiradio_group RadioGroup)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonIndex" );
		var_sg_UserInterface_ActiveRadioButtonIndexFromID = (int32_t (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonIndexFromID" );
		var_sg_UserInterface_ActiveRadioButtonIndexOnPanel = (int32_t (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonIndexOnPanel" );
		var_sg_UserInterface_ActiveRadioButtonOnPanelWithId = (region (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonOnPanelWithId" );
		var_sg_UserInterface_ActiveRadioButtonWithID = (region (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveRadioButtonWithID" );
		var_sg_UserInterface_ActiveTextBoxParent = (panel (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveTextBoxParent" );
		var_sg_UserInterface_ActiveTextIndex = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ActiveTextIndex" );
		var_sg_UserInterface_AddItemByBitmap = (void (__cdecl *)(guilist lst, bitmap img)) GetProcAddress( LibraryHandle, "sg_UserInterface_AddItemByBitmap" );
		var_sg_UserInterface_AddItemByText = (void (__cdecl *)(guilist lst, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_AddItemByText" );
		var_sg_UserInterface_AddItemOnPanelWithIdByText = (void (__cdecl *)(panel pnl, const char *id, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_AddItemOnPanelWithIdByText" );
		var_sg_UserInterface_AddItemWithIdByBitmap = (void (__cdecl *)(const char *id, bitmap img)) GetProcAddress( LibraryHandle, "sg_UserInterface_AddItemWithIdByBitmap" );
		var_sg_UserInterface_AddItemWithIdByText = (void (__cdecl *)(const char *id, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_AddItemWithIdByText" );
		var_sg_UserInterface_ButtonClicked = (bool (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ButtonClicked" );
		var_sg_UserInterface_ButtonNamedClicked = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_ButtonNamedClicked" );
		var_sg_UserInterface_CheckBoxSetStateWithId = (void (__cdecl *)(const char *id, bool val)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckBoxSetStateWithId" );
		var_sg_UserInterface_CheckboxFromRegion = (guicheckbox (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxFromRegion" );
		var_sg_UserInterface_CheckboxSetState = (void (__cdecl *)(guicheckbox chk, bool val)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxSetState" );
		var_sg_UserInterface_CheckboxSetStateFromRegion = (void (__cdecl *)(region r, bool val)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxSetStateFromRegion" );
		var_sg_UserInterface_CheckboxSetStateOnPanel = (void (__cdecl *)(panel pnl, const char *id, bool val)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxSetStateOnPanel" );
		var_sg_UserInterface_CheckboxState = (bool (__cdecl *)(const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxState" );
		var_sg_UserInterface_CheckboxStateFromCheckbox = (bool (__cdecl *)(guicheckbox chk)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxStateFromCheckbox" );
		var_sg_UserInterface_CheckboxStateFromRegion = (bool (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxStateFromRegion" );
		var_sg_UserInterface_CheckboxStateOnPanel = (bool (__cdecl *)(panel p, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_CheckboxStateOnPanel" );
		var_sg_UserInterface_DeactivatePanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_DeactivatePanel" );
		var_sg_UserInterface_DeactivateTextBox = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_DeactivateTextBox" );
		var_sg_UserInterface_DialogCancelled = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_DialogCancelled" );
		var_sg_UserInterface_DialogComplete = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_DialogComplete" );
		var_sg_UserInterface_DialogPath = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_DialogPath" );
		var_sg_UserInterface_DialogSetPath = (void (__cdecl *)(const char *fullname)) GetProcAddress( LibraryHandle, "sg_UserInterface_DialogSetPath" );
		var_sg_UserInterface_DrawGUIAsVectors = (void (__cdecl *)(bool b)) GetProcAddress( LibraryHandle, "sg_UserInterface_DrawGUIAsVectors" );
		var_sg_UserInterface_DrawInterface = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_DrawInterface" );
		var_sg_UserInterface_FinishReadingText = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_FinishReadingText" );
		var_sg_UserInterface_FreePanel = (void (__cdecl *)(panel *pnl)) GetProcAddress( LibraryHandle, "sg_UserInterface_FreePanel" );
		var_sg_UserInterface_GUIClicked = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_GUIClicked" );
		var_sg_UserInterface_GUISetActiveTextbox = (void (__cdecl *)(guitextbox t)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetActiveTextbox" );
		var_sg_UserInterface_GUISetActiveTextboxFromRegion = (void (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetActiveTextboxFromRegion" );
		var_sg_UserInterface_GUISetActiveTextboxNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetActiveTextboxNamed" );
		var_sg_UserInterface_GUISetBackgroundColor = (void (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetBackgroundColor" );
		var_sg_UserInterface_GUISetBackgroundColorInactive = (void (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetBackgroundColorInactive" );
		var_sg_UserInterface_GUISetForegroundColor = (void (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetForegroundColor" );
		var_sg_UserInterface_GUISetForegroundColorInactive = (void (__cdecl *)(color c)) GetProcAddress( LibraryHandle, "sg_UserInterface_GUISetForegroundColorInactive" );
		var_sg_UserInterface_GUITextBoxOfTextEntered = (guitextbox (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_GUITextBoxOfTextEntered" );
		var_sg_UserInterface_GUITextEntryComplete = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_GUITextEntryComplete" );
		var_sg_UserInterface_GlobalRegionWithID = (region (__cdecl *)(const char *ID)) GetProcAddress( LibraryHandle, "sg_UserInterface_GlobalRegionWithID" );
		var_sg_UserInterface_HasPanel = (bool (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_HasPanel" );
		var_sg_UserInterface_HidePanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_HidePanel" );
		var_sg_UserInterface_HidePanelNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_HidePanelNamed" );
		var_sg_UserInterface_IndexOfLastUpdatedTextBox = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_IndexOfLastUpdatedTextBox" );
		var_sg_UserInterface_IsDragging = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_IsDragging" );
		var_sg_UserInterface_LabelAlignementFromRegion = (font_alignment (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelAlignementFromRegion" );
		var_sg_UserInterface_LabelAlignment = (font_alignment (__cdecl *)(guilabel lbl)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelAlignment" );
		var_sg_UserInterface_LabelFont = (font (__cdecl *)(guilabel l)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelFont" );
		var_sg_UserInterface_LabelFromRegion = (guilabel (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelFromRegion" );
		var_sg_UserInterface_LabelFromRegionGetFont = (font (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelFromRegionGetFont" );
		var_sg_UserInterface_LabelFromRegionSetText = (void (__cdecl *)(region r, const char *newString)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelFromRegionSetText" );
		var_sg_UserInterface_LabelOnPanelWithIdSetText = (void (__cdecl *)(panel pnl, const char *id, const char *newString)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelOnPanelWithIdSetText" );
		var_sg_UserInterface_LabelSetFont = (void (__cdecl *)(guilabel l, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelSetFont" );
		var_sg_UserInterface_LabelSetText = (void (__cdecl *)(guilabel lb, const char *newString)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelSetText" );
		var_sg_UserInterface_LabelText = (void (__cdecl *)(guilabel lb, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelText" );
		var_sg_UserInterface_LabelTextFromRegion = (void (__cdecl *)(region r, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelTextFromRegion" );
		var_sg_UserInterface_LabelTextOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelTextOnPanelWithId" );
		var_sg_UserInterface_LabelTextWithId = (void (__cdecl *)(const char *id, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelTextWithId" );
		var_sg_UserInterface_LabelWithIdSetText = (void (__cdecl *)(const char *id, const char *newString)) GetProcAddress( LibraryHandle, "sg_UserInterface_LabelWithIdSetText" );
		var_sg_UserInterface_ListActiveItemIndex = (int32_t (__cdecl *)(guilist lst)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemIndex" );
		var_sg_UserInterface_ListActiveItemIndexFromRegion = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemIndexFromRegion" );
		var_sg_UserInterface_ListActiveItemIndexOnPanelWithId = (int32_t (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemIndexOnPanelWithId" );
		var_sg_UserInterface_ListActiveItemIndexWithId = (int32_t (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemIndexWithId" );
		var_sg_UserInterface_ListActiveItemText = (void (__cdecl *)(guilist list, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemText" );
		var_sg_UserInterface_ListActiveItemTextFromRegion = (void (__cdecl *)(region r, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemTextFromRegion" );
		var_sg_UserInterface_ListActiveItemTextOnPanelWithId = (void (__cdecl *)(panel pnl, const char *ID, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListActiveItemTextOnPanelWithId" );
		var_sg_UserInterface_ListAddBitmapAndTextItem = (void (__cdecl *)(guilist lst, bitmap img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddBitmapAndTextItem" );
		var_sg_UserInterface_ListAddBitmapAndTextItemFromRegion = (void (__cdecl *)(region r, bitmap img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddBitmapAndTextItemFromRegion" );
		var_sg_UserInterface_ListAddItemBitmap = (void (__cdecl *)(panel pnl, const char *id, bitmap img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemBitmap" );
		var_sg_UserInterface_ListAddItemByBitmapFromRegion = (void (__cdecl *)(region r, bitmap img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemByBitmapFromRegion" );
		var_sg_UserInterface_ListAddItemByTextFromRegion = (void (__cdecl *)(region r, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemByTextFromRegion" );
		var_sg_UserInterface_ListAddItemWithCell = (void (__cdecl *)(guilist lst, const bitmap_cell *img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemWithCell" );
		var_sg_UserInterface_ListAddItemWithCellAndText = (void (__cdecl *)(guilist lst, const bitmap_cell *img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemWithCellAndText" );
		var_sg_UserInterface_ListAddItemWithCellAndTextFromRegion = (void (__cdecl *)(region r, const bitmap_cell *img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemWithCellAndTextFromRegion" );
		var_sg_UserInterface_ListAddItemWithCellFromRegion = (void (__cdecl *)(region r, const bitmap_cell *img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListAddItemWithCellFromRegion" );
		var_sg_UserInterface_ListBitmapCellIndex = (int32_t (__cdecl *)(guilist lst, const bitmap_cell *img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListBitmapCellIndex" );
		var_sg_UserInterface_ListBitmapIndex = (int32_t (__cdecl *)(guilist lst, bitmap img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListBitmapIndex" );
		var_sg_UserInterface_ListClearItems = (void (__cdecl *)(guilist lst)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListClearItems" );
		var_sg_UserInterface_ListClearItemsFromRegion = (void (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListClearItemsFromRegion" );
		var_sg_UserInterface_ListClearItemsGivenPanelWithId = (void (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListClearItemsGivenPanelWithId" );
		var_sg_UserInterface_ListFont = (font (__cdecl *)(guilist lst)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListFont" );
		var_sg_UserInterface_ListFontAlignment = (font_alignment (__cdecl *)(guilist lst)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListFontAlignment" );
		var_sg_UserInterface_ListFontAlignmentFromRegion = (font_alignment (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListFontAlignmentFromRegion" );
		var_sg_UserInterface_ListFontFromRegion = (font (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListFontFromRegion" );
		var_sg_UserInterface_ListFromRegion = (guilist (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListFromRegion" );
		var_sg_UserInterface_ListItemCount = (int32_t (__cdecl *)(guilist lst)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemCount" );
		var_sg_UserInterface_ListItemCountFromRegion = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemCountFromRegion" );
		var_sg_UserInterface_ListItemCountOnPanelWithId = (int32_t (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemCountOnPanelWithId" );
		var_sg_UserInterface_ListItemCountWithId = (int32_t (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemCountWithId" );
		var_sg_UserInterface_ListItemText = (void (__cdecl *)(guilist lst, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemText" );
		var_sg_UserInterface_ListItemTextFromId = (void (__cdecl *)(const char *id, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemTextFromId" );
		var_sg_UserInterface_ListItemTextFromRegion = (void (__cdecl *)(region r, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemTextFromRegion" );
		var_sg_UserInterface_ListItemTextOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, int32_t idx, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListItemTextOnPanelWithId" );
		var_sg_UserInterface_ListLargestStartIndex = (int32_t (__cdecl *)(guilist lst)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListLargestStartIndex" );
		var_sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem = (void (__cdecl *)(panel pnl, const char *id, bitmap img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem" );
		var_sg_UserInterface_ListOnPanelWithIdAddItemWithCell = (void (__cdecl *)(panel pnl, const char *id, const bitmap_cell *img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListOnPanelWithIdAddItemWithCell" );
		var_sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText = (void (__cdecl *)(panel pnl, const char *id, const bitmap_cell *img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText" );
		var_sg_UserInterface_ListRemoveActiveItemFromId = (void (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveActiveItemFromId" );
		var_sg_UserInterface_ListRemoveActiveItemFromRegion = (void (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveActiveItemFromRegion" );
		var_sg_UserInterface_ListRemoveActiveItemOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveActiveItemOnPanelWithId" );
		var_sg_UserInterface_ListRemoveItem = (void (__cdecl *)(guilist lst, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveItem" );
		var_sg_UserInterface_ListRemoveItemFromWithId = (void (__cdecl *)(const char *id, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveItemFromWithId" );
		var_sg_UserInterface_ListRemoveItemOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListRemoveItemOnPanelWithId" );
		var_sg_UserInterface_ListScrollIncrement = (int32_t (__cdecl *)(guilist lst)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListScrollIncrement" );
		var_sg_UserInterface_ListSet = (void (__cdecl *)(panel pnl, const char *id, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSet" );
		var_sg_UserInterface_ListSetActiveItemIndex = (void (__cdecl *)(guilist lst, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetActiveItemIndex" );
		var_sg_UserInterface_ListSetActiveItemIndexWithId = (void (__cdecl *)(const char *id, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetActiveItemIndexWithId" );
		var_sg_UserInterface_ListSetFont = (void (__cdecl *)(guilist lst, font f)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetFont" );
		var_sg_UserInterface_ListSetFontAlignment = (void (__cdecl *)(guilist lst, font_alignment align)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetFontAlignment" );
		var_sg_UserInterface_ListSetFontAlignmentFromRegion = (void (__cdecl *)(region r, font_alignment align)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetFontAlignmentFromRegion" );
		var_sg_UserInterface_ListSetStartingAt = (void (__cdecl *)(guilist lst, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetStartingAt" );
		var_sg_UserInterface_ListSetStartingAtFromRegion = (void (__cdecl *)(region r, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListSetStartingAtFromRegion" );
		var_sg_UserInterface_ListStartAt = (int32_t (__cdecl *)(guilist lst)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListStartAt" );
		var_sg_UserInterface_ListStartingAtFromRegion = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListStartingAtFromRegion" );
		var_sg_UserInterface_ListTextIndex = (int32_t (__cdecl *)(guilist lst, const char *value)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListTextIndex" );
		var_sg_UserInterface_ListWithIDAddBitmapWithTextItem = (void (__cdecl *)(const char *id, bitmap img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListWithIDAddBitmapWithTextItem" );
		var_sg_UserInterface_ListWithIdActiveItemText = (void (__cdecl *)(const char *ID, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListWithIdActiveItemText" );
		var_sg_UserInterface_ListWithIdAddItemWithCell = (void (__cdecl *)(const char *id, const bitmap_cell *img)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListWithIdAddItemWithCell" );
		var_sg_UserInterface_ListWithIdAddItemWithCellAndText = (void (__cdecl *)(const char *id, const bitmap_cell *img, const char *text)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListWithIdAddItemWithCellAndText" );
		var_sg_UserInterface_ListclearItemsWithId = (void (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ListclearItemsWithId" );
		var_sg_UserInterface_LoadPanel = (panel (__cdecl *)(const char *filename)) GetProcAddress( LibraryHandle, "sg_UserInterface_LoadPanel" );
		var_sg_UserInterface_LoadPanelNamed = (panel (__cdecl *)(const char *name, const char *filename)) GetProcAddress( LibraryHandle, "sg_UserInterface_LoadPanelNamed" );
		var_sg_UserInterface_MovePanel = (void (__cdecl *)(panel p, const vector *mvmt)) GetProcAddress( LibraryHandle, "sg_UserInterface_MovePanel" );
		var_sg_UserInterface_NewPanel = (panel (__cdecl *)(const char *pnlName)) GetProcAddress( LibraryHandle, "sg_UserInterface_NewPanel" );
		var_sg_UserInterface_PanelActive = (bool (__cdecl *)(panel pnl)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelActive" );
		var_sg_UserInterface_PanelAtPoint = (panel (__cdecl *)(const point2d *pt)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelAtPoint" );
		var_sg_UserInterface_PanelClicked = (panel (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelClicked" );
		var_sg_UserInterface_PanelDraggable = (bool (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelDraggable" );
		var_sg_UserInterface_PanelFilename = (void (__cdecl *)(panel pnl, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelFilename" );
		var_sg_UserInterface_PanelHeight = (int32_t (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelHeight" );
		var_sg_UserInterface_PanelIsDragging = (bool (__cdecl *)(panel pnl)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelIsDragging" );
		var_sg_UserInterface_PanelName = (void (__cdecl *)(panel pnl, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelName" );
		var_sg_UserInterface_PanelNamed = (panel (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelNamed" );
		var_sg_UserInterface_PanelNamedHeight = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelNamedHeight" );
		var_sg_UserInterface_PanelNamedWidth = (int32_t (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelNamedWidth" );
		var_sg_UserInterface_PanelSetDraggable = (void (__cdecl *)(panel p, bool b)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelSetDraggable" );
		var_sg_UserInterface_PanelVisible = (bool (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelVisible" );
		var_sg_UserInterface_PanelWasClicked = (bool (__cdecl *)(panel pnl)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelWasClicked" );
		var_sg_UserInterface_PanelWidth = (int32_t (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelWidth" );
		var_sg_UserInterface_PanelX = (float (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelX" );
		var_sg_UserInterface_PanelY = (float (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PanelY" );
		var_sg_UserInterface_PointInRegion = (bool (__cdecl *)(const point2d *pt, panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_PointInRegion" );
		var_sg_UserInterface_PointInRegionWithKind = (bool (__cdecl *)(const point2d *pt, panel p, guielement_kind kind)) GetProcAddress( LibraryHandle, "sg_UserInterface_PointInRegionWithKind" );
		var_sg_UserInterface_RadioGroupFromId = (guiradio_group (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_RadioGroupFromId" );
		var_sg_UserInterface_RadioGroupFromRegion = (guiradio_group (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RadioGroupFromRegion" );
		var_sg_UserInterface_RadioGroupOnPanelWidthId = (guiradio_group (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_RadioGroupOnPanelWidthId" );
		var_sg_UserInterface_RegionActive = (bool (__cdecl *)(region forRegion)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionActive" );
		var_sg_UserInterface_RegionAtPoint = (region (__cdecl *)(panel p, const point2d *pt)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionAtPoint" );
		var_sg_UserInterface_RegionClicked = (region (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionClicked" );
		var_sg_UserInterface_RegionClickedID = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionClickedID" );
		var_sg_UserInterface_RegionHeight = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionHeight" );
		var_sg_UserInterface_RegionID = (void (__cdecl *)(region r, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionID" );
		var_sg_UserInterface_RegionOfLastUpdatedTextBox = (region (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionOfLastUpdatedTextBox" );
		var_sg_UserInterface_RegionPanel = (panel (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionPanel" );
		var_sg_UserInterface_RegionWidth = (int32_t (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionWidth" );
		var_sg_UserInterface_RegionWithID = (region (__cdecl *)(panel pnl, const char *ID)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionWithID" );
		var_sg_UserInterface_RegionX = (float (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionX" );
		var_sg_UserInterface_RegionY = (float (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegionY" );
		var_sg_UserInterface_RegisterEventCallback = (void (__cdecl *)(region r, guievent_callback callback)) GetProcAddress( LibraryHandle, "sg_UserInterface_RegisterEventCallback" );
		var_sg_UserInterface_ReleaseAllPanels = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ReleaseAllPanels" );
		var_sg_UserInterface_ReleasePanel = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_ReleasePanel" );
		var_sg_UserInterface_SelectRadioButton = (void (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_SelectRadioButton" );
		var_sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex = (void (__cdecl *)(guiradio_group rGroup, int32_t idx)) GetProcAddress( LibraryHandle, "sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex" );
		var_sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion = (void (__cdecl *)(guiradio_group rGroup, region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion" );
		var_sg_UserInterface_SelectRadioButtonOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_SelectRadioButtonOnPanelWithId" );
		var_sg_UserInterface_SelectRadioButtonWithID = (void (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_SelectRadioButtonWithID" );
		var_sg_UserInterface_SetLabelAlignment = (void (__cdecl *)(guilabel tb, font_alignment align)) GetProcAddress( LibraryHandle, "sg_UserInterface_SetLabelAlignment" );
		var_sg_UserInterface_SetLabelAlignmentFromRegion = (void (__cdecl *)(region r, font_alignment align)) GetProcAddress( LibraryHandle, "sg_UserInterface_SetLabelAlignmentFromRegion" );
		var_sg_UserInterface_SetRegionActive = (void (__cdecl *)(region forRegion, bool b)) GetProcAddress( LibraryHandle, "sg_UserInterface_SetRegionActive" );
		var_sg_UserInterface_ShowOpenDialog = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowOpenDialog" );
		var_sg_UserInterface_ShowOpenDialogWithType = (void (__cdecl *)(file_dialog_select_type select)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowOpenDialogWithType" );
		var_sg_UserInterface_ShowPanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowPanel" );
		var_sg_UserInterface_ShowPanelDialog = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowPanelDialog" );
		var_sg_UserInterface_ShowPanelNamed = (void (__cdecl *)(const char *name)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowPanelNamed" );
		var_sg_UserInterface_ShowSaveDialog = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowSaveDialog" );
		var_sg_UserInterface_ShowSaveDialogWithType = (void (__cdecl *)(file_dialog_select_type select)) GetProcAddress( LibraryHandle, "sg_UserInterface_ShowSaveDialogWithType" );
		var_sg_UserInterface_TextBoxAlignmentFromRegion = (font_alignment (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextBoxAlignmentFromRegion" );
		var_sg_UserInterface_TextBoxFont = (font (__cdecl *)(guitextbox tb)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextBoxFont" );
		var_sg_UserInterface_TextBoxFontFromRegion = (font (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextBoxFontFromRegion" );
		var_sg_UserInterface_TextBoxFromID = (guitextbox (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextBoxFromID" );
		var_sg_UserInterface_TextBoxSetAlignmentFromRegion = (void (__cdecl *)(region r, font_alignment align)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextBoxSetAlignmentFromRegion" );
		var_sg_UserInterface_TextBoxText = (void (__cdecl *)(guitextbox tb, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextBoxText" );
		var_sg_UserInterface_TextboxAlignment = (font_alignment (__cdecl *)(guitextbox tb)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxAlignment" );
		var_sg_UserInterface_TextboxFromRegion = (guitextbox (__cdecl *)(region r)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxFromRegion" );
		var_sg_UserInterface_TextboxSetAlignment = (void (__cdecl *)(guitextbox tb, font_alignment align)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetAlignment" );
		var_sg_UserInterface_TextboxSetFont = (void (__cdecl *)(guitextbox Tb, font f)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetFont" );
		var_sg_UserInterface_TextboxSetText = (void (__cdecl *)(guitextbox tb, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetText" );
		var_sg_UserInterface_TextboxSetTextFromId = (void (__cdecl *)(const char *id, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextFromId" );
		var_sg_UserInterface_TextboxSetTextFromRegion = (void (__cdecl *)(region r, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextFromRegion" );
		var_sg_UserInterface_TextboxSetTextOnPanelAndId = (void (__cdecl *)(panel pnl, const char *id, const char *s)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextOnPanelAndId" );
		var_sg_UserInterface_TextboxSetTextToInt = (void (__cdecl *)(guitextbox tb, int32_t i)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToInt" );
		var_sg_UserInterface_TextboxSetTextToIntFromRegion = (void (__cdecl *)(region r, int32_t i)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToIntFromRegion" );
		var_sg_UserInterface_TextboxSetTextToIntOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, int32_t i)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToIntOnPanelWithId" );
		var_sg_UserInterface_TextboxSetTextToIntWithId = (void (__cdecl *)(const char *id, int32_t i)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToIntWithId" );
		var_sg_UserInterface_TextboxSetTextToSingle = (void (__cdecl *)(guitextbox tb, float single)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToSingle" );
		var_sg_UserInterface_TextboxSetTextToSingleFromId = (void (__cdecl *)(const char *id, float single)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToSingleFromId" );
		var_sg_UserInterface_TextboxSetTextToSingleFromRegion = (void (__cdecl *)(region r, float single)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToSingleFromRegion" );
		var_sg_UserInterface_TextboxSetTextToSingleOnPanel = (void (__cdecl *)(panel pnl, const char *id, float single)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxSetTextToSingleOnPanel" );
		var_sg_UserInterface_TextboxTextFromRegion = (void (__cdecl *)(region r, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxTextFromRegion" );
		var_sg_UserInterface_TextboxTextOnPanelWithId = (void (__cdecl *)(panel pnl, const char *id, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxTextOnPanelWithId" );
		var_sg_UserInterface_TextboxTextWithId = (void (__cdecl *)(const char *id, char *result)) GetProcAddress( LibraryHandle, "sg_UserInterface_TextboxTextWithId" );
		var_sg_UserInterface_ToggleActivatePanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleActivatePanel" );
		var_sg_UserInterface_ToggleCheckboxState = (void (__cdecl *)(guicheckbox c)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleCheckboxState" );
		var_sg_UserInterface_ToggleCheckboxStateFromID = (void (__cdecl *)(const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleCheckboxStateFromID" );
		var_sg_UserInterface_ToggleCheckboxStateOnPanel = (void (__cdecl *)(panel pnl, const char *id)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleCheckboxStateOnPanel" );
		var_sg_UserInterface_ToggleRegionActive = (void (__cdecl *)(region forRegion)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleRegionActive" );
		var_sg_UserInterface_ToggleShowPanel = (void (__cdecl *)(panel p)) GetProcAddress( LibraryHandle, "sg_UserInterface_ToggleShowPanel" );
		var_sg_UserInterface_UpdateInterface = (void (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_UserInterface_UpdateInterface" );
		var_sg_Utils_CalculateFramerate = (void (__cdecl *)(char *average, char *highest, char *lowest, color *textColor)) GetProcAddress( LibraryHandle, "sg_Utils_CalculateFramerate" );
		var_sg_Utils_Delay = (void (__cdecl *)(uint32_t time)) GetProcAddress( LibraryHandle, "sg_Utils_Delay" );
		var_sg_Utils_ExceptionMessage = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Utils_ExceptionMessage" );
		var_sg_Utils_ExceptionOccured = (bool (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Utils_ExceptionOccured" );
		var_sg_Utils_GetFramerate = (int32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Utils_GetFramerate" );
		var_sg_Utils_GetTicks = (uint32_t (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Utils_GetTicks" );
		var_sg_Utils_Rnd = (float (__cdecl *)()) GetProcAddress( LibraryHandle, "sg_Utils_Rnd" );
		var_sg_Utils_RndUpto = (int32_t (__cdecl *)(int32_t ubound)) GetProcAddress( LibraryHandle, "sg_Utils_RndUpto" );
		var_sg_Utils_SwinGameVersion = (void (__cdecl *)(char *result)) GetProcAddress( LibraryHandle, "sg_Utils_SwinGameVersion" );
	}

	~DLLLoader()
	{
		if( LibraryHandle != NULL )
		{
			FreeLibrary( LibraryHandle );
		}
	}

	HMODULE LibraryHandle;
};

static DLLLoader Loader;
#endif
#endif
